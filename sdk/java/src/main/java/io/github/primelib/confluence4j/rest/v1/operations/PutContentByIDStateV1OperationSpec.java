// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import io.github.primelib.confluence4j.rest.v1.models.ContentStateRestInput;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * PutContentByIDStateV1
 * <p>
 * Sets the content state of the content specified and creates a new version
 * (publishes the content without changing the body) of the content with the new state.
 * 
 * You may pass in either an id of a state, or the name and color of a desired new state.
 * If all 3 are passed in, id will be used.
 * If the name and color passed in already exist under the current user's existing custom states, the existing state will be reused.
 * If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content's space)
 * then this set will fail.
 * 
 * You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * Permission to edit the content.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PutContentByIDStateV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The Id of the content whose content state is to be set.
     *
     */
    @NonNull
    private String id;

    /**
     * Status of content onto which state will be placed. If draft, then draft state will change.
     * If current, state will be placed onto a new version of the content with same body as previous version.
     *
     */
    @NonNull
    private String status;

    /**
     * Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space.
     *
     */
    @NonNull
    private ContentStateRestInput payload;

    /**
     * Constructs a validated instance of {@link PutContentByIDStateV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PutContentByIDStateV1OperationSpec(Consumer<PutContentByIDStateV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(id, "id is a required parameter!");
        Objects.requireNonNull(status, "status is a required parameter!");
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
