// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.Group;
import io.github.primelib.confluence4j.rest.v1.models.GroupArrayWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.UserArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteGroupByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteGroupUserByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupByGroupIDMembersByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupPickerV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostGroupUserByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostGroupV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientGroupConsumerApi
 *
 * **[WARNING](https://support.atlassian.com/user-management/docs/create-and-update-groups/) The standard Atlassian group names are default names only and can be edited or deleted.** For example, an admin or Atlassian support could delete the default group jira-software-users or rename it to jsw-users at any point.
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientGroupConsumerApi {
    private final ConfluenceRestClientGroupApi api;

    public ConfluenceRestClientGroupConsumerApi(ConfluenceRestClientGroupApi api) {
        this.api = api;
    }


    /**
    * GetGroupV1
    * Get groups
    * Returns all user groups. The returned groups are ordered alphabetically in
    * ascending order by group name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>start: The starting index of the returned groups.</li>
    *   <li>limit: The maximum number of groups to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>accessType: The group permission level for which to filter results.</li>
    * </ul>
    */
    public GroupArrayWithLinks GetGroupV1(Consumer<GetGroupV1OperationSpec> spec) {
        GetGroupV1OperationSpec r = new GetGroupV1OperationSpec(spec);
        return api.GetGroupV1(r.start(), r.limit(), r.accessType());
    }

    /**
    * PostGroupV1
    * Create new user group
    * Creates a new user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: Name of the group that is to be created.</li>
    * </ul>
    */
    public Group PostGroupV1(Consumer<PostGroupV1OperationSpec> spec) {
        PostGroupV1OperationSpec r = new PostGroupV1OperationSpec(spec);
        return api.PostGroupV1(r.payload());
    }

    /**
    * GetGroupByIDV1
    * Get group
    * Returns a user group for a given group id.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The id of the group.</li>
    * </ul>
    */
    public Group GetGroupByIDV1(Consumer<GetGroupByIDV1OperationSpec> spec) {
        GetGroupByIDV1OperationSpec r = new GetGroupByIDV1OperationSpec(spec);
        return api.GetGroupByIDV1(r.id());
    }

    /**
    * DeleteGroupByIDV1
    * Delete user group
    * Delete user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: Id of the group to delete.</li>
    * </ul>
    */
    public void DeleteGroupByIDV1(Consumer<DeleteGroupByIDV1OperationSpec> spec) {
        DeleteGroupByIDV1OperationSpec r = new DeleteGroupByIDV1OperationSpec(spec);
        api.DeleteGroupByIDV1(r.id());
    }

    /**
    * GetGroupPickerV1
    * Search groups by partial query
    * Get search results of groups by partial query provided.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>query: the search term used to query results.</li>
    *   <li>start: The starting index of the returned groups.</li>
    *   <li>limit: The maximum number of groups to return per page. Note, this is restricted to a maximum limit of 200 groups.</li>
    *   <li>shouldReturnTotalSize: Whether to include total size parameter in the results. Note, fetching total size property is an expensive operation; use it if your use case needs this value.</li>
    * </ul>
    */
    public GroupArrayWithLinks GetGroupPickerV1(Consumer<GetGroupPickerV1OperationSpec> spec) {
        GetGroupPickerV1OperationSpec r = new GetGroupPickerV1OperationSpec(spec);
        return api.GetGroupPickerV1(r.query(), r.start(), r.limit(), r.shouldReturnTotalSize());
    }

    /**
    * GetGroupByGroupIDMembersByGroupIDV1
    * Get group members
    * Returns the users that are members of a group.
    * 
    * Use updated Get group API
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: The id of the group to be queried for its members.</li>
    *   <li>start: The starting index of the returned users.</li>
    *   <li>limit: The maximum number of users to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>shouldReturnTotalSize: Whether to include total size parameter in the results. Note, fetching total size property is an expensive operation; use it if your use case needs this value.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.   - `personalSpace` returns the user's personal space, if it exists.   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.</li>
    * </ul>
    */
    public UserArray GetGroupByGroupIDMembersByGroupIDV1(Consumer<GetGroupByGroupIDMembersByGroupIDV1OperationSpec> spec) {
        GetGroupByGroupIDMembersByGroupIDV1OperationSpec r = new GetGroupByGroupIDMembersByGroupIDV1OperationSpec(spec);
        return api.GetGroupByGroupIDMembersByGroupIDV1(r.groupId(), r.start(), r.limit(), r.shouldReturnTotalSize(), r.expand());
    }

    /**
    * PostGroupUserByGroupIDV1
    * Add member to group by groupId
    * Adds a user as a member in a group represented by its groupId
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: GroupId of the group whose membership is updated</li>
    *   <li>payload: AccountId of the user who needs to be added as member.</li>
    * </ul>
    */
    public void PostGroupUserByGroupIDV1(Consumer<PostGroupUserByGroupIDV1OperationSpec> spec) {
        PostGroupUserByGroupIDV1OperationSpec r = new PostGroupUserByGroupIDV1OperationSpec(spec);
        api.PostGroupUserByGroupIDV1(r.groupId(), r.payload());
    }

    /**
    * DeleteGroupUserByGroupIDV1
    * Remove member from group using group id
    * Remove user as a member from a group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: Id of the group whose membership is updated.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    * </ul>
    */
    public void DeleteGroupUserByGroupIDV1(Consumer<DeleteGroupUserByGroupIDV1OperationSpec> spec) {
        DeleteGroupUserByGroupIDV1OperationSpec r = new DeleteGroupUserByGroupIDV1OperationSpec(spec);
        api.DeleteGroupUserByGroupIDV1(r.groupId(), r.accountId(), r.key(), r.username());
    }

}
