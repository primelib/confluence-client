// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.Nullable;

/**
 * GetLongtaskV1
 * <p>
 * Returns information about all active long-running tasks (e.g. space export),
 * such as how long each task has been running and the percentage of each task
 * that has completed.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * Permission to access the Confluence site ('Can use' global permission).
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class GetLongtaskV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The key of the tasks.
     *
     */
    @Nullable
    private String key;

    /**
     * The starting index of the returned tasks.
     *
     */
    @Nullable
    private Integer start;

    /**
     * The maximum number of tasks to return per page. Note, this may be
     * restricted by fixed system limits.
     *
     */
    @Nullable
    private Integer limit;

    /**
     * Constructs a validated instance of {@link GetLongtaskV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public GetLongtaskV1OperationSpec(Consumer<GetLongtaskV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
    }
}
