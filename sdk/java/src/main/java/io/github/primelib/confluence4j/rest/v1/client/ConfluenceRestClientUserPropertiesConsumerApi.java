// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.UserProperty;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyKeyArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserByUserIDPropertyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutUserByUserIDPropertyByKeyV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientUserPropertiesConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientUserPropertiesConsumerApi {
    private final ConfluenceRestClientUserPropertiesApi api;

    public ConfluenceRestClientUserPropertiesConsumerApi(ConfluenceRestClientUserPropertiesApi api) {
        this.api = api;
    }


    /**
    * GetUserByUserIDPropertyV1
    * Get user properties
    * Returns the properties for a user as list of property keys. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user to be queried for its properties.</li>
    *   <li>start: The starting index of the returned properties.</li>
    *   <li>limit: The maximum number of properties to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public UserPropertyKeyArray GetUserByUserIDPropertyV1(Consumer<GetUserByUserIDPropertyV1OperationSpec> spec) {
        GetUserByUserIDPropertyV1OperationSpec r = new GetUserByUserIDPropertyV1OperationSpec(spec);
        return api.GetUserByUserIDPropertyV1(r.userId(), r.start(), r.limit());
    }

    /**
    * GetUserByUserIDPropertyByKeyV1
    * Get user property
    * Returns the property corresponding to `key` for a user. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user to be queried for its properties.</li>
    *   <li>key: The key of the user property.</li>
    * </ul>
    */
    public UserProperty GetUserByUserIDPropertyByKeyV1(Consumer<GetUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        GetUserByUserIDPropertyByKeyV1OperationSpec r = new GetUserByUserIDPropertyByKeyV1OperationSpec(spec);
        return api.GetUserByUserIDPropertyByKeyV1(r.userId(), r.key());
    }

    /**
    * PutUserByUserIDPropertyByKeyV1
    * Update user property
    * Updates a property for the given user. Note, you cannot update the key of a user property, only the value.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    *   <li>payload: The user property to be updated.</li>
    * </ul>
    */
    public void PutUserByUserIDPropertyByKeyV1(Consumer<PutUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        PutUserByUserIDPropertyByKeyV1OperationSpec r = new PutUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.PutUserByUserIDPropertyByKeyV1(r.userId(), r.key(), r.payload());
    }

    /**
    * PostUserByUserIDPropertyByKeyV1
    * Create user property by key
    * Creates a property for a user. For more information  about user properties, see [Confluence entity properties]
    * (https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * `Note:` the number of properties which could be created per app in a tenant for each user might be
    * restricted by fixed system limits.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    *   <li>payload: The user property to be created.</li>
    * </ul>
    */
    public void PostUserByUserIDPropertyByKeyV1(Consumer<PostUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        PostUserByUserIDPropertyByKeyV1OperationSpec r = new PostUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.PostUserByUserIDPropertyByKeyV1(r.userId(), r.key(), r.payload());
    }

    /**
    * DeleteUserByUserIDPropertyByKeyV1
    * Delete user property
    * Deletes a property for the given user.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    * </ul>
    */
    public void DeleteUserByUserIDPropertyByKeyV1(Consumer<DeleteUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        DeleteUserByUserIDPropertyByKeyV1OperationSpec r = new DeleteUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.DeleteUserByUserIDPropertyByKeyV1(r.userId(), r.key());
    }

}
