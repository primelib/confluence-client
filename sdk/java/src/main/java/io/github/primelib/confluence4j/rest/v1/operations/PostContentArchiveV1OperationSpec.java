// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import io.github.primelib.confluence4j.rest.v1.models.ArchivePagesB;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * PostContentArchiveV1
 * <p>
 * Archives a list of pages. The pages to be archived are specified as a list of content IDs.
 * This API accepts the archival request and returns a task ID.
 * The archival process happens asynchronously.
 * Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
 * 
 * Each content ID needs to resolve to page objects that are not already in an archived state.
 * The content IDs need not belong to the same space.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * 'Archive' permission for each of the pages in the corresponding space it belongs to.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PostContentArchiveV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The pages to be archived.
     *
     */
    @NonNull
    private ArchivePagesB payload;

    /**
     * Constructs a validated instance of {@link PostContentArchiveV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PostContentArchiveV1OperationSpec(Consumer<PostContentArchiveV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
