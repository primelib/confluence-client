// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.UserProperty;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyCreate;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyKeyArray;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyUpdate;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ConfluenceRestClientUserPropertiesApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientUserPropertiesApi {

    /**
    * GetUserByUserIDPropertyV1
    * Get user properties
    * Returns the properties for a user as list of property keys. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user to be queried for its properties.
    * @param start The starting index of the returned properties.
    * @param limit The maximum number of properties to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /wiki/rest/api/user/{userId}/property?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    UserPropertyKeyArray GetUserByUserIDPropertyV1(
            @NotNull @Param("userId") String userId,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetUserByUserIDPropertyByKeyV1
    * Get user property
    * Returns the property corresponding to `key` for a user. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user to be queried for its properties.
    * @param key The key of the user property.
    */
    @RequestLine("GET /wiki/rest/api/user/{userId}/property/{key}")
    @Headers({
        "Accept: application/json"
    })
    UserProperty GetUserByUserIDPropertyByKeyV1(
            @NotNull @Param("userId") String userId,
            @NotNull @Param("key") String key
    );

    /**
    * PutUserByUserIDPropertyByKeyV1
    * Update user property
    * Updates a property for the given user. Note, you cannot update the key of a user property, only the value.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    * @param payload The user property to be updated.
    */
    @RequestLine("PUT /wiki/rest/api/user/{userId}/property/{key}")
    @Headers({
        "Content-Type: application/json"
    })
    void PutUserByUserIDPropertyByKeyV1(
            @NotNull @Param("userId") String userId,
            @NotNull @Param("key") String key,
            @NotNull UserPropertyUpdate payload
    );

    /**
    * PostUserByUserIDPropertyByKeyV1
    * Create user property by key
    * Creates a property for a user. For more information  about user properties, see [Confluence entity properties]
    * (https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * `Note:` the number of properties which could be created per app in a tenant for each user might be
    * restricted by fixed system limits.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    * @param payload The user property to be created.
    */
    @RequestLine("POST /wiki/rest/api/user/{userId}/property/{key}")
    @Headers({
        "Content-Type: application/json"
    })
    void PostUserByUserIDPropertyByKeyV1(
            @NotNull @Param("userId") String userId,
            @NotNull @Param("key") String key,
            @NotNull UserPropertyCreate payload
    );

    /**
    * DeleteUserByUserIDPropertyByKeyV1
    * Delete user property
    * Deletes a property for the given user.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    */
    @RequestLine("DELETE /wiki/rest/api/user/{userId}/property/{key}")
    void DeleteUserByUserIDPropertyByKeyV1(
            @NotNull @Param("userId") String userId,
            @NotNull @Param("key") String key
    );

}
