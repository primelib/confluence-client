// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.LabelArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDPageTreeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSpaceBySpaceKeyLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpaceBySpaceKeyLabelV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientExperimentalConsumerApi
 *
 * APIs in this section can change without any prior deprecation notice.
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientExperimentalConsumerApi {
    private final ConfluenceRestClientExperimentalApi api;

    public ConfluenceRestClientExperimentalConsumerApi(ConfluenceRestClientExperimentalApi api) {
        this.api = api;
    }


    /**
    * DeleteContentByIDPageTreeV1
    * Delete page tree
    * Moves a pagetree rooted at a page to the space's trash:
    * 
    * - If the content's type is `page` and its status is `current`, it will be trashed including
    * all its descendants.
    * - For every other combination of content type and status, this API is not supported.
    * 
    * This API accepts the pageTree delete request and returns a task ID.
    * The delete process happens asynchronously.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the `/longtask/&lt;taskId&gt;` REST API to get the copy task status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Delete' permission for the space that the content is in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content which forms root of the page tree, to be deleted.</li>
    * </ul>
    */
    public void DeleteContentByIDPageTreeV1(Consumer<DeleteContentByIDPageTreeV1OperationSpec> spec) {
        DeleteContentByIDPageTreeV1OperationSpec r = new DeleteContentByIDPageTreeV1OperationSpec(spec);
        api.DeleteContentByIDPageTreeV1(r.id());
    }

    /**
    * GetSpaceBySpaceKeyLabelV1
    * Get Space Labels
    * Returns a list of labels associated with a space. Can provide a prefix as well as other filters to
    * select different types of labels.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to get labels for.</li>
    *   <li>prefix: Filters the results to labels with the specified prefix. If this parameter is not specified, then labels with any prefix will be returned.  - `global` prefix is used by labels that are on content within the provided space. - `my` prefix can be explicitly added by a user when adding a label via the UI, e.g. 'my:example-label'. - `team` prefix is used for labels applied to the space.</li>
    *   <li>start: The starting index of the returned labels.</li>
    *   <li>limit: The maximum number of labels to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public LabelArray GetSpaceBySpaceKeyLabelV1(Consumer<GetSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        GetSpaceBySpaceKeyLabelV1OperationSpec r = new GetSpaceBySpaceKeyLabelV1OperationSpec(spec);
        return api.GetSpaceBySpaceKeyLabelV1(r.spaceKey(), r.prefix(), r.start(), r.limit());
    }

    /**
    * PostSpaceBySpaceKeyLabelV1
    * Add labels to a space
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to add labels to.</li>
    *   <li>payload: The labels to add to the content.</li>
    * </ul>
    */
    public LabelArray PostSpaceBySpaceKeyLabelV1(Consumer<PostSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        PostSpaceBySpaceKeyLabelV1OperationSpec r = new PostSpaceBySpaceKeyLabelV1OperationSpec(spec);
        return api.PostSpaceBySpaceKeyLabelV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSpaceBySpaceKeyLabelV1
    * Remove label from a space
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to remove a labels from.</li>
    *   <li>name: The name of the label to remove</li>
    *   <li>prefix: The prefix of the label to remove. If not provided defaults to global.</li>
    * </ul>
    */
    public void DeleteSpaceBySpaceKeyLabelV1(Consumer<DeleteSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        DeleteSpaceBySpaceKeyLabelV1OperationSpec r = new DeleteSpaceBySpaceKeyLabelV1OperationSpec(spec);
        api.DeleteSpaceBySpaceKeyLabelV1(r.spaceKey(), r.name(), r.prefix());
    }

}
