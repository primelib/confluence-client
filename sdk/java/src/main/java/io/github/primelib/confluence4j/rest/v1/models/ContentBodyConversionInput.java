// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * ContentBodyConversionInput
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("ContentBodyConversionInput")
@JsonPropertyOrder({
    "to",
    "allowCache",
    "spaceKeyContext",
    "contentIdContext",
    "embeddedContentRender",
    "expand",
    "body"
})
@Generated(value = "io.github.primelib.primecodegen")
public class ContentBodyConversionInput {

    /**
     * The name of the target format for the content body conversion.
     */
    @JsonProperty("to")
    protected String to;

    /**
     * If `false`, the cache will erase its current value and begin a new conversion. If `true`, the cache will not erase its current value, and will set the status of the async conversion to “RERUNNING”. Once the data is updated, the status will change to “COMPLETED”. Large macros that take a long time to convert and that need not be immediately up to date (e.g. a macro in which the new conversion result is the same as a previous conversion result that was completed within the last 5 minutes) should set this field to `true`. Cache values are stored per user per content body and expansions.
     */
    @JsonProperty("allowCache")
    protected Boolean allowCache;

    /**
     * The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted into a link to the "Example page" page in the "TEST" space.
     */
    @JsonProperty("spaceKeyContext")
    protected String spaceKeyContext;

    /**
     * The content ID used to find the space for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `contentIdContext=123` parameter is provided, then the link will be converted into a link to the "Example page" page in the same space that has the content with ID=123. Note that `spaceKeyContext` will be ignored if this parameter is provided.
     */
    @JsonProperty("contentIdContext")
    protected String contentIdContext;

    /**
     * Mode used for rendering embedded content, such as attachments. - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.
     */
    @JsonProperty("embeddedContentRender")
    protected String embeddedContentRender;

    /**
     * A multi-value, comma-separated parameter indicating which properties of the content to expand and populate. Expands are dependent
on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
converting to `view` format). 

If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
any nested dynamic content (i.e. macros).

- `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
- `mediaToken` returns JWT token for retrieving attachment data from Media API
- `macroRenderedOutput` additionally converts body to view format
- `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
- `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
- `webresource.superbatch.uris.all` returns all common dependencies as static URLs
- `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
- `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
- `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
- `webresource.uris.js` returns JS dependencies specific to conversion
- `webresource.uris.css` returns CSS dependencies specific to conversion
- `webresource.uris.all` returns all dependencies specific to conversion     
- `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
- `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
- `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
     */
    @JsonProperty("expand")
    protected List<String> expand;

    /**
     * This object is used when creating or updating content.
     */
    @JsonProperty("body")
    protected Map<String, Object> body;

    /**
     * Constructs a validated instance of {@link ContentBodyConversionInput}.
     *
     * @param spec the specification to process
     */
    public ContentBodyConversionInput(Consumer<ContentBodyConversionInput> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link ContentBodyConversionInput}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #ContentBodyConversionInput(Consumer)} instead.
     * @param to The name of the target format for the content body conversion.
     * @param allowCache If `false`, the cache will erase its current value and begin a new conversion. If `true`, the cache will not erase its current value, and will set the status of the async conversion to “RERUNNING”. Once the data is updated, the status will change to “COMPLETED”. Large macros that take a long time to convert and that need not be immediately up to date (e.g. a macro in which the new conversion result is the same as a previous conversion result that was completed within the last 5 minutes) should set this field to `true`. Cache values are stored per user per content body and expansions.
     * @param spaceKeyContext The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted into a link to the "Example page" page in the "TEST" space.
     * @param contentIdContext The content ID used to find the space for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `contentIdContext=123` parameter is provided, then the link will be converted into a link to the "Example page" page in the same space that has the content with ID=123. Note that `spaceKeyContext` will be ignored if this parameter is provided.
     * @param embeddedContentRender Mode used for rendering embedded content, such as attachments. - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.
     * @param expand A multi-value, comma-separated parameter indicating which properties of the content to expand and populate. Expands are dependent
on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
converting to `view` format). 

If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
any nested dynamic content (i.e. macros).

- `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
- `mediaToken` returns JWT token for retrieving attachment data from Media API
- `macroRenderedOutput` additionally converts body to view format
- `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
- `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
- `webresource.superbatch.uris.all` returns all common dependencies as static URLs
- `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
- `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
- `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
- `webresource.uris.js` returns JS dependencies specific to conversion
- `webresource.uris.css` returns CSS dependencies specific to conversion
- `webresource.uris.all` returns all dependencies specific to conversion     
- `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
- `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
- `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
     * @param body This object is used when creating or updating content.
     */
    @ApiStatus.Internal
    public ContentBodyConversionInput(String to, Boolean allowCache, String spaceKeyContext, String contentIdContext, String embeddedContentRender, List<String> expand, Map<String, Object> body) {
        this.to = to;
        this.allowCache = allowCache;
        this.spaceKeyContext = spaceKeyContext;
        this.contentIdContext = contentIdContext;
        this.embeddedContentRender = embeddedContentRender;
        this.expand = expand;
        this.body = body;
    }
}
