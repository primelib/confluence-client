// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.AvailableContentStates;
import io.github.primelib.confluence4j.rest.v1.models.ContentArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentState;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateResponse;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateRestInput;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateSettings;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ConfluenceRestClientContentStatesApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientContentStatesApi {

    /**
    * GetContentByIDStateV1
    * Get content state
    * Gets the current content state of the draft or current version of content. To specify the draft version, set
    * the parameter status to draft, otherwise archived or current will get the relevant published state.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The id of the content whose content state is of interest.
    * @param status Set status to one of [current,draft,archived]. Default value is current.
    */
    @RequestLine("GET /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Accept: application/json"
    })
    ContentStateResponse GetContentByIDStateV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("status") String status
    );

    /**
    * PutContentByIDStateV1
    * Set the content state of a content and publishes a new version of the content.
    * Sets the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new state.
    * 
    * You may pass in either an id of a state, or the name and color of a desired new state.
    * If all 3 are passed in, id will be used.
    * If the name and color passed in already exist under the current user's existing custom states, the existing state will be reused.
    * If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content's space)
    * then this set will fail.
    * 
    * You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The Id of the content whose content state is to be set.
    * @param status Status of content onto which state will be placed. If draft, then draft state will change.
    * If current, state will be placed onto a new version of the content with same body as previous version.
    * @param payload Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space.
    */
    @RequestLine("PUT /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentStateResponse PutContentByIDStateV1(
            @NotNull @Param("id") String id,
            @NotNull @Param("status") String status,
            @NotNull ContentStateRestInput payload
    );

    /**
    * DeleteContentByIDStateV1
    * Removes the content state of a content and publishes a new version.
    * Removes the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The Id of the content whose content state is to be set.
    * @param status status of content state from which to delete state. Can be draft or archived
    */
    @RequestLine("DELETE /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Accept: application/json"
    })
    ContentStateResponse DeleteContentByIDStateV1(
            @NotNull @Param("id") String id,
            @Nullable @Param("status") String status
    );

    /**
    * GetContentByIDStateAvailableV1
    * Gets available content states for content.
    * Gets content states that are available for the content to be set as.
    * Will return all enabled Space Content States.
    * Will only return most the 3 most recently published custom content states to match UI editor list.
    * To get all custom content states, use the /content-states endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id id of content to get available states for
    */
    @RequestLine("GET /rest/api/content/{id}/state/available")
    @Headers({
        "Accept: application/json"
    })
    AvailableContentStates GetContentByIDStateAvailableV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetContentStatesV1
    * Get Custom Content States
    * Get custom content states that authenticated user has created.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**
    * Must have user authentication.
    *
    */
    @RequestLine("GET /rest/api/content-states")
    @Headers({
        "Accept: application/json"
    })
    List<ContentState> GetContentStatesV1();

    /**
    * GetSpaceBySpaceKeyStateV1
    * Get space suggested content states
    * Get content states that are suggested in the space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state")
    @Headers({
        "Accept: application/json"
    })
    List<ContentState> GetSpaceBySpaceKeyStateV1(
            @NotNull @Param("spaceKey") String spaceKey
    );

    /**
    * GetSpaceBySpaceKeyStateSettingsV1
    * Get content state settings for space
    * Get object describing whether content states are allowed at all, if custom content states or space content states
    * are restricted, and a list of space content states allowed for the space if they are not restricted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state/settings")
    @Headers({
        "Accept: application/json"
    })
    ContentStateSettings GetSpaceBySpaceKeyStateSettingsV1(
            @NotNull @Param("spaceKey") String spaceKey
    );

    /**
    * GetSpaceBySpaceKeyStateContentV1
    * Get content in space with given content state
    * Returns all content that has the provided content state in a space.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    * @param stateId The id of the content state to filter content by
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * Options include: space, version, history, children, etc.
    * 
    * Ex: space,version
    * @param limit Maximum number of results to return
    * @param start Number of result to start returning. (0 indexed)
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state/content?stateId={stateId}&expand={expand}&limit={limit}&start={start}")
    @Headers({
        "Accept: application/json"
    })
    ContentArray GetSpaceBySpaceKeyStateContentV1(
            @NotNull @Param("spaceKey") String spaceKey,
            @NotNull @Param("stateId") Integer stateId,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("start") Integer start
    );

}
