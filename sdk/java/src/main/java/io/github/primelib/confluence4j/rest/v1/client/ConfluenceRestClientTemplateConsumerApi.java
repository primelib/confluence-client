// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.BlueprintTemplateArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplate;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplateArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteTemplateByContentTemplateIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplateBlueprintV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplateByContentTemplateIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplatePageV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostTemplateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutTemplateV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientTemplateConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientTemplateConsumerApi {
    private final ConfluenceRestClientTemplateApi api;

    public ConfluenceRestClientTemplateConsumerApi(ConfluenceRestClientTemplateApi api) {
        this.api = api;
    }


    /**
    * PutTemplateV1
    * Update content template
    * Updates a content template. Note, blueprint templates cannot be updated
    * via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to update a space template or 'Confluence Administrator'
    * global permission to update a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The updated content template.</li>
    * </ul>
    */
    public ContentTemplate PutTemplateV1(Consumer<PutTemplateV1OperationSpec> spec) {
        PutTemplateV1OperationSpec r = new PutTemplateV1OperationSpec(spec);
        return api.PutTemplateV1(r.payload());
    }

    /**
    * PostTemplateV1
    * Create content template
    * Creates a new content template. Note, blueprint templates cannot be created via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to create a space template or 'Confluence Administrator'
    * global permission to create a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The content template to be created. The content body must be in 'storage' format.</li>
    * </ul>
    */
    public ContentTemplate PostTemplateV1(Consumer<PostTemplateV1OperationSpec> spec) {
        PostTemplateV1OperationSpec r = new PostTemplateV1OperationSpec(spec);
        return api.PostTemplateV1(r.payload());
    }

    /**
    * GetTemplateBlueprintV1
    * Get blueprint templates
    * Returns all templates provided by blueprints. Use this method to retrieve
    * all global blueprint templates or all blueprint templates in a space.
    * 
    * Note, all global blueprints are inherited by each space. Space blueprints
    * can be customised without affecting the global blueprints.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view blueprints for the space and permission
    * to access the Confluence site ('Can use' global permission) to view global blueprints.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for templates. If the `spaceKey` is not specified, global blueprint templates will be returned.</li>
    *   <li>start: The starting index of the returned templates.</li>
    *   <li>limit: The maximum number of templates to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public BlueprintTemplateArray GetTemplateBlueprintV1(Consumer<GetTemplateBlueprintV1OperationSpec> spec) {
        GetTemplateBlueprintV1OperationSpec r = new GetTemplateBlueprintV1OperationSpec(spec);
        return api.GetTemplateBlueprintV1(r.spaceKey(), r.start(), r.limit(), r.expand());
    }

    /**
    * GetTemplatePageV1
    * Get content templates
    * Returns all content templates. Use this method to retrieve all global
    * content templates or all content templates in a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for templates. If the `spaceKey` is not specified, global templates will be returned.</li>
    *   <li>start: The starting index of the returned templates.</li>
    *   <li>limit: The maximum number of templates to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public ContentTemplateArray GetTemplatePageV1(Consumer<GetTemplatePageV1OperationSpec> spec) {
        GetTemplatePageV1OperationSpec r = new GetTemplatePageV1OperationSpec(spec);
        return api.GetTemplatePageV1(r.spaceKey(), r.start(), r.limit(), r.expand());
    }

    /**
    * GetTemplateByContentTemplateIDV1
    * Get content template
    * Returns a content template. This includes information about template,
    * like the name, the space or blueprint that the template is in, the body
    * of the template, and more.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentTemplateId: The ID of the content template to be returned.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public ContentTemplate GetTemplateByContentTemplateIDV1(Consumer<GetTemplateByContentTemplateIDV1OperationSpec> spec) {
        GetTemplateByContentTemplateIDV1OperationSpec r = new GetTemplateByContentTemplateIDV1OperationSpec(spec);
        return api.GetTemplateByContentTemplateIDV1(r.contentTemplateId(), r.expand());
    }

    /**
    * DeleteTemplateByContentTemplateIDV1
    * Remove template
    * Deletes a template. This results in different actions depending on the
    * type of template:
    * 
    * - If the template is a content template, it is deleted.
    * - If the template is a modified space-level blueprint template, it reverts
    * to the template inherited from the global-level blueprint template.
    * - If the template is a modified global-level blueprint template, it reverts
    * to the default global-level blueprint template.
    * 
    *  Note, unmodified blueprint templates cannot be deleted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    *         'Admin' permission for the space to delete a space template or 'Confluence Administrator'
    *         global permission to delete a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentTemplateId: The ID of the template to be deleted.</li>
    * </ul>
    */
    public void DeleteTemplateByContentTemplateIDV1(Consumer<DeleteTemplateByContentTemplateIDV1OperationSpec> spec) {
        DeleteTemplateByContentTemplateIDV1OperationSpec r = new DeleteTemplateByContentTemplateIDV1OperationSpec(spec);
        api.DeleteTemplateByContentTemplateIDV1(r.contentTemplateId());
    }

}
