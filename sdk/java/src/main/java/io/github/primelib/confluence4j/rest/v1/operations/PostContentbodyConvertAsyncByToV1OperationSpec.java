// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * PostContentbodyConvertAsyncByToV1
 * <p>
 * Converts a content body from one format to another format asynchronously.
 * Returns the asyncId for the asynchronous task.
 * 
 * Supported conversions:
 * 
 * - atlas_doc_format: editor, export_view, storage, styled_view, view
 * - storage: atlas_doc_format, editor, export_view, styled_view, view
 * - editor: storage
 * 
 * No other conversions are supported at the moment.
 * Once a conversion is completed, it will be available for 5 minutes at the result endpoint.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PostContentbodyConvertAsyncByToV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The name of the target format for the content body.
     *
     */
    @NonNull
    private String to;

    /**
     * A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the
     * `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
     * converting to `view` format). 
     * 
     * If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
     * necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
     * any nested dynamic content (i.e. macros).
     * 
     * - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
     * - `mediaToken` returns JWT token for retrieving attachment data from Media API
     * - `macroRenderedOutput` additionally converts body to view format
     * - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
     * - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
     * - `webresource.superbatch.uris.all` returns all common dependencies as static URLs
     * - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
     * - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
     * - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
     * - `webresource.uris.js` returns JS dependencies specific to conversion
     * - `webresource.uris.css` returns CSS dependencies specific to conversion
     * - `webresource.uris.all` returns all dependencies specific to conversion     
     * - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
     * - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
     * - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
     *
     */
    @Nullable
    private List<String> expand;

    /**
     * The space key used for resolving embedded content (page includes,
     * files, and links) in the content body. For example, if the source content
     * contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
     * and the `spaceKeyContext=TEST` parameter is provided, then the link
     * will be converted to a link to the "Example page" page in the "TEST" space.
     *
     */
    @Nullable
    private String spaceKeyContext;

    /**
     * The content ID used to find the space for resolving embedded content
     * (page includes, files, and links) in the content body. For example,
     * if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
     * and the `contentIdContext=123` parameter is provided, then the link
     * will be converted to a link to the "Example page" page in the same space
     * that has the content with ID=123. Note, `spaceKeyContext` will be ignored
     * if this parameter is provided.
     *
     */
    @Nullable
    private String contentIdContext;

    /**
     * If this field is false, the cache will erase its current value and begin a new conversion.
     * If this field is true, the cache will not erase its current value, and will set the status of the
     * async conversion to RERUNNING. Once the data is updated, the status will change to COMPLETED. 
     * Large macros that take long to convert, and whose data need not immediately up to date (same as previous conversion's result within last 5 minutes)
     * should set this fields to true. Cache values are stored per user per content body and expansions.
     *
     */
    @Nullable
    private Boolean allowCache;

    /**
     * Mode used for rendering embedded content, like attachments.
     * 
     * - `current` renders the embedded content using the latest version.
     * - `version-at-save` renders the embedded content using the version at
     * the time of save.
     *
     */
    @Nullable
    private String embeddedContentRender;

    /**
     * The content body to convert.
     *
     */
    @NonNull
    private Map<String, Object> payload;

    /**
     * Constructs a validated instance of {@link PostContentbodyConvertAsyncByToV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PostContentbodyConvertAsyncByToV1OperationSpec(Consumer<PostContentbodyConvertAsyncByToV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(to, "to is a required parameter!");
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
