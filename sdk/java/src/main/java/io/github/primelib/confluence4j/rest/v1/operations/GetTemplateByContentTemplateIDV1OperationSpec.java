// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * GetTemplateByContentTemplateIDV1
 * <p>
 * Returns a content template. This includes information about template,
 * like the name, the space or blueprint that the template is in, the body
 * of the template, and more.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * 'View' permission for the space to view space templates and permission to
 * access the Confluence site ('Can use' global permission) to view global templates.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class GetTemplateByContentTemplateIDV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the content template to be returned.
     *
     */
    @NonNull
    private String contentTemplateId;

    /**
     * A multi-value parameter indicating which properties of the template
     * to expand.
     * 
     * - `body` or `body.storage` returns the content of the template in storage format.
     *
     */
    @Nullable
    private List<String> expand;

    /**
     * Constructs a validated instance of {@link GetTemplateByContentTemplateIDV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public GetTemplateByContentTemplateIDV1OperationSpec(Consumer<GetTemplateByContentTemplateIDV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(contentTemplateId, "contentTemplateId is a required parameter!");
    }
}
