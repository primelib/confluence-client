// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * GetSearchUserV1
 * <p>
 * Searches for users using user-specific queries from the
 * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
 * 
 * Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.
 * 
 * Note that some user fields may be set to null depending on the user's privacy settings.
 * These are: email, profilePicture, displayName, and timeZone.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class GetSearchUserV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The CQL query to be used for the search. See
     * [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
     * for instructions on how to build a CQL query.
     * 
     * Example queries:
     *           cql=type=user will return up to 10k users
     *           cql=user="1234" will return user with accountId "1234"
     *           You can also use IN, NOT IN, != operators
     *           cql=user IN ("12", "34") will return users with accountids "12" and "34"
     *           cql=user.fullname~jo will return users with nickname/full name starting with "jo"
     *           cql=user.accountid="123" will return user with accountId "123"
     *
     */
    @NonNull
    private String cql;

    /**
     * The starting index of the returned users.
     *
     */
    @Nullable
    private Integer start;

    /**
     * The maximum number of user objects to return per page.
     * Note, this may be restricted by fixed system limits.
     *
     */
    @Nullable
    private Integer limit;

    /**
     * A multi-value parameter indicating which properties of the user to expand.
     * 
     * - `operations` returns the operations for the user, which are used
     * when setting permissions.
     * - `personalSpace` returns the personal space of the user.
     *
     */
    @Nullable
    private List<String> expand;

    /**
     * Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator`
     * for external/guest users, and `all` to include all permission types.
     *
     */
    @Nullable
    private String sitePermissionTypeFilter;

    /**
     * Constructs a validated instance of {@link GetSearchUserV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public GetSearchUserV1OperationSpec(Consumer<GetSearchUserV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(cql, "cql is a required parameter!");
    }
}
