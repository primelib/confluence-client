// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.AsyncContentBody;
import io.github.primelib.confluence4j.rest.v1.models.AsyncId;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentbodyConvertAsyncBulkTasksV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentbodyConvertAsyncByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentbodyConvertAsyncBulkTasksV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentbodyConvertAsyncByToV1OperationSpec;
import java.util.List;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientContentBodyConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientContentBodyConsumerApi {
    private final ConfluenceRestClientContentBodyApi api;

    public ConfluenceRestClientContentBodyConsumerApi(ConfluenceRestClientContentBodyApi api) {
        this.api = api;
    }


    /**
    * PostContentbodyConvertAsyncByToV1
    * Asynchronously convert content body
    * Converts a content body from one format to another format asynchronously.
    * Returns the asyncId for the asynchronous task.
    * 
    * Supported conversions:
    * 
    * - atlas_doc_format: editor, export_view, storage, styled_view, view
    * - storage: atlas_doc_format, editor, export_view, styled_view, view
    * - editor: storage
    * 
    * No other conversions are supported at the moment.
    * Once a conversion is completed, it will be available for 5 minutes at the result endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>to: The name of the target format for the content body.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when converting to `view` format).   If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is  necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for any nested dynamic content (i.e. macros).  - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro) - `mediaToken` returns JWT token for retrieving attachment data from Media API - `macroRenderedOutput` additionally converts body to view format - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs - `webresource.superbatch.uris.all` returns all common dependencies as static URLs - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags - `webresource.uris.js` returns JS dependencies specific to conversion - `webresource.uris.css` returns CSS dependencies specific to conversion - `webresource.uris.all` returns all dependencies specific to conversion      - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags</li>
    *   <li>spaceKeyContext: The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted to a link to the "Example page" page in the "TEST" space.</li>
    *   <li>contentIdContext: The content ID used to find the space for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `contentIdContext=123` parameter is provided, then the link will be converted to a link to the "Example page" page in the same space that has the content with ID=123. Note, `spaceKeyContext` will be ignored if this parameter is provided.</li>
    *   <li>allowCache: If this field is false, the cache will erase its current value and begin a new conversion. If this field is true, the cache will not erase its current value, and will set the status of the async conversion to RERUNNING. Once the data is updated, the status will change to COMPLETED.  Large macros that take long to convert, and whose data need not immediately up to date (same as previous conversion's result within last 5 minutes) should set this fields to true. Cache values are stored per user per content body and expansions.</li>
    *   <li>embeddedContentRender: Mode used for rendering embedded content, like attachments.  - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.</li>
    *   <li>payload: The content body to convert.</li>
    * </ul>
    */
    public AsyncId PostContentbodyConvertAsyncByToV1(Consumer<PostContentbodyConvertAsyncByToV1OperationSpec> spec) {
        PostContentbodyConvertAsyncByToV1OperationSpec r = new PostContentbodyConvertAsyncByToV1OperationSpec(spec);
        return api.PostContentbodyConvertAsyncByToV1(r.to(), r.expand(), r.spaceKeyContext(), r.contentIdContext(), r.allowCache(), r.embeddedContentRender(), r.payload());
    }

    /**
    * GetContentbodyConvertAsyncByIDV1
    * Get asynchronously converted content body from the id or the current status of the task.
    * Returns the asynchronous content body for the corresponding id if the task is complete 
    * or returns the status of the task.
    * 
    * After the task is completed, the result can be obtained for 5 minutes, or until an identical conversion request is made again,
    * with allowCache query param set to false.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The asyncId of the macro task to get the converted body.</li>
    * </ul>
    */
    public AsyncContentBody GetContentbodyConvertAsyncByIDV1(Consumer<GetContentbodyConvertAsyncByIDV1OperationSpec> spec) {
        GetContentbodyConvertAsyncByIDV1OperationSpec r = new GetContentbodyConvertAsyncByIDV1OperationSpec(spec);
        return api.GetContentbodyConvertAsyncByIDV1(r.id());
    }

    /**
    * GetContentbodyConvertAsyncBulkTasksV1
    * Get asynchronous content body conversion task result in bulk
    * Returns the content body for the corresponding `asyncId` of a completed conversion task. If
    * the task is not completed, the task status is returned instead.
    * 
    * Once a conversion task is completed, the result can be obtained for up to 5 minutes, or
    * until an identical conversion request is made again with the `allowCache` parameter set to
    * false.
    * 
    * Note that there is a maximum limit of 50 task results per request to this endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>ids: The asyncIds of the conversion tasks.</li>
    * </ul>
    */
    public List<AsyncContentBody> GetContentbodyConvertAsyncBulkTasksV1(Consumer<GetContentbodyConvertAsyncBulkTasksV1OperationSpec> spec) {
        GetContentbodyConvertAsyncBulkTasksV1OperationSpec r = new GetContentbodyConvertAsyncBulkTasksV1OperationSpec(spec);
        return api.GetContentbodyConvertAsyncBulkTasksV1(r.ids());
    }

    /**
    * PostContentbodyConvertAsyncBulkTasksV1
    * Create asynchronous content body conversion tasks in bulk
    * Asynchronously converts content bodies from one format to another format in bulk. Use the Content body
    * REST API to get the status of conversion tasks. Note that there is a maximum limit of 10 conversions per
    * request to this endpoint.
    * 
    * Supported conversions:
    * 
    * - storage: editor, export_view, styled_view, view
    * - editor: storage
    * 
    * Once a conversion task is completed, it is available for polling for up to 5 minutes.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if the `spaceKeyContext` or
    * `contentIdContext` are present.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: An array of parameters to create content body conversion tasks.</li>
    * </ul>
    */
    public List<AsyncId> PostContentbodyConvertAsyncBulkTasksV1(Consumer<PostContentbodyConvertAsyncBulkTasksV1OperationSpec> spec) {
        PostContentbodyConvertAsyncBulkTasksV1OperationSpec r = new PostContentbodyConvertAsyncBulkTasksV1OperationSpec(spec);
        return api.PostContentbodyConvertAsyncBulkTasksV1(r.payload());
    }

}
