// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;

/**
 * Content
 * <p>
 * Base object for all content types.
 * Representation of a blogpost (content)
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED, force = true)
@JsonTypeName("Content")
@JsonPropertyOrder({
    "id",
    "type",
    "status",
    "title",
    "space",
    "history",
    "version",
    "ancestors",
    "operations",
    "children",
    "childTypes",
    "descendants",
    "container",
    "body",
    "restrictions",
    "metadata",
    "macroRenderedOutput",
    "extensions",
    "Expandable",
    "Links",
    "ari",
    "base64EncodedAri"
})
@Generated(value = "io.github.primelib.primecodegen")
public class Content {

    @JsonProperty("id")
    protected String id;

    /**
     * Can be "page", "blogpost", "attachment" or "content"
     */
    @JsonProperty("type")
    protected String type;

    @JsonProperty("status")
    protected String status;

    @JsonProperty("title")
    protected String title;

    @JsonProperty("space")
    protected Space space;

    @JsonProperty("history")
    protected ContentHistory history;

    @JsonProperty("version")
    protected Version version;

    @JsonProperty("ancestors")
    protected List<Content> ancestors;

    @JsonProperty("operations")
    protected List<OperationCheckResult> operations;

    @JsonProperty("children")
    protected Map<String, Object> children;

    /**
     * Shows whether a piece of content has attachments, comments, or child pages/whiteboards.
Note, this doesn't actually contain the child objects.
     */
    @JsonProperty("childTypes")
    protected Map<String, Object> childTypes;

    @JsonProperty("descendants")
    protected Map<String, Object> descendants;

    /**
     * Container for content. This can be either a space (containing a page or blogpost)
or a page/blog post (containing an attachment or comment)
     */
    @JsonProperty("container")
    protected Map<String, Object> container;

    @JsonProperty("body")
    protected Body body;

    @JsonProperty("restrictions")
    protected Restrictions restrictions;

    /**
     * Metadata object for page, blogpost, comment content
     */
    @JsonProperty("metadata")
    protected ContentMetadata metadata;

    @JsonProperty("macroRenderedOutput")
    protected Map<String, Object> macroRenderedOutput;

    @JsonProperty("extensions")
    protected Object extensions;

    @JsonProperty("_expandable")
    protected Expandable07C2Ed Expandable;

    @JsonProperty("_links")
    protected Map<String, Object> Links;

    @JsonProperty("ari")
    protected String ari;

    @JsonProperty("base64EncodedAri")
    protected String base64EncodedAri;

    /**
     * Constructs a validated instance of {@link Content}.
     *
     * @param spec the specification to process
     */
    public Content(Consumer<Content> spec) {
        super();
        spec.accept(this);
    }

    /**
     * Constructs a validated instance of {@link Content}.
     * <p>
     * NOTE: This constructor is not considered stable and may change if the model is updated. Consider using {@link #Content(Consumer)} instead.
     * @param id id
     * @param type Can be "page", "blogpost", "attachment" or "content"
     * @param status status
     * @param title title
     * @param space space
     * @param history history
     * @param version version
     * @param ancestors ancestors
     * @param operations operations
     * @param children children
     * @param childTypes Shows whether a piece of content has attachments, comments, or child pages/whiteboards.
Note, this doesn't actually contain the child objects.
     * @param descendants descendants
     * @param container Container for content. This can be either a space (containing a page or blogpost)
or a page/blog post (containing an attachment or comment)
     * @param body body
     * @param restrictions restrictions
     * @param metadata Metadata object for page, blogpost, comment content
     * @param macroRenderedOutput macroRenderedOutput
     * @param extensions extensions
     * @param Expandable Expandable
     * @param Links Links
     * @param ari ari
     * @param base64EncodedAri base64EncodedAri
     */
    @ApiStatus.Internal
    public Content(String id, String type, String status, String title, Space space, ContentHistory history, Version version, List<Content> ancestors, List<OperationCheckResult> operations, Map<String, Object> children, Map<String, Object> childTypes, Map<String, Object> descendants, Map<String, Object> container, Body body, Restrictions restrictions, ContentMetadata metadata, Map<String, Object> macroRenderedOutput, Object extensions, Expandable07C2Ed Expandable, Map<String, Object> Links, String ari, String base64EncodedAri) {
        this.id = id;
        this.type = type;
        this.status = status;
        this.title = title;
        this.space = space;
        this.history = history;
        this.version = version;
        this.ancestors = ancestors;
        this.operations = operations;
        this.children = children;
        this.childTypes = childTypes;
        this.descendants = descendants;
        this.container = container;
        this.body = body;
        this.restrictions = restrictions;
        this.metadata = metadata;
        this.macroRenderedOutput = macroRenderedOutput;
        this.extensions = extensions;
        this.Expandable = Expandable;
        this.Links = Links;
        this.ari = ari;
        this.base64EncodedAri = base64EncodedAri;
    }
}
