// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * PutContentByPageIDMoveByPositionByTargetIDV1
 * <p>
 * Move a page to a new location relative to a target page:
 * 
 * * `before` - move the page under the same parent as the target, before the target in the list of children
 * * `after` - move the page under the same parent as the target, after the target in the list of children
 * * `append` - move the page to be a child of the target
 * 
 * Caution: This API can move pages to the top level of a space. Top-level pages are difficult to find in the UI
 * because they do not show up in the page tree display. To avoid this, never use `before` or `after` positions
 * when the `targetId` is a top-level page.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the page to be moved
     *
     */
    @NonNull
    private String pageId;

    /**
     * The position to move the page to relative to the target page:
     * * `before` - move the page under the same parent as the target, before the target in the list of children
     * * `after` - move the page under the same parent as the target, after the target in the list of children
     * * `append` - move the page to be a child of the target
     *
     */
    @NonNull
    private String position;

    /**
     * The ID of the target page for this operation
     *
     */
    @NonNull
    private String targetId;

    /**
     * Constructs a validated instance of {@link PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec(Consumer<PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(pageId, "pageId is a required parameter!");
        Objects.requireNonNull(position, "position is a required parameter!");
        Objects.requireNonNull(targetId, "targetId is a required parameter!");
    }
}
