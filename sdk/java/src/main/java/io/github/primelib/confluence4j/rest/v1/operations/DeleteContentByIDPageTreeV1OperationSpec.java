// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * DeleteContentByIDPageTreeV1
 * <p>
 * Moves a pagetree rooted at a page to the space's trash:
 * 
 * - If the content's type is `page` and its status is `current`, it will be trashed including
 * all its descendants.
 * - For every other combination of content type and status, this API is not supported.
 * 
 * This API accepts the pageTree delete request and returns a task ID.
 * The delete process happens asynchronously.
 * 
 *  Response example:
 *  &lt;pre&gt;&lt;code&gt;
 *  {
 *       "id" : "1180606",
 *       "links" : {
 *            "status" : "/rest/api/longtask/1180606"
 *       }
 *  }
 *  &lt;/code&gt;&lt;/pre&gt;
 *  Use the `/longtask/&lt;taskId&gt;` REST API to get the copy task status.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * 'Delete' permission for the space that the content is in.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class DeleteContentByIDPageTreeV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the content which forms root of the page tree, to be deleted.
     *
     */
    @NonNull
    private String id;

    /**
     * Constructs a validated instance of {@link DeleteContentByIDPageTreeV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public DeleteContentByIDPageTreeV1OperationSpec(Consumer<DeleteContentByIDPageTreeV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(id, "id is a required parameter!");
    }
}
