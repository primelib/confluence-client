// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.AccountIDEmailRecord;
import io.github.primelib.confluence4j.rest.v1.models.AccountId;
import io.github.primelib.confluence4j.rest.v1.models.ArchivePagesB;
import io.github.primelib.confluence4j.rest.v1.models.AsyncContentBody;
import io.github.primelib.confluence4j.rest.v1.models.AsyncId;
import io.github.primelib.confluence4j.rest.v1.models.AuditRecord;
import io.github.primelib.confluence4j.rest.v1.models.AuditRecordArray;
import io.github.primelib.confluence4j.rest.v1.models.AuditRecordCreate;
import io.github.primelib.confluence4j.rest.v1.models.AvailableContentStates;
import io.github.primelib.confluence4j.rest.v1.models.BlueprintTemplateArray;
import io.github.primelib.confluence4j.rest.v1.models.BulkUserLookupArray;
import io.github.primelib.confluence4j.rest.v1.models.ConnectModules;
import io.github.primelib.confluence4j.rest.v1.models.Content;
import io.github.primelib.confluence4j.rest.v1.models.ContentArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentBody;
import io.github.primelib.confluence4j.rest.v1.models.ContentBodyConversionInput;
import io.github.primelib.confluence4j.rest.v1.models.ContentPermissionRequest;
import io.github.primelib.confluence4j.rest.v1.models.ContentRestriction;
import io.github.primelib.confluence4j.rest.v1.models.ContentRestrictionArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentState;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateResponse;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateRestInput;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateSettings;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplate;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplateArray;
import io.github.primelib.confluence4j.rest.v1.models.CopyPageHierarchyRequest;
import io.github.primelib.confluence4j.rest.v1.models.CopyPageRequest;
import io.github.primelib.confluence4j.rest.v1.models.GetRestrictionsByOperation;
import io.github.primelib.confluence4j.rest.v1.models.GetViewersR200;
import io.github.primelib.confluence4j.rest.v1.models.GetViewsR200;
import io.github.primelib.confluence4j.rest.v1.models.Group;
import io.github.primelib.confluence4j.rest.v1.models.GroupArrayWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.GroupName;
import io.github.primelib.confluence4j.rest.v1.models.LabelArray;
import io.github.primelib.confluence4j.rest.v1.models.LabelDetails;
import io.github.primelib.confluence4j.rest.v1.models.LongTaskStatusArray;
import io.github.primelib.confluence4j.rest.v1.models.LongTaskStatusWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.LookAndFeel;
import io.github.primelib.confluence4j.rest.v1.models.LookAndFeelSelection;
import io.github.primelib.confluence4j.rest.v1.models.LookAndFeelSettings;
import io.github.primelib.confluence4j.rest.v1.models.MacroInstance;
import io.github.primelib.confluence4j.rest.v1.models.MovePageR200;
import io.github.primelib.confluence4j.rest.v1.models.PermissionCheckResponse;
import io.github.primelib.confluence4j.rest.v1.models.Relation;
import io.github.primelib.confluence4j.rest.v1.models.RelationArray;
import io.github.primelib.confluence4j.rest.v1.models.RetentionPeriod;
import io.github.primelib.confluence4j.rest.v1.models.SearchPageResponseSearchResult;
import io.github.primelib.confluence4j.rest.v1.models.Space;
import io.github.primelib.confluence4j.rest.v1.models.SpacePermissionCustomContent;
import io.github.primelib.confluence4j.rest.v1.models.SpacePermissionV2;
import io.github.primelib.confluence4j.rest.v1.models.SpaceSettings;
import io.github.primelib.confluence4j.rest.v1.models.SpaceSettingsUpdate;
import io.github.primelib.confluence4j.rest.v1.models.SpaceWatchArray;
import io.github.primelib.confluence4j.rest.v1.models.SystemInfoEntity;
import io.github.primelib.confluence4j.rest.v1.models.Theme;
import io.github.primelib.confluence4j.rest.v1.models.ThemeArray;
import io.github.primelib.confluence4j.rest.v1.models.ThemeUpdate;
import io.github.primelib.confluence4j.rest.v1.models.UserAnonymous;
import io.github.primelib.confluence4j.rest.v1.models.UserArray;
import io.github.primelib.confluence4j.rest.v1.models.UserProperty;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyCreate;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyKeyArray;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyUpdate;
import io.github.primelib.confluence4j.rest.v1.models.UserWatch;
import io.github.primelib.confluence4j.rest.v1.models.Version;
import io.github.primelib.confluence4j.rest.v1.models.VersionRestore;
import io.github.primelib.confluence4j.rest.v1.models.WatchArray;
import java.util.List;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientApi {

    /**
    * GetAtlassianConnect1AppModuleDynamicV1
    * Get modules
    * Returns all modules registered dynamically by the calling app.
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    */
    @RequestLine("GET /atlassian-connect/1/app/module/dynamic")
    @Headers({
        "Accept: */*"
    })
    ConnectModules getAtlassianConnect1AppModuleDynamicV1();

    /**
    * PostAtlassianConnect1AppModuleDynamicV1
    * Register modules
    * Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    * @param payload 
    */
    @RequestLine("POST /atlassian-connect/1/app/module/dynamic")
    @Headers({
        "Content-Type: */*"
    })
    void postAtlassianConnect1AppModuleDynamicV1(
            @NonNull ConnectModules payload
    );

    /**
    * DeleteAtlassianConnect1AppModuleDynamicV1
    * Remove modules
    * Remove all or a list of modules registered by the calling app.
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    * @param moduleKey The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
    * For example, `moduleKey=dynamic-attachment-entity-property&amp;moduleKey=dynamic-select-field`.
    * Nonexistent keys are ignored.
    */
    @RequestLine("DELETE /atlassian-connect/1/app/module/dynamic?moduleKey={moduleKey}")
    void deleteAtlassianConnect1AppModuleDynamicV1(
            @NonNull @Param("moduleKey") List<String> moduleKey
    );

    /**
    * GetAuditV1
    * Get audit records
    * Returns all records in the audit log, optionally for a certain date range.
    * This contains information about events like space exports, group membership
    * changes, app installations, etc. For more information, see
    * [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
    * in the Confluence administrator's guide.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param startDate Filters the results to the records on or after the `startDate`.
    * The `startDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.
    * @param endDate Filters the results to the records on or before the `endDate`.
    * The `endDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.
    * @param searchString Filters the results to records that have string property values
    * matching the `searchString`.
    * @param start The starting index of the returned records.
    * @param limit The maximum number of records to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/audit?startDate={startDate}&endDate={endDate}&searchString={searchString}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    AuditRecordArray getAuditV1(
            @Nullable @Param("startDate") String startDate,
            @Nullable @Param("endDate") String endDate,
            @Nullable @Param("searchString") String searchString,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PostAuditV1
    * Create audit record
    * Creates a record in the audit log.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param payload The record to be created in the audit log.
    */
    @RequestLine("POST /rest/api/audit")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    AuditRecord postAuditV1(
            @NonNull AuditRecordCreate payload
    );

    /**
    * GetAuditExportV1
    * Export audit records
    * Exports audit records as a CSV file or ZIP file.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param startDate Filters the exported results to the records on or after the `startDate`.
    * The `startDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.
    * @param endDate Filters the exported results to the records on or before the `endDate`.
    * The `endDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.
    * @param searchString Filters the exported results to records that have string property values
    * matching the `searchString`.
    * @param format The format of the export file for the audit records.
    */
    @RequestLine("GET /rest/api/audit/export?startDate={startDate}&endDate={endDate}&searchString={searchString}&format={format}")
    @Headers({
        "Accept: application/zip"
    })
    Byte[] getAuditExportV1(
            @Nullable @Param("startDate") String startDate,
            @Nullable @Param("endDate") String endDate,
            @Nullable @Param("searchString") String searchString,
            @Nullable @Param("format") String format
    );

    /**
    * GetAuditRetentionV1
    * Get retention period
    * Returns the retention period for records in the audit log. The retention
    * period is how long an audit record is kept for, from creation date until
    * it is deleted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    */
    @RequestLine("GET /rest/api/audit/retention")
    @Headers({
        "Accept: application/json"
    })
    RetentionPeriod getAuditRetentionV1();

    /**
    * PutAuditRetentionV1
    * Set retention period
    * Sets the retention period for records in the audit log. The retention period
    * can be set to a maximum of 1 year.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param payload The updated retention period.
    */
    @RequestLine("PUT /rest/api/audit/retention")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    RetentionPeriod putAuditRetentionV1(
            @NonNull RetentionPeriod payload
    );

    /**
    * GetAuditSinceV1
    * Get audit records for time period
    * Returns records from the audit log, for a time period back from the current
    * date. For example, you can use this method to get the last 3 months of records.
    * 
    * This contains information about events like space exports, group membership
    * changes, app installations, etc. For more information, see
    * [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
    * in the Confluence administrator's guide.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param number The number of units for the time period.
    * @param units The unit of time that the time period is measured in.
    * @param searchString Filters the results to records that have string property values
    * matching the `searchString`.
    * @param start The starting index of the returned records.
    * @param limit The maximum number of records to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/audit/since?number={number}&units={units}&searchString={searchString}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    AuditRecordArray getAuditSinceV1(
            @Nullable @Param("number") Long number,
            @Nullable @Param("units") String units,
            @Nullable @Param("searchString") String searchString,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PostContentArchiveV1
    * Archive pages
    * Archives a list of pages. The pages to be archived are specified as a list of content IDs.
    * This API accepts the archival request and returns a task ID.
    * The archival process happens asynchronously.
    * Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
    * 
    * Each content ID needs to resolve to page objects that are not already in an archived state.
    * The content IDs need not belong to the same space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Archive' permission for each of the pages in the corresponding space it belongs to.
    *
    * @param payload The pages to be archived.
    */
    @RequestLine("POST /rest/api/content/archive")
    @Headers({
        "Content-Type: application/json"
    })
    void postContentArchiveV1(
            @NonNull ArchivePagesB payload
    );

    /**
    * PutContentBlueprintInstanceByDraftIDV1
    * Publish shared draft
    * Publishes a shared draft of a page created from a blueprint.
    * 
    * By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the draft and 'Add' permission for the space that
    * the content will be created in.
    *
    * @param draftId The ID of the draft page that was created from a blueprint.
    * You can find the `draftId` in the Confluence application by
    * opening the draft page and checking the page URL.
    * @param status The status of the content to be updated, i.e. the draft. This is set
    * to 'draft' by default, so you shouldn't need to specify it.
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * 
    * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
    * Use this if you only need to check whether the content has children of a particular type.
    * - `childTypes.attachment` returns whether the content has attachments.
    * - `childTypes.comment` returns whether the content has comments.
    * - `childTypes.page` returns whether the content has child pages.
    * - `childTypes.whiteboard` returns whether the content has child whiteboards.
    * - `childTypes.database` returns whether the content has child databases.
    * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
    * - `childTypes.folder` returns whether the content has child folders.
    * - `container` returns the space that the content is in. This is the same as the information
    * returned by [Get space](#api-space-spaceKey-get).
    * - `metadata.currentuser` returns information about the current user in relation to the content,
    * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
    * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
    * - `metadata.labels` returns the labels that have been added to the content.
    * - `metadata.frontend` this property is only used by Atlassian.
    * - `operations` returns the operations for the content, which are used when setting permissions.
    * - `children.page` returns pages that are descendants at the level immediately below the content.
    * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
    * - `children.database` returns databases that are descendants at the level immediately below the content.
    * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
    * - `children.folder` returns folders that are descendants at the level immediately below the content.
    * - `children.attachment` returns all attachments for the content.
    * - `children.comment` returns all comments on the content.
    * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
    * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
    * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
    * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
    * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
    * this may return deleted groups because deleting a group doesn't remove associated restrictions.
    * - `history` returns the history of the content, including the date it was created.
    * - `history.lastUpdated` returns information about the most recent update of the content, including
    * who updated it and when it was updated.
    * - `history.previousVersion` returns information about the update prior to the current content update.
    * - `history.contributors` returns all of the users who have contributed to the content.
    * - `history.nextVersion` returns information about the update after to the current content update.
    * - `ancestors` returns the parent content, if the content is a page or whiteboard.
    * - `body` returns the body of the content in different formats, including the editor format,
    * view format, and export format.
    * - `body.storage` returns the body of content in storage format.
    * - `body.view` returns the body of content in view format.
    * - `version` returns information about the most recent update of the content, including who updated it
    * and when it was updated.
    * - `descendants.page` returns pages that are descendants at any level below the content.
    * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
    * - `descendants.database` returns databases that are descendants at any level below the content.
    * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
    * - `descendants.folder` returns folders that are descendants at any level below the content.
    * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
    * - `descendants.comment` returns all comments on the content, same as `children.comment`.
    * - `space` returns the space that the content is in. This is the same as the information returned by
    * [Get space](#api-space-spaceKey-get).
    * 
    * In addition, the following comment-specific expansions can be used:
    * - `extensions.inlineProperties` returns inline comment-specific properties.
    * - `extensions.resolution` returns the resolution status of each comment.
    * @param payload 
    */
    @RequestLine("PUT /rest/api/content/blueprint/instance/{draftId}?status={status}&expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Content putContentBlueprintInstanceByDraftIdv1(
            @NonNull @Param("draftId") String draftId,
            @Nullable @Param("status") String status,
            @Nullable @Param("expand") List<String> expand,
            @NonNull Map<String, Object> payload
    );

    /**
    * PostContentBlueprintInstanceByDraftIDV1
    * Publish legacy draft
    * Publishes a legacy draft of a page created from a blueprint. Legacy drafts
    * will eventually be removed in favor of shared drafts. For now, this method
    * works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).
    * 
    * By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the draft and 'Add' permission for the space that
    * the content will be created in.
    *
    * @param draftId The ID of the draft page that was created from a blueprint.
    * You can find the `draftId` in the Confluence application by
    * opening the draft page and checking the page URL.
    * @param status The status of the content to be updated, i.e. the draft. This is set
    * to 'draft' by default, so you shouldn't need to specify it.
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * 
    * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
    * Use this if you only need to check whether the content has children of a particular type.
    * - `childTypes.attachment` returns whether the content has attachments.
    * - `childTypes.comment` returns whether the content has comments.
    * - `childTypes.page` returns whether the content has child pages.
    * - `childTypes.whiteboard` returns whether the content has child whiteboards.
    * - `childTypes.database` returns whether the content has child databases.
    * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
    * - `childTypes.folder` returns whether the content has child folders.
    * - `container` returns the space that the content is in. This is the same as the information
    * returned by [Get space](#api-space-spaceKey-get).
    * - `metadata.currentuser` returns information about the current user in relation to the content,
    * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
    * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
    * - `metadata.labels` returns the labels that have been added to the content.
    * - `metadata.frontend` this property is only used by Atlassian.
    * - `operations` returns the operations for the content, which are used when setting permissions.
    * - `children.page` returns pages that are descendants at the level immediately below the content.
    * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
    * - `children.database` returns databases that are descendants at the level immediately below the content.
    * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
    * - `children.folder` returns folders that are descendants at the level immediately below the content.
    * - `children.attachment` returns all attachments for the content.
    * - `children.comment` returns all comments on the content.
    * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
    * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
    * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
    * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
    * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
    * this may return deleted groups because deleting a group doesn't remove associated restrictions.
    * - `history` returns the history of the content, including the date it was created.
    * - `history.lastUpdated` returns information about the most recent update of the content, including
    * who updated it and when it was updated.
    * - `history.previousVersion` returns information about the update prior to the current content update.
    * - `history.contributors` returns all of the users who have contributed to the content.
    * - `history.nextVersion` returns information about the update after to the current content update.
    * - `ancestors` returns the parent content, if the content is a page or whiteboard.
    * - `body` returns the body of the content in different formats, including the editor format,
    * view format, and export format.
    * - `body.storage` returns the body of content in storage format.
    * - `body.view` returns the body of content in view format.
    * - `version` returns information about the most recent update of the content, including who updated it
    * and when it was updated.
    * - `descendants.page` returns pages that are descendants at any level below the content.
    * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
    * - `descendants.database` returns databases that are descendants at any level below the content.
    * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
    * - `descendants.folder` returns folders that are descendants at any level below the content.
    * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
    * - `descendants.comment` returns all comments on the content, same as `children.comment`.
    * - `space` returns the space that the content is in. This is the same as the information returned by
    * [Get space](#api-space-spaceKey-get).
    * 
    * In addition, the following comment-specific expansions can be used:
    * - `extensions.inlineProperties` returns inline comment-specific properties.
    * - `extensions.resolution` returns the resolution status of each comment.
    * @param payload 
    */
    @RequestLine("POST /rest/api/content/blueprint/instance/{draftId}?status={status}&expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Content postContentBlueprintInstanceByDraftIdv1(
            @NonNull @Param("draftId") String draftId,
            @Nullable @Param("status") String status,
            @Nullable @Param("expand") List<String> expand,
            @NonNull Map<String, Object> payload
    );

    /**
    * GetContentSearchV1
    * Search content by CQL
    * Returns the list of content that matches a Confluence Query Language
    * (CQL) query. For information on CQL, see:
    * [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/content/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/content/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/content/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    * Only content that the user has permission to view will be returned.
    *
    * @param cql The CQL string that is used to find the requested content.
    * @param cqlcontext The space, content, and content status to execute the search against.
    * Specify this as an object with the following properties:
    * 
    * - `spaceKey` Key of the space to search against. Optional.
    * - `contentId` ID of the content to search against. Optional. Must
    * be in the space spacified by `spaceKey`.
    * - `contentStatuses` Content statuses to search against. Optional.
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * 
    * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
    * Use this if you only need to check whether the content has children of a particular type.
    * - `childTypes.attachment` returns whether the content has attachments.
    * - `childTypes.comment` returns whether the content has comments.
    * - `childTypes.page` returns whether the content has child pages.
    * - `childTypes.whiteboard` returns whether the content has child whiteboards.
    * - `childTypes.database` returns whether the content has child databases.
    * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
    * - `childTypes.folder` returns whether the content has child folders.
    * - `container` returns the space that the content is in. This is the same as the information
    * returned by [Get space](#api-space-spaceKey-get).
    * - `metadata.currentuser` returns information about the current user in relation to the content,
    * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
    * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
    * - `metadata.labels` returns the labels that have been added to the content.
    * - `metadata.frontend` this property is only used by Atlassian.
    * - `operations` returns the operations for the content, which are used when setting permissions.
    * - `children.page` returns pages that are descendants at the level immediately below the content.
    * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
    * - `children.database` returns databases that are descendants at the level immediately below the content.
    * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
    * - `children.folder` returns folders that are descendants at the level immediately below the content.
    * - `children.attachment` returns all attachments for the content.
    * - `children.comment` returns all comments on the content.
    * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
    * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
    * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
    * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
    * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
    * this may return deleted groups because deleting a group doesn't remove associated restrictions.
    * - `history` returns the history of the content, including the date it was created.
    * - `history.lastUpdated` returns information about the most recent update of the content, including
    * who updated it and when it was updated.
    * - `history.previousVersion` returns information about the update prior to the current content update.
    * - `history.contributors` returns all of the users who have contributed to the content.
    * - `history.nextVersion` returns information about the update after to the current content update.
    * - `ancestors` returns the parent content, if the content is a page or whiteboard.
    * - `body` returns the body of the content in different formats, including the editor format,
    * view format, and export format.
    * - `body.storage` returns the body of content in storage format.
    * - `body.view` returns the body of content in view format.
    * - `version` returns information about the most recent update of the content, including who updated it
    * and when it was updated.
    * - `descendants.page` returns pages that are descendants at any level below the content.
    * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
    * - `descendants.database` returns databases that are descendants at any level below the content.
    * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
    * - `descendants.folder` returns folders that are descendants at any level below the content.
    * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
    * - `descendants.comment` returns all comments on the content, same as `children.comment`.
    * - `space` returns the space that the content is in. This is the same as the information returned by
    * [Get space](#api-space-spaceKey-get).
    * 
    * In addition, the following comment-specific expansions can be used:
    * - `extensions.inlineProperties` returns inline comment-specific properties.
    * - `extensions.resolution` returns the resolution status of each comment.
    * @param cursor Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
    * @param limit The maximum number of content objects to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/content/search?cql={cql}&cqlcontext={cqlcontext}&expand={expand}&cursor={cursor}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    ContentArray getContentSearchV1(
            @NonNull @Param("cql") String cql,
            @Nullable @Param("cqlcontext") String cqlcontext,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("cursor") String cursor,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * DeleteContentByIDPageTreeV1
    * Delete page tree
    * Moves a pagetree rooted at a page to the space's trash:
    * 
    * - If the content's type is `page` and its status is `current`, it will be trashed including
    * all its descendants.
    * - For every other combination of content type and status, this API is not supported.
    * 
    * This API accepts the pageTree delete request and returns a task ID.
    * The delete process happens asynchronously.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the `/longtask/&lt;taskId&gt;` REST API to get the copy task status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Delete' permission for the space that the content is in.
    *
    * @param id The ID of the content which forms root of the page tree, to be deleted.
    */
    @RequestLine("DELETE /rest/api/content/{id}/pageTree")
    void deleteContentByIdpageTreeV1(
            @NonNull @Param("id") String id
    );

    /**
    * PutContentByPageIDMoveByPositionByTargetIDV1
    * Move a page to a new location relative to a target page
    * Move a page to a new location relative to a target page:
    * 
    * * `before` - move the page under the same parent as the target, before the target in the list of children
    * * `after` - move the page under the same parent as the target, after the target in the list of children
    * * `append` - move the page to be a child of the target
    * 
    * Caution: This API can move pages to the top level of a space. Top-level pages are difficult to find in the UI
    * because they do not show up in the page tree display. To avoid this, never use `before` or `after` positions
    * when the `targetId` is a top-level page.
    *
    * @param pageId The ID of the page to be moved
    * @param position The position to move the page to relative to the target page:
    * * `before` - move the page under the same parent as the target, before the target in the list of children
    * * `after` - move the page under the same parent as the target, after the target in the list of children
    * * `append` - move the page to be a child of the target
    * @param targetId The ID of the target page for this operation
    */
    @RequestLine("PUT /rest/api/content/{pageId}/move/{position}/{targetId}")
    @Headers({
        "Accept: application/json"
    })
    MovePageR200 putContentByPageIdmoveByPositionByTargetIdv1(
            @NonNull @Param("pageId") String pageId,
            @NonNull @Param("position") String position,
            @NonNull @Param("targetId") String targetId
    );

    /**
    * PutContentByIDChildAttachmentByAttachmentIDV1
    * Update attachment properties
    * Updates the attachment properties, i.e. the non-binary data of an attachment
    * like the filename, media-type, comment, and parent container.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content that the attachment is attached to.
    * @param attachmentId The ID of the attachment to update.
    * @param payload The details of the attachment to be updated.
    */
    @RequestLine("PUT /rest/api/content/{id}/child/attachment/{attachmentId}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Content putContentByIdchildAttachmentByAttachmentIdv1(
            @NonNull @Param("id") String id,
            @NonNull @Param("attachmentId") String attachmentId,
            @NonNull Map<String, Object> payload
    );

    /**
    * GetContentByIDChildAttachmentByAttachmentIDDownloadV1
    * Get URI to download attachment
    * Redirects the client to a URL that serves an attachment's binary data.
    *
    * @param id The ID of the content that the attachment is attached to.
    * @param attachmentId The ID of the attachment to download.
    * @param version The version of the attachment. If this parameter is absent, the redirect URI will download the latest version of the attachment.
    * @param status The statuses allowed on the retrieved attachment. If this parameter is absent, it will default to `current`.
    */
    @RequestLine("GET /rest/api/content/{id}/child/attachment/{attachmentId}/download?version={version}&status={status}")
    void getContentByIdchildAttachmentByAttachmentIddownloadV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("attachmentId") String attachmentId,
            @Nullable @Param("version") Long version,
            @Nullable @Param("status") List<String> status
    );

    /**
    * GetContentByIDDescendantV1
    * Get content descendants
    * Returns a map of the descendants of a piece of content. This is similar
    * to [Get content children](#api-content-id-child-get), except that this
    * method returns child pages at all levels, rather than just the direct
    * child pages.
    * 
    * A piece of content has different types of descendants, depending on its type:
    * 
    * - `page`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `whiteboard`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `database`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `embed`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `folder`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `blogpost`: descendant is `comment`, `attachment`
    * - `attachment`: descendant is `comment`
    * - `comment`: descendant is `attachment`
    * 
    * The map will always include all descendant types that are valid for the content.
    * However, if the content has no instances of a descendant type, the map will
    * contain an empty array for that descendant type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if it
    * is a page.
    *
    * @param id The ID of the content to be queried for its descendants.
    * @param expand A multi-value parameter indicating which properties of the children to
    * expand, where:
    * 
    * - `attachment` returns all attachments for the content.
    * - `comments` returns all comments for the content.
    * - `page` returns all child pages of the content.
    * - `whiteboard` returns all child whiteboards of the content.
    * - `database` returns all child databases of the content.
    * - `embed` returns all child embeds of the content.
    * - `folder` returns all child folders of the content.
    * @deprecated
    */
    @RequestLine("GET /rest/api/content/{id}/descendant?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    @Deprecated
    Map<String, Object> getContentByIddescendantV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetContentByIDDescendantByTypeV1
    * Get content descendants by type
    * Returns all descendants of a given type, for a piece of content. This is
    * similar to [Get content children by type](#api-content-id-child-type-get),
    * except that this method returns child pages at all levels, rather than just
    * the direct child pages.
    * 
    * A piece of content has different types of descendants, depending on its type:
    * 
    * - `page`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `whiteboard`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `database`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `embed`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `folder`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `blogpost`: descendant is `comment`, `attachment`
    * - `attachment`: descendant is `comment`
    * - `comment`: descendant is `attachment`
    * 
    * Custom content types that are provided by apps can also be returned.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if it
    * is a page.
    *
    * @param id The ID of the content to be queried for its descendants.
    * @param type The type of descendants to return.
    * @param depth Filter the results to descendants upto a desired level of the content. Note, the maximum value supported is 100. root level of the content means immediate (level 1) descendants of the type requested. all represents returning all descendants of the type requested.
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * 
    * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
    * Use this if you only need to check whether the content has children of a particular type.
    * - `childTypes.attachment` returns whether the content has attachments.
    * - `childTypes.comment` returns whether the content has comments.
    * - `childTypes.page` returns whether the content has child pages.
    * - `childTypes.whiteboard` returns whether the content has child whiteboards.
    * - `childTypes.database` returns whether the content has child databases.
    * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
    * - `childTypes.folder` returns whether the content has child folders.
    * - `container` returns the space that the content is in. This is the same as the information
    * returned by [Get space](#api-space-spaceKey-get).
    * - `metadata.currentuser` returns information about the current user in relation to the content,
    * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
    * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
    * - `metadata.labels` returns the labels that have been added to the content.
    * - `metadata.frontend` this property is only used by Atlassian.
    * - `operations` returns the operations for the content, which are used when setting permissions.
    * - `children.page` returns pages that are descendants at the level immediately below the content.
    * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
    * - `children.database` returns databases that are descendants at the level immediately below the content.
    * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
    * - `children.folder` returns folders that are descendants at the level immediately below the content.
    * - `children.attachment` returns all attachments for the content.
    * - `children.comment` returns all comments on the content.
    * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
    * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
    * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
    * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
    * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
    * this may return deleted groups because deleting a group doesn't remove associated restrictions.
    * - `history` returns the history of the content, including the date it was created.
    * - `history.lastUpdated` returns information about the most recent update of the content, including
    * who updated it and when it was updated.
    * - `history.previousVersion` returns information about the update prior to the current content update.
    * - `history.contributors` returns all of the users who have contributed to the content.
    * - `history.nextVersion` returns information about the update after to the current content update.
    * - `ancestors` returns the parent content, if the content is a page or whiteboard.
    * - `body` returns the body of the content in different formats, including the editor format,
    * view format, and export format.
    * - `body.storage` returns the body of content in storage format.
    * - `body.view` returns the body of content in view format.
    * - `version` returns information about the most recent update of the content, including who updated it
    * and when it was updated.
    * - `descendants.page` returns pages that are descendants at any level below the content.
    * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
    * - `descendants.database` returns databases that are descendants at any level below the content.
    * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
    * - `descendants.folder` returns folders that are descendants at any level below the content.
    * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
    * - `descendants.comment` returns all comments on the content, same as `children.comment`.
    * - `space` returns the space that the content is in. This is the same as the information returned by
    * [Get space](#api-space-spaceKey-get).
    * 
    * In addition, the following comment-specific expansions can be used:
    * - `extensions.inlineProperties` returns inline comment-specific properties.
    * - `extensions.resolution` returns the resolution status of each comment.
    * @param start The starting index of the returned content.
    * @param limit The maximum number of content to return per page. Note,
    * this may be restricted by fixed system limits.
    * @deprecated
    */
    @RequestLine("GET /rest/api/content/{id}/descendant/{type}?depth={depth}&expand={expand}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    @Deprecated
    ContentArray getContentByIddescendantByTypeV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("type") String type,
            @Nullable @Param("depth") String depth,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDV1
    * Get macro body by macro ID
    * Returns the body of a macro in storage format, for the given macro ID.
    * This includes information like the name of the macro, the body of the macro,
    * and any macro parameters. This method is mainly used by Cloud apps.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param id The ID for the content that contains the macro.
    * @param version The version of the content that contains the macro. Specifying `0` as the `version` will return
    * the macro body for the latest content version.
    * @param macroId The ID of the macro. This is usually passed by the app that the
    * macro is in. Otherwise, find the macro ID by querying the desired
    * content and version, then expanding the body in storage format.
    * For example, '/content/196611/version/7?expand=content.body.storage'.
    */
    @RequestLine("GET /rest/api/content/{id}/history/{version}/macro/id/{macroId}")
    @Headers({
        "Accept: application/json"
    })
    MacroInstance getContentByIdhistoryByVersionMacroIdbyMacroIdv1(
            @NonNull @Param("id") String id,
            @NonNull @Param("version") Integer version,
            @NonNull @Param("macroId") String macroId
    );

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1
    * Get macro body by macro ID and convert the representation synchronously
    * Returns the body of a macro in format specified in path, for the given macro ID.
    * This includes information like the name of the macro, the body of the macro,
    * and any macro parameters.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param id The ID for the content that contains the macro.
    * @param version The version of the content that contains the macro. Specifying `0` as the `version` will return
    * the macro body for the latest content version.
    * @param macroId The ID of the macro. This is usually passed by the app that the
    * macro is in. Otherwise, find the macro ID by querying the desired
    * content and version, then expanding the body in storage format.
    * For example, '/content/196611/version/7?expand=content.body.storage'.
    * @param to The content representation to return the macro in.
    * @param expand A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the
    * `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
    * converting to `view` format). 
    * 
    * If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
    * necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
    * any nested dynamic content (i.e. macros).
    * 
    * - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
    * - `mediaToken` returns JWT token for retrieving attachment data from Media API
    * - `macroRenderedOutput` additionally converts body to view format
    * - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
    * - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
    * - `webresource.superbatch.uris.all` returns all common dependencies as static URLs
    * - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * - `webresource.uris.js` returns JS dependencies specific to conversion
    * - `webresource.uris.css` returns CSS dependencies specific to conversion
    * - `webresource.uris.all` returns all dependencies specific to conversion     
    * - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * @param spaceKeyContext The space key used for resolving embedded content (page includes,
    * files, and links) in the content body. For example, if the source content
    * contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
    * and the `spaceKeyContext=TEST` parameter is provided, then the link
    * will be converted to a link to the "Example page" page in the "TEST" space.
    * @param embeddedContentRender Mode used for rendering embedded content, like attachments.
    * 
    * - `current` renders the embedded content using the latest version.
    * - `version-at-save` renders the embedded content using the version at
    * the time of save.
    */
    @RequestLine("GET /rest/api/content/{id}/history/{version}/macro/id/{macroId}/convert/{to}?expand={expand}&spaceKeyContext={spaceKeyContext}&embeddedContentRender={embeddedContentRender}")
    @Headers({
        "Accept: application/json"
    })
    ContentBody getContentByIdhistoryByVersionMacroIdbyMacroIdconvertByToV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("version") Integer version,
            @NonNull @Param("macroId") String macroId,
            @NonNull @Param("to") String to,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("spaceKeyContext") String spaceKeyContext,
            @Nullable @Param("embeddedContentRender") String embeddedContentRender
    );

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1
    * Get macro body by macro ID and convert representation Asynchronously
    * Returns Async Id of the conversion task which will convert the macro into a content body of the desired format.
    * The result will be available for 5 minutes after completion of the conversion.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param id The ID for the content that contains the macro.
    * @param version The version of the content that contains the macro. Specifying `0` as the `version` will return
    * the macro body for the latest content version.
    * @param macroId The ID of the macro. For apps, this is passed to the macro by the Connect/Forge framework.
    * Otherwise, find the macro ID by querying the desired
    * content and version, then expanding the body in storage format.
    * For example, '/content/196611/version/7?expand=content.body.storage'.
    * @param to The content representation to return the macro in.
    * Currently, the following conversions are allowed:
    * 
    * - `export_view`
    * - `styled_view`
    * - `view`
    * @param expand A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the
    * `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
    * converting to `view` format). 
    * 
    * If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
    * necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
    * any nested dynamic content (i.e. macros).
    * 
    * - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
    * - `mediaToken` returns JWT token for retrieving attachment data from Media API
    * - `macroRenderedOutput` additionally converts body to view format
    * - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
    * - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
    * - `webresource.superbatch.uris.all` returns all common dependencies as static URLs
    * - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * - `webresource.uris.js` returns JS dependencies specific to conversion
    * - `webresource.uris.css` returns CSS dependencies specific to conversion
    * - `webresource.uris.all` returns all dependencies specific to conversion     
    * - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * @param allowCache If this field is false, the cache will erase its current value and begin a conversion.
    * If this field is true, the cache will not erase its current value, and will set the status of the
    * result in cache to RERUNNING. Once the data is updated, the status will change to COMPLETED. 
    * Large macros that take long to convert, and who want to show intermediate, but potentially stale data, immediately should set this field to true.
    * Cache values are stored per macro per user per content and expansions.
    * @param spaceKeyContext The space key used for resolving embedded content (page includes,
    * files, and links) in the content body. For example, if the source content
    * contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
    * and the `spaceKeyContext=TEST` parameter is provided, then the link
    * will be converted to a link to the "Example page" page in the "TEST" space.
    * @param embeddedContentRender Mode used for rendering embedded content, like attachments.
    * 
    * - `current` renders the embedded content using the latest version.
    * - `version-at-save` renders the embedded content using the version at
    * the time of save.
    */
    @RequestLine("GET /rest/api/content/{id}/history/{version}/macro/id/{macroId}/convert/async/{to}?expand={expand}&allowCache={allowCache}&spaceKeyContext={spaceKeyContext}&embeddedContentRender={embeddedContentRender}")
    @Headers({
        "Accept: application/json"
    })
    AsyncId getContentByIdhistoryByVersionMacroIdbyMacroIdconvertAsyncByToV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("version") Integer version,
            @NonNull @Param("macroId") String macroId,
            @NonNull @Param("to") String to,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("allowCache") Boolean allowCache,
            @Nullable @Param("spaceKeyContext") String spaceKeyContext,
            @Nullable @Param("embeddedContentRender") String embeddedContentRender
    );

    /**
    * PostContentByIDLabelV1
    * Add labels to content
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content that will have labels added to it.
    * @param payload The labels to add to the content.
    */
    @RequestLine("POST /rest/api/content/{id}/label")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    LabelArray postContentByIdlabelV1(
            @NonNull @Param("id") String id,
            @NonNull Object payload
    );

    /**
    * DeleteContentByIDLabelV1
    * Remove label from content using query parameter
    * Removes a label from a piece of content. Labels can't be deleted from archived content.
    * This is similar to [Remove label from content](#api-content-id-label-label-delete)
    * except that the label name is specified via a query parameter.
    * 
    * Use this method if the label name has "/" characters, as
    * [Remove label from content using query parameter](#api-content-id-label-delete)
    * does not accept "/" characters for the label name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content that the label will be removed from.
    * @param name The name of the label to be removed.
    */
    @RequestLine("DELETE /rest/api/content/{id}/label?name={name}")
    void deleteContentByIdlabelV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("name") String name
    );

    /**
    * DeleteContentByIDLabelByLabelV1
    * Remove label from content
    * Removes a label from a piece of content. Labels can't be deleted from archived content.
    * This is similar to [Remove label from content using query parameter](#api-content-id-label-delete)
    * except that the label name is specified via a path parameter.
    * 
    * Use this method if the label name does not have "/" characters, as the path
    * parameter does not accept "/" characters for security reasons. Otherwise,
    * use [Remove label from content using query parameter](#api-content-id-label-delete).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content that the label will be removed from.
    * @param label The name of the label to be removed.
    */
    @RequestLine("DELETE /rest/api/content/{id}/label/{label}")
    void deleteContentByIdlabelByLabelV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("label") String label
    );

    /**
    * GetContentByIDNotificationChildCreatedV1
    * Get watches for page
    * Returns the watches for a page. A user that watches a page will receive
    * receive notifications when the page is updated.
    * 
    * If you want to manage watches for a page, use the following `user` methods:
    * 
    * - [Get content watch status for user](#api-user-watch-content-contentId-get)
    * - [Add content watch](#api-user-watch-content-contentId-post)
    * - [Remove content watch](#api-user-watch-content-contentId-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param id The ID of the content to be queried for its watches.
    * @param start The starting index of the returned watches.
    * @param limit The maximum number of watches to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/content/{id}/notification/child-created?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    WatchArray getContentByIdnotificationChildCreatedV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetContentByIDNotificationCreatedV1
    * Get watches for space
    * Returns all space watches for the space that the content is in. A user that
    * watches a space will receive receive notifications when any content in the
    * space is updated.
    * 
    * If you want to manage watches for a space, use the following `user` methods:
    * 
    * - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
    * - [Add space watch](#api-user-watch-space-spaceKey-post)
    * - [Remove space watch](#api-user-watch-space-spaceKey-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param id The ID of the content to be queried for its watches.
    * @param start The starting index of the returned watches.
    * @param limit The maximum number of watches to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/content/{id}/notification/created?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    SpaceWatchArray getContentByIdnotificationCreatedV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PostContentByIDPagehierarchyCopyV1
    * Copy page hierarchy
    * Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.
    *  The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.
    *  The titleOptions object defines the rules of renaming page titles during the copy;
    *  for example, search and replace can be used in conjunction to rewrite the copied page titles.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
    *
    * @param id 
    * @param payload Request object from json post body
    */
    @RequestLine("POST /rest/api/content/{id}/pagehierarchy/copy")
    @Headers({
        "Content-Type: application/json"
    })
    void postContentByIdpagehierarchyCopyV1(
            @NonNull @Param("id") String id,
            @NonNull CopyPageHierarchyRequest payload
    );

    /**
    * PostContentByIDCopyV1
    * Copy single page
    * Copies a single page and its associated properties, permissions, attachments, and custom contents.
    *  The `id` path parameter refers to the content ID of the page to copy. The target of the page to be copied
    *  is defined using the `destination` in the request body and can be one of the following types.
    * 
    *   - `space`: page will be copied to the specified space as a root page on the space
    *   - `parent_page`: page will be copied as a child of the specified parent page
    *   - `parent_content`: page will be copied as a child of the specified parent content
    *   - `existing_page`: page will be copied and replace the specified page
    * 
    * By default, the following objects are expanded: `space`, `history`, `version`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the space that the content will be copied in and permission to update the content if copying to an `existing_page`.
    *
    * @param id 
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * Maximum sub-expansions allowed is `8`.
    * 
    * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
    * Use this if you only need to check whether the content has children of a particular type.
    * - `childTypes.attachment` returns whether the content has attachments.
    * - `childTypes.comment` returns whether the content has comments.
    * - `childTypes.page` returns whether the content has child pages.
    * - `childTypes.whiteboard` returns whether the content has child whiteboards.
    * - `childTypes.database` returns whether the content has child databases.
    * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
    * - `childTypes.folder` returns whether the content has child folder.
    * - `container` returns the space that the content is in. This is the same as the information
    * returned by [Get space](#api-space-spaceKey-get).
    * - `metadata.currentuser` returns information about the current user in relation to the content,
    * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
    * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
    * - `metadata.labels` returns the labels that have been added to the content.
    * - `metadata.frontend` this property is only used by Atlassian.
    * - `operations` returns the operations for the content, which are used when setting permissions.
    * - `children.page` returns pages that are descendants at the level immediately below the content.
    * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
    * - `children.database` returns databases that are descendants at the level immediately below the content.
    * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
    * - `children.folder` returns folders that are descendants at the level immediately below the content.
    * - `children.attachment` returns all attachments for the content.
    * - `children.comment` returns all comments on the content.
    * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
    * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
    * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
    * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
    * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
    * this may return deleted groups because deleting a group doesn't remove associated restrictions.
    * - `history` returns the history of the content, including the date it was created.
    * - `history.lastUpdated` returns information about the most recent update of the content, including
    * who updated it and when it was updated.
    * - `history.previousVersion` returns information about the update prior to the current content update.
    * - `history.contributors` returns all of the users who have contributed to the content.
    * - `history.nextVersion` returns information about the update after to the current content update.
    * - `ancestors` returns the parent content, if the content is a page or whiteboard.
    * - `body` returns the body of the content in different formats, including the editor format,
    * view format, and export format.
    * - `body.storage` returns the body of content in storage format.
    * - `body.view` returns the body of content in view format.
    * - `version` returns information about the most recent update of the content, including who updated it
    * and when it was updated.
    * - `descendants.page` returns pages that are descendants at any level below the content.
    * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
    * - `descendants.database` returns databases that are descendants at any level below the content.
    * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
    * - `descendants.folder` returns folders that are descendants at any level below the content.
    * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
    * - `descendants.comment` returns all comments on the content, same as `children.comment`.
    * - `space` returns the space that the content is in. This is the same as the information returned by
    * [Get space](#api-space-spaceKey-get).
    * 
    * In addition, the following comment-specific expansions can be used:
    * - `extensions.inlineProperties` returns inline comment-specific properties.
    * - `extensions.resolution` returns the resolution status of each comment.
    * @param payload Request object from json post body
    */
    @RequestLine("POST /rest/api/content/{id}/copy?expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json;charset=UTF-8"
    })
    Content postContentByIdcopyV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand,
            @NonNull CopyPageRequest payload
    );

    /**
    * PostContentByIDPermissionCheckV1
    * Check content permissions
    * Check if a user or a group can perform an operation to the specified content. The `operation` to check
    * must be provided. The user’s account ID or the ID of the group can be provided in the `subject` to check
    * permissions against a specified user or group. The following permission checks are done to make sure that the
    * user or group has the proper access:
    * 
    * - site permissions
    * - space permissions
    * - content restrictions
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission) if checking permission for self,
    * otherwise 'Confluence Administrator' global permission is required.
    *
    * @param id The ID of the content to check permissions against.
    * @param payload The content permission request.
    */
    @RequestLine("POST /rest/api/content/{id}/permission/check")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    PermissionCheckResponse postContentByIdpermissionCheckV1(
            @NonNull @Param("id") String id,
            @NonNull ContentPermissionRequest payload
    );

    /**
    * GetContentByIDRestrictionV1
    * Get restrictions
    * Returns the restrictions on a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The ID of the content to be queried for its restrictions.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions to expand. By default, the following objects are expanded:
    * `restrictions.user`, `restrictions.group`.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    * @param start The starting index of the users and groups in the returned restrictions.
    * @param limit The maximum number of users and the maximum number of groups, in the
    * returned restrictions, to return per page. Note, this may be restricted
    * by fixed system limits.
    */
    @RequestLine("GET /rest/api/content/{id}/restriction?expand={expand}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    ContentRestrictionArray getContentByIdrestrictionV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PutContentByIDRestrictionV1
    * Update restrictions
    * Updates restrictions for a piece of content. This removes the existing
    * restrictions and replaces them with the restrictions in the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content to update restrictions for.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions (returned in response) to expand.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    * @param payload The updated restrictions for the content.
    */
    @RequestLine("PUT /rest/api/content/{id}/restriction?expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentRestrictionArray putContentByIdrestrictionV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand,
            @NonNull Object payload
    );

    /**
    * PostContentByIDRestrictionV1
    * Add restrictions
    * Adds restrictions to a piece of content. Note, this does not change any
    * existing restrictions on the content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content to add restrictions to.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions (returned in response) to expand.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    * @param payload The restrictions to be added to the content.
    */
    @RequestLine("POST /rest/api/content/{id}/restriction?expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentRestrictionArray postContentByIdrestrictionV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand,
            @NonNull Object payload
    );

    /**
    * DeleteContentByIDRestrictionV1
    * Delete restrictions
    * Removes all restrictions (read and update) on a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content to remove restrictions from.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions (returned in response) to expand.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    */
    @RequestLine("DELETE /rest/api/content/{id}/restriction?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    ContentRestrictionArray deleteContentByIdrestrictionV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetContentByIDRestrictionByOperationV1
    * Get restrictions by operation
    * Returns restrictions on a piece of content by operation. This method is
    * similar to [Get restrictions](#api-content-id-restriction-get) except that
    * the operations are properties of the return object, rather than items in
    * a results array.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The ID of the content to be queried for its restrictions.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions to expand.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    */
    @RequestLine("GET /rest/api/content/{id}/restriction/byOperation?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    GetRestrictionsByOperation getContentByIdrestrictionByOperationV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyV1
    * Get restrictions for operation
    * Returns the restictions on a piece of content for a given operation (read
    * or update).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The ID of the content to be queried for its restrictions.
    * @param operationKey The operation type of the restrictions to be returned.
    * @param expand A multi-value parameter indicating which properties of the content
    * restrictions to expand.
    * 
    * - `restrictions.user` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `restrictions.group` returns the piece of content that the restrictions are
    * applied to. Expanded by default.
    * - `content` returns the piece of content that the restrictions are
    * applied to.
    * @param start The starting index of the users and groups in the returned restrictions.
    * @param limit The maximum number of users and the maximum number of groups, in the
    * returned restrictions, to return per page. Note, this may be restricted
    * by fixed system limits.
    */
    @RequestLine("GET /rest/api/content/{id}/restriction/byOperation/{operationKey}?expand={expand}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    ContentRestriction getContentByIdrestrictionByOperationByOperationKeyV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Get content restriction status for group
    * Returns whether the specified content restriction applies to a group.
    * For example, if a page with `id=123` has a `read` restriction for the `123456` group id,
    * the following request will return `true`:
    * 
    * `/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456`
    * 
    * Note that a response of `true` does not guarantee that the group can view the page, as it does not account for
    * account-inherited restrictions, space permissions, or even product access. For more
    * information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that the restriction applies to.
    * @param groupId The id of the group to be queried for whether the content restriction
    * applies to it.
    */
    @RequestLine("GET /rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}")
    void getContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @NonNull @Param("groupId") String groupId
    );

    /**
    * PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Add group to content restriction
    * Adds a group to a content restriction by Group Id. That is, grant read or update
    * permission to the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that the restriction applies to.
    * @param groupId The groupId of the group to add to the content restriction.
    */
    @RequestLine("PUT /rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}")
    void putContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @NonNull @Param("groupId") String groupId
    );

    /**
    * DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Remove group from content restriction
    * Removes a group from a content restriction. That is, remove read or update
    * permission for the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that the restriction applies to.
    * @param groupId The id of the group to remove from the content restriction.
    */
    @RequestLine("DELETE /rest/api/content/{id}/restriction/byOperation/{operationKey}/byGroupId/{groupId}")
    void deleteContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @NonNull @Param("groupId") String groupId
    );

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyUserV1
    * Get content restriction status for user
    * Returns whether the specified content restriction applies to a user.
    * For example, if a page with `id=123` has a `read` restriction for a user with an account ID of
    * `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`, the following request will return `true`:
    * 
    * `/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`
    * 
    * Note that a response of `true` does not guarantee that the user can view the page, as it does not account for
    * account-inherited restrictions, space permissions, or even product access. For more
    * information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that is restricted.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("GET /rest/api/content/{id}/restriction/byOperation/{operationKey}/user?key={key}&username={username}&accountId={accountId}")
    void getContentByIdrestrictionByOperationByOperationKeyUserV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * PutContentByIDRestrictionByOperationByOperationKeyUserV1
    * Add user to content restriction
    * Adds a user to a content restriction. That is, grant read or update
    * permission to the user for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that the restriction applies to.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("PUT /rest/api/content/{id}/restriction/byOperation/{operationKey}/user?key={key}&username={username}&accountId={accountId}")
    void putContentByIdrestrictionByOperationByOperationKeyUserV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * DeleteContentByIDRestrictionByOperationByOperationKeyUserV1
    * Remove user from content restriction
    * Removes a group from a content restriction. That is, remove read or update
    * permission for the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The ID of the content that the restriction applies to.
    * @param operationKey The operation that the restriction applies to.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("DELETE /rest/api/content/{id}/restriction/byOperation/{operationKey}/user?key={key}&username={username}&accountId={accountId}")
    void deleteContentByIdrestrictionByOperationByOperationKeyUserV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("operationKey") String operationKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * GetContentByIDStateV1
    * Get content state
    * Gets the current content state of the draft or current version of content. To specify the draft version, set
    * the parameter status to draft, otherwise archived or current will get the relevant published state.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param id The id of the content whose content state is of interest.
    * @param status Set status to one of [current,draft,archived]. Default value is current.
    */
    @RequestLine("GET /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Accept: application/json"
    })
    ContentStateResponse getContentByIdstateV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("status") String status
    );

    /**
    * PutContentByIDStateV1
    * Set the content state of a content and publishes a new version of the content.
    * Sets the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new state.
    * 
    * You may pass in either an id of a state, or the name and color of a desired new state.
    * If all 3 are passed in, id will be used.
    * If the name and color passed in already exist under the current user's existing custom states, the existing state will be reused.
    * If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content's space)
    * then this set will fail.
    * 
    * You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The Id of the content whose content state is to be set.
    * @param status Status of content onto which state will be placed. If draft, then draft state will change.
    * If current, state will be placed onto a new version of the content with same body as previous version.
    * @param payload Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space.
    */
    @RequestLine("PUT /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentStateResponse putContentByIdstateV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("status") String status,
            @NonNull ContentStateRestInput payload
    );

    /**
    * DeleteContentByIDStateV1
    * Removes the content state of a content and publishes a new version.
    * Removes the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id The Id of the content whose content state is to be set.
    * @param status status of content state from which to delete state. Can be draft or archived
    */
    @RequestLine("DELETE /rest/api/content/{id}/state?status={status}")
    @Headers({
        "Accept: application/json"
    })
    ContentStateResponse deleteContentByIdstateV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("status") String status
    );

    /**
    * GetContentByIDStateAvailableV1
    * Gets available content states for content.
    * Gets content states that are available for the content to be set as.
    * Will return all enabled Space Content States.
    * Will only return most the 3 most recently published custom content states to match UI editor list.
    * To get all custom content states, use the /content-states endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param id id of content to get available states for
    */
    @RequestLine("GET /rest/api/content/{id}/state/available")
    @Headers({
        "Accept: application/json"
    })
    AvailableContentStates getContentByIdstateAvailableV1(
            @NonNull @Param("id") String id
    );

    /**
    * PostContentByIDVersionV1
    * Restore content version
    * Restores a historical version to be the latest version. That is, a new version
    * is created with the content of the historical version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content for which the history will be restored.
    * @param expand A multi-value parameter indicating which properties of the content to expand. By default, the `content`
    * object is expanded.
    * 
    * - `collaborators` returns the users that collaborated on the version.
    * - `content` returns the content for the version.
    * @param payload The content version to be restored.
    */
    @RequestLine("POST /rest/api/content/{id}/version?expand={expand}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Version postContentByIdversionV1(
            @NonNull @Param("id") String id,
            @Nullable @Param("expand") List<String> expand,
            @NonNull VersionRestore payload
    );

    /**
    * DeleteContentByIDVersionByVersionNumberV1
    * Delete content version
    * Delete a historical version. This does not delete the changes made to the
    * content in that version, rather the changes for the deleted version are
    * rolled up into the next version. Note, you cannot delete the current version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param id The ID of the content that the version will be deleted from.
    * @param versionNumber The number of the version to be deleted. The version number starts
    * from 1 up to current version.
    */
    @RequestLine("DELETE /rest/api/content/{id}/version/{versionNumber}")
    void deleteContentByIdversionByVersionNumberV1(
            @NonNull @Param("id") String id,
            @NonNull @Param("versionNumber") Integer versionNumber
    );

    /**
    * GetContentStatesV1
    * Get Custom Content States
    * Get custom content states that authenticated user has created.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**
    * Must have user authentication.
    *
    */
    @RequestLine("GET /rest/api/content-states")
    @Headers({
        "Accept: application/json"
    })
    List<ContentState> getContentStatesV1();

    /**
    * PostContentbodyConvertAsyncByToV1
    * Asynchronously convert content body
    * Converts a content body from one format to another format asynchronously.
    * Returns the asyncId for the asynchronous task.
    * 
    * Supported conversions:
    * 
    * - atlas_doc_format: editor, export_view, storage, styled_view, view
    * - storage: atlas_doc_format, editor, export_view, styled_view, view
    * - editor: storage
    * 
    * No other conversions are supported at the moment.
    * Once a conversion is completed, it will be available for 5 minutes at the result endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param to The name of the target format for the content body.
    * @param expand A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the
    * `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when
    * converting to `view` format). 
    * 
    * If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is 
    * necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for
    * any nested dynamic content (i.e. macros).
    * 
    * - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro)
    * - `mediaToken` returns JWT token for retrieving attachment data from Media API
    * - `macroRenderedOutput` additionally converts body to view format
    * - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs
    * - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs
    * - `webresource.superbatch.uris.all` returns all common dependencies as static URLs
    * - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * - `webresource.uris.js` returns JS dependencies specific to conversion
    * - `webresource.uris.css` returns CSS dependencies specific to conversion
    * - `webresource.uris.all` returns all dependencies specific to conversion     
    * - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags
    * - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags
    * - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags
    * @param spaceKeyContext The space key used for resolving embedded content (page includes,
    * files, and links) in the content body. For example, if the source content
    * contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
    * and the `spaceKeyContext=TEST` parameter is provided, then the link
    * will be converted to a link to the "Example page" page in the "TEST" space.
    * @param contentIdContext The content ID used to find the space for resolving embedded content
    * (page includes, files, and links) in the content body. For example,
    * if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;`
    * and the `contentIdContext=123` parameter is provided, then the link
    * will be converted to a link to the "Example page" page in the same space
    * that has the content with ID=123. Note, `spaceKeyContext` will be ignored
    * if this parameter is provided.
    * @param allowCache If this field is false, the cache will erase its current value and begin a new conversion.
    * If this field is true, the cache will not erase its current value, and will set the status of the
    * async conversion to RERUNNING. Once the data is updated, the status will change to COMPLETED. 
    * Large macros that take long to convert, and whose data need not immediately up to date (same as previous conversion's result within last 5 minutes)
    * should set this fields to true. Cache values are stored per user per content body and expansions.
    * @param embeddedContentRender Mode used for rendering embedded content, like attachments.
    * 
    * - `current` renders the embedded content using the latest version.
    * - `version-at-save` renders the embedded content using the version at
    * the time of save.
    * @param payload The content body to convert.
    */
    @RequestLine("POST /rest/api/contentbody/convert/async/{to}?expand={expand}&spaceKeyContext={spaceKeyContext}&contentIdContext={contentIdContext}&allowCache={allowCache}&embeddedContentRender={embeddedContentRender}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    AsyncId postContentbodyConvertAsyncByToV1(
            @NonNull @Param("to") String to,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("spaceKeyContext") String spaceKeyContext,
            @Nullable @Param("contentIdContext") String contentIdContext,
            @Nullable @Param("allowCache") Boolean allowCache,
            @Nullable @Param("embeddedContentRender") String embeddedContentRender,
            @NonNull Map<String, Object> payload
    );

    /**
    * GetContentbodyConvertAsyncByIDV1
    * Get asynchronously converted content body from the id or the current status of the task.
    * Returns the asynchronous content body for the corresponding id if the task is complete 
    * or returns the status of the task.
    * 
    * After the task is completed, the result can be obtained for 5 minutes, or until an identical conversion request is made again,
    * with allowCache query param set to false.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param id The asyncId of the macro task to get the converted body.
    */
    @RequestLine("GET /rest/api/contentbody/convert/async/{id}")
    @Headers({
        "Accept: application/json"
    })
    AsyncContentBody getContentbodyConvertAsyncByIdv1(
            @NonNull @Param("id") String id
    );

    /**
    * GetContentbodyConvertAsyncBulkTasksV1
    * Get asynchronous content body conversion task result in bulk
    * Returns the content body for the corresponding `asyncId` of a completed conversion task. If
    * the task is not completed, the task status is returned instead.
    * 
    * Once a conversion task is completed, the result can be obtained for up to 5 minutes, or
    * until an identical conversion request is made again with the `allowCache` parameter set to
    * false.
    * 
    * Note that there is a maximum limit of 50 task results per request to this endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param ids The asyncIds of the conversion tasks.
    */
    @RequestLine("GET /rest/api/contentbody/convert/async/bulk/tasks?ids={ids}")
    @Headers({
        "Accept: application/json"
    })
    List<AsyncContentBody> getContentbodyConvertAsyncBulkTasksV1(
            @NonNull @Param("ids") List<String> ids
    );

    /**
    * PostContentbodyConvertAsyncBulkTasksV1
    * Create asynchronous content body conversion tasks in bulk
    * Asynchronously converts content bodies from one format to another format in bulk. Use the Content body
    * REST API to get the status of conversion tasks. Note that there is a maximum limit of 10 conversions per
    * request to this endpoint.
    * 
    * Supported conversions:
    * 
    * - storage: editor, export_view, styled_view, view
    * - editor: storage
    * 
    * Once a conversion task is completed, it is available for polling for up to 5 minutes.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if the `spaceKeyContext` or
    * `contentIdContext` are present.
    *
    * @param payload An array of parameters to create content body conversion tasks.
    */
    @RequestLine("POST /rest/api/contentbody/convert/async/bulk/tasks")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    List<AsyncId> postContentbodyConvertAsyncBulkTasksV1(
            @NonNull List<ContentBodyConversionInput> payload
    );

    /**
    * GetLabelV1
    * Get label information
    * Returns label information and a list of contents associated with the label.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission). Only contents
    * that the user is permitted to view is returned.
    *
    * @param name Name of the label to query.
    * @param type The type of contents that are to be returned.
    * @param start The starting offset for the results.
    * @param limit The number of results to be returned.
    */
    @RequestLine("GET /rest/api/label?name={name}&type={type}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    LabelDetails getLabelV1(
            @NonNull @Param("name") String name,
            @Nullable @Param("type") String type,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetGroupV1
    * Get groups
    * Returns all user groups. The returned groups are ordered alphabetically in
    * ascending order by group name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param start The starting index of the returned groups.
    * @param limit The maximum number of groups to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param accessType The group permission level for which to filter results.
    */
    @RequestLine("GET /rest/api/group?start={start}&limit={limit}&accessType={accessType}")
    @Headers({
        "Accept: application/json"
    })
    GroupArrayWithLinks getGroupV1(
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("accessType") String accessType
    );

    /**
    * PostGroupV1
    * Create new user group
    * Creates a new user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param payload Name of the group that is to be created.
    */
    @RequestLine("POST /rest/api/group")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Group postGroupV1(
            @NonNull GroupName payload
    );

    /**
    * GetGroupByIDV1
    * Get group
    * Returns a user group for a given group id.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param id The id of the group.
    */
    @RequestLine("GET /rest/api/group/by-id?id={id}")
    @Headers({
        "Accept: application/json"
    })
    Group getGroupByIdv1(
            @NonNull @Param("id") String id
    );

    /**
    * DeleteGroupByIDV1
    * Delete user group
    * Delete user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param id Id of the group to delete.
    */
    @RequestLine("DELETE /rest/api/group/by-id?id={id}")
    void deleteGroupByIdv1(
            @NonNull @Param("id") String id
    );

    /**
    * GetGroupPickerV1
    * Search groups by partial query
    * Get search results of groups by partial query provided.
    *
    * @param query the search term used to query results.
    * @param start The starting index of the returned groups.
    * @param limit The maximum number of groups to return per page.
    * Note, this is restricted to a maximum limit of 200 groups.
    * @param shouldReturnTotalSize Whether to include total size parameter in the results.
    * Note, fetching total size property is an expensive operation; use it if your use case needs this value.
    */
    @RequestLine("GET /rest/api/group/picker?query={query}&start={start}&limit={limit}&shouldReturnTotalSize={shouldReturnTotalSize}")
    @Headers({
        "Accept: application/json"
    })
    GroupArrayWithLinks getGroupPickerV1(
            @NonNull @Param("query") String query,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("shouldReturnTotalSize") Boolean shouldReturnTotalSize
    );

    /**
    * GetGroupByGroupIDMembersByGroupIDV1
    * Get group members
    * Returns the users that are members of a group.
    * 
    * Use updated Get group API
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param groupId The id of the group to be queried for its members.
    * @param start The starting index of the returned users.
    * @param limit The maximum number of users to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param shouldReturnTotalSize Whether to include total size parameter in the results.
    * Note, fetching total size property is an expensive operation; use it if your use case needs this value.
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    *   - `personalSpace` returns the user's personal space, if it exists.
    *   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.
    */
    @RequestLine("GET /rest/api/group/{groupId}/membersByGroupId?start={start}&limit={limit}&shouldReturnTotalSize={shouldReturnTotalSize}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    UserArray getGroupByGroupIdmembersByGroupIdv1(
            @NonNull @Param("groupId") String groupId,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("shouldReturnTotalSize") Boolean shouldReturnTotalSize,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * PostGroupUserByGroupIDV1
    * Add member to group by groupId
    * Adds a user as a member in a group represented by its groupId
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param groupId GroupId of the group whose membership is updated
    * @param payload AccountId of the user who needs to be added as member.
    */
    @RequestLine("POST /rest/api/group/userByGroupId?groupId={groupId}")
    @Headers({
        "Content-Type: application/json"
    })
    void postGroupUserByGroupIdv1(
            @NonNull @Param("groupId") String groupId,
            @NonNull AccountId payload
    );

    /**
    * DeleteGroupUserByGroupIDV1
    * Remove member from group using group id
    * Remove user as a member from a group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param groupId Id of the group whose membership is updated.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    */
    @RequestLine("DELETE /rest/api/group/userByGroupId?groupId={groupId}&accountId={accountId}&key={key}&username={username}")
    void deleteGroupUserByGroupIdv1(
            @NonNull @Param("groupId") String groupId,
            @NonNull @Param("accountId") String accountId,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username
    );

    /**
    * GetLongtaskV1
    * Get long-running tasks
    * Returns information about all active long-running tasks (e.g. space export),
    * such as how long each task has been running and the percentage of each task
    * that has completed.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param key The key of the tasks.
    * @param start The starting index of the returned tasks.
    * @param limit The maximum number of tasks to return per page. Note, this may be
    * restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/longtask?key={key}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    LongTaskStatusArray getLongtaskV1(
            @Nullable @Param("key") String key,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetLongtaskByIDV1
    * Get long-running task
    * Returns information about an active long-running task (e.g. space export),
    * such as how long it has been running and the percentage of the task that
    * has completed.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param id The ID of the task.
    */
    @RequestLine("GET /rest/api/longtask/{id}")
    @Headers({
        "Accept: application/json"
    })
    LongTaskStatusWithLinks getLongtaskByIdv1(
            @NonNull @Param("id") String id
    );

    /**
    * GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1
    * Find target entities related to a source entity
    * Returns all target entities that have a particular relationship to the
    * source entity. Note, relationships are one way.
    * 
    * For example, the following method finds all content that the current user
    * has an 'ignore' relationship with:
    * `GET /wiki/rest/api/relation/ignore/from/user/current/to/content`
    * Note, 'ignore' is an example custom relationship type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param relationName The name of the relationship. This method supports relationships created via
    * [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).
    * Note, this method does not support 'like' or 'favourite' relationships.
    * @param sourceType The source entity type of the relationship.
    * @param sourceKey The identifier for the source entity:
    * 
    * - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `sourceType` is 'content', then specify the content ID.
    * - If `sourceType` is 'space', then specify the space key.
    * @param targetType The target entity type of the relationship.
    * @param sourceStatus The status of the source. This parameter is only used when the
    * `sourceType` is 'content'.
    * @param targetStatus The status of the target. This parameter is only used when the
    * `targetType` is 'content'.
    * @param sourceVersion The version of the source. This parameter is only used when the
    * `sourceType` is 'content' and the `sourceStatus` is 'historical'.
    * @param targetVersion The version of the target. This parameter is only used when the
    * `targetType` is 'content' and the `targetStatus` is 'historical'.
    * @param expand A multi-value parameter indicating which properties of the response
    * object to expand.
    * 
    * - `relationData` returns information about the relationship, such as
    * who created it and when it was created.
    * - `source` returns the source entity.
    * - `target` returns the target entity.
    * @param start The starting index of the returned relationships.
    * @param limit The maximum number of relationships to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}?sourceStatus={sourceStatus}&targetStatus={targetStatus}&sourceVersion={sourceVersion}&targetVersion={targetVersion}&expand={expand}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    RelationArray getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1(
            @NonNull @Param("relationName") String relationName,
            @NonNull @Param("sourceType") String sourceType,
            @NonNull @Param("sourceKey") String sourceKey,
            @NonNull @Param("targetType") String targetType,
            @Nullable @Param("sourceStatus") String sourceStatus,
            @Nullable @Param("targetStatus") String targetStatus,
            @Nullable @Param("sourceVersion") Integer sourceVersion,
            @Nullable @Param("targetVersion") Integer targetVersion,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Find relationship from source to target
    * Find whether a particular type of relationship exists from a source
    * entity to a target entity. Note, relationships are one way.
    * 
    * For example, you can use this method to find whether the current user has
    * selected a particular page as a favorite (i.e. 'save for later'):
    * `GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123`
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param relationName The name of the relationship. This method supports the 'favourite'
    * (i.e. 'save for later') relationship as well as any other relationship
    * types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).
    * @param sourceType The source entity type of the relationship. This must be 'user', if
    * the `relationName` is 'favourite'.
    * @param sourceKey - The identifier for the source entity:
    * 
    * - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `sourceType` is 'content', then specify the content ID.
    * - If `sourceType` is 'space', then specify the space key.
    * @param targetType The target entity type of the relationship. This must be 'space' or
    * 'content', if the `relationName` is 'favourite'.
    * @param targetKey The identifier for the target entity:
    * 
    * - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `targetType` is 'content', then specify the content ID.
    * - If `targetType` is 'space', then specify the space key.
    * @param sourceStatus The status of the source. This parameter is only used when the
    * `sourceType` is 'content'.
    * @param targetStatus The status of the target. This parameter is only used when the
    * `targetType` is 'content'.
    * @param sourceVersion The version of the source. This parameter is only used when the
    * `sourceType` is 'content' and the `sourceStatus` is 'historical'.
    * @param targetVersion The version of the target. This parameter is only used when the
    * `targetType` is 'content' and the `targetStatus` is 'historical'.
    * @param expand A multi-value parameter indicating which properties of the response
    * object to expand.
    * 
    * - `relationData` returns information about the relationship, such as
    * who created it and when it was created.
    * - `source` returns the source entity.
    * - `target` returns the target entity.
    */
    @RequestLine("GET /rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}?sourceStatus={sourceStatus}&targetStatus={targetStatus}&sourceVersion={sourceVersion}&targetVersion={targetVersion}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    Relation getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(
            @NonNull @Param("relationName") String relationName,
            @NonNull @Param("sourceType") String sourceType,
            @NonNull @Param("sourceKey") String sourceKey,
            @NonNull @Param("targetType") String targetType,
            @NonNull @Param("targetKey") String targetKey,
            @Nullable @Param("sourceStatus") String sourceStatus,
            @Nullable @Param("targetStatus") String targetStatus,
            @Nullable @Param("sourceVersion") Integer sourceVersion,
            @Nullable @Param("targetVersion") Integer targetVersion,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Create relationship
    * Creates a relationship between two entities (user, space, content). The
    * 'favourite' relationship is supported by default, but you can use this method
    * to create any type of relationship between two entities.
    * 
    * For example, the following method creates a 'sibling' relationship between
    * two pieces of content:
    * `PUT /wiki/rest/api/relation/sibling/from/content/123/to/content/456`
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param relationName The name of the relationship. This method supports the 'favourite'
    * (i.e. 'save for later') relationship. You can also specify any other
    * value for this parameter to create a custom relationship type.
    * @param sourceType The source entity type of the relationship. This must be 'user', if
    * the `relationName` is 'favourite'.
    * @param sourceKey - The identifier for the source entity:
    * 
    * - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `sourceType` is 'content', then specify the content ID.
    * - If `sourceType` is 'space', then specify the space key.
    * @param targetType The target entity type of the relationship. This must be 'space' or
    * 'content', if the `relationName` is 'favourite'.
    * @param targetKey - The identifier for the target entity:
    * 
    * - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `targetType` is 'content', then specify the content ID.
    * - If `targetType` is 'space', then specify the space key.
    * @param sourceStatus The status of the source. This parameter is only used when the
    * `sourceType` is 'content'.
    * @param targetStatus The status of the target. This parameter is only used when the
    * `targetType` is 'content'.
    * @param sourceVersion The version of the source. This parameter is only used when the
    * `sourceType` is 'content' and the `sourceStatus` is 'historical'.
    * @param targetVersion The version of the target. This parameter is only used when the
    * `targetType` is 'content' and the `targetStatus` is 'historical'.
    */
    @RequestLine("PUT /rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}?sourceStatus={sourceStatus}&targetStatus={targetStatus}&sourceVersion={sourceVersion}&targetVersion={targetVersion}")
    @Headers({
        "Accept: application/json"
    })
    Relation putRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(
            @NonNull @Param("relationName") String relationName,
            @NonNull @Param("sourceType") String sourceType,
            @NonNull @Param("sourceKey") String sourceKey,
            @NonNull @Param("targetType") String targetType,
            @NonNull @Param("targetKey") String targetKey,
            @Nullable @Param("sourceStatus") String sourceStatus,
            @Nullable @Param("targetStatus") String targetStatus,
            @Nullable @Param("sourceVersion") Integer sourceVersion,
            @Nullable @Param("targetVersion") Integer targetVersion
    );

    /**
    * DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Delete relationship
    * Deletes a relationship between two entities (user, space, content).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    * For favourite relationships, the current user can only delete their own
    * favourite relationships. A space administrator can delete favourite
    * relationships for any user.
    *
    * @param relationName The name of the relationship.
    * @param sourceType The source entity type of the relationship. This must be 'user', if
    * the `relationName` is 'favourite'.
    * @param sourceKey - The identifier for the source entity:
    * 
    * - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `sourceType` is 'content', then specify the content ID.
    * - If `sourceType` is 'space', then specify the space key.
    * @param targetType The target entity type of the relationship. This must be 'space' or
    * 'content', if the `relationName` is 'favourite'.
    * @param targetKey - The identifier for the target entity:
    * 
    * - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `targetType` is 'content', then specify the content ID.
    * - If `targetType` is 'space', then specify the space key.
    * @param sourceStatus The status of the source. This parameter is only used when the
    * `sourceType` is 'content'.
    * @param targetStatus The status of the target. This parameter is only used when the
    * `targetType` is 'content'.
    * @param sourceVersion The version of the source. This parameter is only used when the
    * `sourceType` is 'content' and the `sourceStatus` is 'historical'.
    * @param targetVersion The version of the target. This parameter is only used when the
    * `targetType` is 'content' and the `targetStatus` is 'historical'.
    */
    @RequestLine("DELETE /rest/api/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}?sourceStatus={sourceStatus}&targetStatus={targetStatus}&sourceVersion={sourceVersion}&targetVersion={targetVersion}")
    void deleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(
            @NonNull @Param("relationName") String relationName,
            @NonNull @Param("sourceType") String sourceType,
            @NonNull @Param("sourceKey") String sourceKey,
            @NonNull @Param("targetType") String targetType,
            @NonNull @Param("targetKey") String targetKey,
            @Nullable @Param("sourceStatus") String sourceStatus,
            @Nullable @Param("targetStatus") String targetStatus,
            @Nullable @Param("sourceVersion") Integer sourceVersion,
            @Nullable @Param("targetVersion") Integer targetVersion
    );

    /**
    * GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1
    * Find source entities related to a target entity
    * Returns all target entities that have a particular relationship to the
    * source entity. Note, relationships are one way.
    * 
    * For example, the following method finds all users that have a 'collaborator'
    * relationship to a piece of content with an ID of '1234':
    * `GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user`
    * Note, 'collaborator' is an example custom relationship type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param relationName The name of the relationship. This method supports relationships created via
    * [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).
    * Note, this method does not support 'like' or 'favourite' relationships.
    * @param sourceType The source entity type of the relationship.
    * @param targetType The target entity type of the relationship.
    * @param targetKey The identifier for the target entity:
    * 
    * - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or
    * the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the
    * [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)
    * for details.
    * - If `targetType` is 'content', then specify the content ID.
    * - If `targetType` is 'space', then specify the space key.
    * @param sourceStatus The status of the source. This parameter is only used when the
    * `sourceType` is 'content'.
    * @param targetStatus The status of the target. This parameter is only used when the
    * `targetType` is 'content'.
    * @param sourceVersion The version of the source. This parameter is only used when the
    * `sourceType` is 'content' and the `sourceStatus` is 'historical'.
    * @param targetVersion The version of the target. This parameter is only used when the
    * `targetType` is 'content' and the `targetStatus` is 'historical'.
    * @param expand A multi-value parameter indicating which properties of the response
    * object to expand.
    * 
    * - `relationData` returns information about the relationship, such as
    * who created it and when it was created.
    * - `source` returns the source entity.
    * - `target` returns the target entity.
    * @param start The starting index of the returned relationships.
    * @param limit The maximum number of relationships to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/relation/{relationName}/to/{targetType}/{targetKey}/from/{sourceType}?sourceStatus={sourceStatus}&targetStatus={targetStatus}&sourceVersion={sourceVersion}&targetVersion={targetVersion}&expand={expand}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    RelationArray getRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1(
            @NonNull @Param("relationName") String relationName,
            @NonNull @Param("sourceType") String sourceType,
            @NonNull @Param("targetType") String targetType,
            @NonNull @Param("targetKey") String targetKey,
            @Nullable @Param("sourceStatus") String sourceStatus,
            @Nullable @Param("targetStatus") String targetStatus,
            @Nullable @Param("sourceVersion") Integer sourceVersion,
            @Nullable @Param("targetVersion") Integer targetVersion,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetSearchV1
    * Search content
    * Searches for content using the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.** 
    * See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * 
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the entities. Note, only entities that the user has
    * permission to view will be returned.
    *
    * @param cql The CQL query to be used for the search. See
    * [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
    * for instructions on how to build a CQL query.
    * @param cqlcontext The space, content, and content status to execute the search
    * against.
    * 
    * - `spaceKey` Key of the space to search against. Optional.
    * - `contentId` ID of the content to search against. Optional. Must be
    * in the space specified by `spaceKey`.
    * - `contentStatuses` Content statuses to search against. Optional.
    * 
    * Specify these values in an object. For example,
    * `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
    * @param cursor Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
    * @param next 
    * @param prev 
    * @param limit The maximum number of content objects to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param start The start point of the collection to return
    * @param includeArchivedSpaces Whether to include content from archived spaces in the results.
    * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces.
    * @param excerpt The excerpt strategy to apply to the result
    * @param sitePermissionTypeFilter Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator`
    * for external/guest users, and `all` to include all permission types.
    * @param expand 
    */
    @RequestLine("GET /rest/api/search?cql={cql}&cqlcontext={cqlcontext}&cursor={cursor}&next={next}&prev={prev}&limit={limit}&start={start}&includeArchivedSpaces={includeArchivedSpaces}&excludeCurrentSpaces={excludeCurrentSpaces}&excerpt={excerpt}&sitePermissionTypeFilter={sitePermissionTypeFilter}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    SearchPageResponseSearchResult getSearchV1(
            @NonNull @Param("cql") String cql,
            @Nullable @Param("cqlcontext") String cqlcontext,
            @Nullable @Param("cursor") String cursor,
            @Nullable @Param("next") Boolean next,
            @Nullable @Param("prev") Boolean prev,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("includeArchivedSpaces") Boolean includeArchivedSpaces,
            @Nullable @Param("excludeCurrentSpaces") Boolean excludeCurrentSpaces,
            @Nullable @Param("excerpt") String excerpt,
            @Nullable @Param("sitePermissionTypeFilter") String sitePermissionTypeFilter,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetSearchUserV1
    * Search users
    * Searches for users using user-specific queries from the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.
    * 
    * Note that some user fields may be set to null depending on the user's privacy settings.
    * These are: email, profilePicture, displayName, and timeZone.
    *
    * @param cql The CQL query to be used for the search. See
    * [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
    * for instructions on how to build a CQL query.
    * 
    * Example queries:
    *           cql=type=user will return up to 10k users
    *           cql=user="1234" will return user with accountId "1234"
    *           You can also use IN, NOT IN, != operators
    *           cql=user IN ("12", "34") will return users with accountids "12" and "34"
    *           cql=user.fullname~jo will return users with nickname/full name starting with "jo"
    *           cql=user.accountid="123" will return user with accountId "123"
    * @param start The starting index of the returned users.
    * @param limit The maximum number of user objects to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param expand A multi-value parameter indicating which properties of the user to expand.
    * 
    * - `operations` returns the operations for the user, which are used
    * when setting permissions.
    * - `personalSpace` returns the personal space of the user.
    * @param sitePermissionTypeFilter Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator`
    * for external/guest users, and `all` to include all permission types.
    */
    @RequestLine("GET /rest/api/search/user?cql={cql}&start={start}&limit={limit}&expand={expand}&sitePermissionTypeFilter={sitePermissionTypeFilter}")
    @Headers({
        "Accept: application/json"
    })
    SearchPageResponseSearchResult getSearchUserV1(
            @NonNull @Param("cql") String cql,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("sitePermissionTypeFilter") String sitePermissionTypeFilter
    );

    /**
    * GetSettingsLookandfeelV1
    * Get look and feel settings
    * Returns the look and feel settings for the site or a single space. This
    * includes attributes such as the color scheme, padding, and border radius.
    * 
    * The look and feel settings for a space can be inherited from the global
    * look and feel settings or provided by a theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * None
    *
    * @param spaceKey The key of the space for which the look and feel settings will be
    * returned. If this is not set, only the global look and feel settings
    * are returned.
    */
    @RequestLine("GET /rest/api/settings/lookandfeel?spaceKey={spaceKey}")
    @Headers({
        "Accept: application/json"
    })
    LookAndFeelSettings getSettingsLookandfeelV1(
            @Nullable @Param("spaceKey") String spaceKey
    );

    /**
    * PutSettingsLookandfeelV1
    * Select look and feel settings
    * Sets the look and feel settings to the default (global) settings, the
    * custom settings, or the current theme's settings for a space.
    * The custom and theme settings can only be selected if there is already
    * a theme set for a space. Note, the default space settings are inherited
    * from the current global settings.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param payload The look and feel type to be set.
    */
    @RequestLine("PUT /rest/api/settings/lookandfeel")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    LookAndFeelSelection putSettingsLookandfeelV1(
            @NonNull LookAndFeelSelection payload
    );

    /**
    * PostSettingsLookandfeelCustomV1
    * Update look and feel settings
    * Updates the look and feel settings for the site or for a single space.
    * If custom settings exist, they are updated. If no custom settings exist,
    * then a set of custom settings is created.
    * 
    * Note, if a theme is selected for a space, the space look and feel settings
    * are provided by the theme and cannot be overridden.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space for which the look and feel settings will be
    * updated. If this is not set, the global look and feel settings will
    * be updated.
    * @param payload The updated settings. All values for the settings must be included,
    * regardless of whether they are being changed.
    * 
    * One way to create the request body is to copy the settings from the
    * response body of [Get look and feel settings](#api-settings-lookandfeel-get)
    * and modify it as needed.
    */
    @RequestLine("POST /rest/api/settings/lookandfeel/custom?spaceKey={spaceKey}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Object postSettingsLookandfeelCustomV1(
            @Nullable @Param("spaceKey") String spaceKey,
            @NonNull LookAndFeel payload
    );

    /**
    * DeleteSettingsLookandfeelCustomV1
    * Reset look and feel settings
    * Resets the custom look and feel settings for the site or a single space.
    * This changes the values of the custom settings to be the same as the
    * default settings. It does not change which settings (default or custom)
    * are selected. Note, the default space settings are inherited from the
    * current global settings.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space for which the look and feel settings will be
    * reset. If this is not set, the global look and feel settings will
    * be reset.
    */
    @RequestLine("DELETE /rest/api/settings/lookandfeel/custom?spaceKey={spaceKey}")
    void deleteSettingsLookandfeelCustomV1(
            @Nullable @Param("spaceKey") String spaceKey
    );

    /**
    * GetSettingsSystemInfoV1
    * Get system info
    * Returns the system information for the Confluence Cloud tenant. This
    * information is used by Atlassian.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    */
    @RequestLine("GET /rest/api/settings/systemInfo")
    @Headers({
        "Accept: application/json"
    })
    SystemInfoEntity getSettingsSystemInfoV1();

    /**
    * GetSettingsThemeV1
    * Get themes
    * Returns all themes, not including the default theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    * @param start The starting index of the returned themes.
    * @param limit The maximum number of themes to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/settings/theme?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    ThemeArray getSettingsThemeV1(
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetSettingsThemeSelectedV1
    * Get global theme
    * Returns the globally assigned theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    */
    @RequestLine("GET /rest/api/settings/theme/selected")
    @Headers({
        "Accept: application/json"
    })
    Theme getSettingsThemeSelectedV1();

    /**
    * GetSettingsThemeByThemeKeyV1
    * Get theme
    * Returns a theme. This includes information about the theme name,
    * description, and icon.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    * @param themeKey The key of the theme to be returned.
    */
    @RequestLine("GET /rest/api/settings/theme/{themeKey}")
    @Headers({
        "Accept: application/json"
    })
    Theme getSettingsThemeByThemeKeyV1(
            @NonNull @Param("themeKey") String themeKey
    );

    /**
    * PostSpaceV1
    * Create space
    * Creates a new space. Note, currently you cannot set space labels when
    * creating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Create Space(s)' global permission.
    *
    * @param payload The space to be created.
    */
    @RequestLine("POST /rest/api/space")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Space postSpaceV1(
            @NonNull Map<String, Object> payload
    );

    /**
    * PostSpacePrivateV1
    * Create private space
    * Creates a new space that is only visible to the creator. This method is
    * the same as the [Create space](#api-space-post) method with permissions
    * set to the current user only. Note, currently you cannot set space
    * labels when creating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Create Space(s)' global permission.
    *
    * @param payload The space to be created.
    */
    @RequestLine("POST /rest/api/space/_private")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Space postSpacePrivateV1(
            @NonNull Map<String, Object> payload
    );

    /**
    * PutSpaceBySpaceKeyV1
    * Update space
    * Updates the name, description, or homepage of a space.
    * 
    * -   For security reasons, permissions cannot be updated via the API and
    * must be changed via the user interface instead.
    * -   Currently you cannot set space labels when updating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to update.
    * @param payload The updated space.
    */
    @RequestLine("PUT /rest/api/space/{spaceKey}")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Space putSpaceBySpaceKeyV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull Map<String, Object> payload
    );

    /**
    * DeleteSpaceBySpaceKeyV1
    * Delete space
    * Permanently deletes a space without sending it to the trash. Note, the space will be deleted in a long running task.
    * Therefore, the space may not be deleted yet when this method has
    * returned. Clients should poll the status link that is returned in the
    * response until the task completes.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to delete.
    */
    @RequestLine("DELETE /rest/api/space/{spaceKey}")
    void deleteSpaceBySpaceKeyV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * PostSpaceBySpaceKeyPermissionV1
    * Add new permission to space
    * Adds new permission to space.
    * 
    * If the permission to be added is a group permission, the group can be identified
    * by its group name or group id.
    * 
    * Note: Apps cannot access this REST resource - including when utilizing user impersonation.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content.
    * @param payload The permission to be created.
    */
    @RequestLine("POST /rest/api/space/{spaceKey}/permission")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    SpacePermissionV2 postSpaceBySpaceKeyPermissionV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull Map<String, Object> payload
    );

    /**
    * PostSpaceBySpaceKeyPermissionCustomContentV1
    * Add new custom content permission to space
    * Adds new custom content permission to space.
    * 
    * If the permission to be added is a group permission, the group can be identified
    * by its group name or group id.
    * 
    * Note: Only apps can access this REST resource and only make changes to the respective app permissions.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content.
    * @param payload The permissions to be created.
    */
    @RequestLine("POST /rest/api/space/{spaceKey}/permission/custom-content")
    @Headers({
        "Content-Type: application/json"
    })
    void postSpaceBySpaceKeyPermissionCustomContentV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull SpacePermissionCustomContent payload
    );

    /**
    * DeleteSpaceBySpaceKeyPermissionByIDV1
    * Remove a space permission
    * Removes a space permission. Note that removing Read Space permission for a user or group will remove all
    * the space permissions for that user or group.
    * 
    * Note: Apps cannot access this REST resource - including when utilizing user impersonation.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content.
    * @param id Id of the permission to be deleted.
    */
    @RequestLine("DELETE /rest/api/space/{spaceKey}/permission/{id}")
    void deleteSpaceBySpaceKeyPermissionByIdv1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull @Param("id") Long id
    );

    /**
    * GetSpaceBySpaceKeySettingsV1
    * Get space settings
    * Returns the settings of a space. Currently only the
    * `routeOverrideEnabled` setting can be returned.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its settings.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/settings")
    @Headers({
        "Accept: application/json"
    })
    SpaceSettings getSpaceBySpaceKeySettingsV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * PutSpaceBySpaceKeySettingsV1
    * Update space settings
    * Updates the settings for a space. Currently only the
    * `routeOverrideEnabled` setting can be updated.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space whose settings will be updated.
    * @param payload The space settings to update.
    */
    @RequestLine("PUT /rest/api/space/{spaceKey}/settings")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    SpaceSettings putSpaceBySpaceKeySettingsV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull SpaceSettingsUpdate payload
    );

    /**
    * GetSpaceBySpaceKeyStateV1
    * Get space suggested content states
    * Get content states that are suggested in the space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state")
    @Headers({
        "Accept: application/json"
    })
    List<ContentState> getSpaceBySpaceKeyStateV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * GetSpaceBySpaceKeyStateSettingsV1
    * Get content state settings for space
    * Get object describing whether content states are allowed at all, if custom content states or space content states
    * are restricted, and a list of space content states allowed for the space if they are not restricted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state/settings")
    @Headers({
        "Accept: application/json"
    })
    ContentStateSettings getSpaceBySpaceKeyStateSettingsV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * GetSpaceBySpaceKeyStateContentV1
    * Get content in space with given content state
    * Returns all content that has the provided content state in a space.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its content state settings.
    * @param stateId The id of the content state to filter content by
    * @param expand A multi-value parameter indicating which properties of the content to expand.
    * Options include: space, version, history, children, etc.
    * 
    * Ex: space,version
    * @param limit Maximum number of results to return
    * @param start Number of result to start returning. (0 indexed)
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/state/content?stateId={stateId}&expand={expand}&limit={limit}&start={start}")
    @Headers({
        "Accept: application/json"
    })
    ContentArray getSpaceBySpaceKeyStateContentV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull @Param("stateId") Integer stateId,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("start") Integer start
    );

    /**
    * GetSpaceBySpaceKeyThemeV1
    * Get space theme
    * Returns the theme selected for a space, if one is set. If no space
    * theme is set, this means that the space is inheriting the global look
    * and feel settings.
    * 
    * **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
    *
    * @param spaceKey The key of the space to be queried for its theme.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/theme")
    @Headers({
        "Accept: application/json"
    })
    Theme getSpaceBySpaceKeyThemeV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * PutSpaceBySpaceKeyThemeV1
    * Set space theme
    * Sets the theme for a space. Note, if you want to reset the space theme to
    * the default Confluence theme, use the 'Reset space theme' method instead
    * of this method.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to set the theme for.
    * @param payload 
    */
    @RequestLine("PUT /rest/api/space/{spaceKey}/theme")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Theme putSpaceBySpaceKeyThemeV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull ThemeUpdate payload
    );

    /**
    * DeleteSpaceBySpaceKeyThemeV1
    * Reset space theme
    * Resets the space theme. This means that the space will inherit the
    * global look and feel settings
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spaceKey The key of the space to reset the theme for.
    */
    @RequestLine("DELETE /rest/api/space/{spaceKey}/theme")
    void deleteSpaceBySpaceKeyThemeV1(
            @NonNull @Param("spaceKey") String spaceKey
    );

    /**
    * GetSpaceBySpaceKeyWatchV1
    * Get space watchers
    * Returns a list of watchers of a space
    *
    * @param spaceKey The key of the space to get watchers.
    * @param start The start point of the collection to return.
    * @param limit The limit of the number of items to return, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/watch?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    SpaceWatchArray getSpaceBySpaceKeyWatchV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("start") String start,
            @Nullable @Param("limit") String limit
    );

    /**
    * GetSpaceBySpaceKeyLabelV1
    * Get Space Labels
    * Returns a list of labels associated with a space. Can provide a prefix as well as other filters to
    * select different types of labels.
    *
    * @param spaceKey The key of the space to get labels for.
    * @param prefix Filters the results to labels with the specified prefix. If this parameter
    * is not specified, then labels with any prefix will be returned.
    * 
    * - `global` prefix is used by labels that are on content within the provided space.
    * - `my` prefix can be explicitly added by a user when adding a label
    * via the UI, e.g. 'my:example-label'.
    * - `team` prefix is used for labels applied to the space.
    * @param start The starting index of the returned labels.
    * @param limit The maximum number of labels to return per page. Note,
    * this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/label?prefix={prefix}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    LabelArray getSpaceBySpaceKeyLabelV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("prefix") String prefix,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PostSpaceBySpaceKeyLabelV1
    * Add labels to a space
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spaceKey The key of the space to add labels to.
    * @param payload The labels to add to the content.
    */
    @RequestLine("POST /rest/api/space/{spaceKey}/label")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    LabelArray postSpaceBySpaceKeyLabelV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull List<Map<String, Object>> payload
    );

    /**
    * DeleteSpaceBySpaceKeyLabelV1
    * Remove label from a space
    *
    * @param spaceKey The key of the space to remove a labels from.
    * @param name The name of the label to remove
    * @param prefix The prefix of the label to remove. If not provided defaults to global.
    */
    @RequestLine("DELETE /rest/api/space/{spaceKey}/label?name={name}&prefix={prefix}")
    void deleteSpaceBySpaceKeyLabelV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @NonNull @Param("name") String name,
            @Nullable @Param("prefix") String prefix
    );

    /**
    * PutTemplateV1
    * Update content template
    * Updates a content template. Note, blueprint templates cannot be updated
    * via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to update a space template or 'Confluence Administrator'
    * global permission to update a global template.
    *
    * @param payload The updated content template.
    */
    @RequestLine("PUT /rest/api/template")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentTemplate putTemplateV1(
            @NonNull Map<String, Object> payload
    );

    /**
    * PostTemplateV1
    * Create content template
    * Creates a new content template. Note, blueprint templates cannot be created via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to create a space template or 'Confluence Administrator'
    * global permission to create a global template.
    *
    * @param payload The content template to be created.
    * The content body must be in 'storage' format.
    */
    @RequestLine("POST /rest/api/template")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    ContentTemplate postTemplateV1(
            @NonNull Map<String, Object> payload
    );

    /**
    * GetTemplateBlueprintV1
    * Get blueprint templates
    * Returns all templates provided by blueprints. Use this method to retrieve
    * all global blueprint templates or all blueprint templates in a space.
    * 
    * Note, all global blueprints are inherited by each space. Space blueprints
    * can be customised without affecting the global blueprints.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view blueprints for the space and permission
    * to access the Confluence site ('Can use' global permission) to view global blueprints.
    *
    * @param spaceKey The key of the space to be queried for templates. If the `spaceKey`
    * is not specified, global blueprint templates will be returned.
    * @param start The starting index of the returned templates.
    * @param limit The maximum number of templates to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param expand A multi-value parameter indicating which properties of the template
    * to expand.
    * 
    * - `body` or `body.storage` returns the content of the template in storage format.
    */
    @RequestLine("GET /rest/api/template/blueprint?spaceKey={spaceKey}&start={start}&limit={limit}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    BlueprintTemplateArray getTemplateBlueprintV1(
            @Nullable @Param("spaceKey") String spaceKey,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetTemplatePageV1
    * Get content templates
    * Returns all content templates. Use this method to retrieve all global
    * content templates or all content templates in a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param spaceKey The key of the space to be queried for templates. If the `spaceKey`
    * is not specified, global templates will be returned.
    * @param start The starting index of the returned templates.
    * @param limit The maximum number of templates to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param expand A multi-value parameter indicating which properties of the template
    * to expand.
    * 
    * - `body` or `body.storage` returns the content of the template in storage format.
    */
    @RequestLine("GET /rest/api/template/page?spaceKey={spaceKey}&start={start}&limit={limit}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    ContentTemplateArray getTemplatePageV1(
            @Nullable @Param("spaceKey") String spaceKey,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetTemplateByContentTemplateIDV1
    * Get content template
    * Returns a content template. This includes information about template,
    * like the name, the space or blueprint that the template is in, the body
    * of the template, and more.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param contentTemplateId The ID of the content template to be returned.
    * @param expand A multi-value parameter indicating which properties of the template
    * to expand.
    * 
    * - `body` or `body.storage` returns the content of the template in storage format.
    */
    @RequestLine("GET /rest/api/template/{contentTemplateId}?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    ContentTemplate getTemplateByContentTemplateIdv1(
            @NonNull @Param("contentTemplateId") String contentTemplateId,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * DeleteTemplateByContentTemplateIDV1
    * Remove template
    * Deletes a template. This results in different actions depending on the
    * type of template:
    * 
    * - If the template is a content template, it is deleted.
    * - If the template is a modified space-level blueprint template, it reverts
    * to the template inherited from the global-level blueprint template.
    * - If the template is a modified global-level blueprint template, it reverts
    * to the default global-level blueprint template.
    * 
    *  Note, unmodified blueprint templates cannot be deleted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    *         'Admin' permission for the space to delete a space template or 'Confluence Administrator'
    *         global permission to delete a global template.
    *
    * @param contentTemplateId The ID of the template to be deleted.
    */
    @RequestLine("DELETE /rest/api/template/{contentTemplateId}")
    void deleteTemplateByContentTemplateIdv1(
            @NonNull @Param("contentTemplateId") String contentTemplateId
    );

    /**
    * GetUserV1
    * Get user
    * Returns a user. This includes information about the user, such as the
    * display name, account ID, profile picture, and more. The information returned may be
    * restricted by the user's profile visibility settings.
    * 
    * **Note:** to add, edit, or delete users in your organization, see the
    * [user management REST API](/cloud/admin/user-management/about/).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    *   - `personalSpace` returns the user's personal space, if it exists.
    *   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.
    */
    @RequestLine("GET /rest/api/user?accountId={accountId}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    Map<String, Object> getUserV1(
            @NonNull @Param("accountId") String accountId,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetUserAnonymousV1
    * Get anonymous user
    * Returns information about how anonymous users are represented, like the
    * profile picture and display name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    */
    @RequestLine("GET /rest/api/user/anonymous?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    UserAnonymous getUserAnonymousV1(
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetUserCurrentV1
    * Get current user
    * Returns the currently logged-in user. This includes information about
    * the user, like the display name, userKey, account ID, profile picture,
    * and more.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    *   - `personalSpace` returns the user's personal space, if it exists.
    *   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.
    */
    @RequestLine("GET /rest/api/user/current?expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    Map<String, Object> getUserCurrentV1(
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetUserMemberofV1
    * Get group memberships for user
    * Returns the groups that a user is a member of.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    * @param start The starting index of the returned groups.
    * @param limit The maximum number of groups to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/user/memberof?accountId={accountId}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    GroupArrayWithLinks getUserMemberofV1(
            @NonNull @Param("accountId") String accountId,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetUserBulkV1
    * Get multiple users using ids
    * Returns user details for the ids provided in the request.
    * Currently this API returns a maximum of 100 results.
    * If more than 100 account ids are passed in, then the first 100 will be returned.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param accountId A list of accountId's of users to be returned.
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    *   - `personalSpace` returns the user's personal space, if it exists.
    *   - `isExternalCollaborator`(@deprecated) use `isGuest` instead to return whether the user is a guest.
    */
    @RequestLine("GET /rest/api/user/bulk?accountId={accountId}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    BulkUserLookupArray getUserBulkV1(
            @NonNull @Param("accountId") String accountId,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetUserWatchContentByContentIDV1
    * Get content watch status
    * Returns whether a user is watching a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param contentId The ID of the content to be queried for whether the specified user is
    * watching it.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("GET /rest/api/user/watch/content/{contentId}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "Accept: application/json"
    })
    UserWatch getUserWatchContentByContentIdv1(
            @NonNull @Param("contentId") String contentId,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * PostUserWatchContentByContentIDV1
    * Add content watcher
    * Adds a user as a watcher to a piece of content. Choose the user by doing
    * one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param contentId The ID of the content to add the watcher to.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("POST /rest/api/user/watch/content/{contentId}?key={key}&username={username}&accountId={accountId}")
    void postUserWatchContentByContentIdv1(
            @NonNull @Param("contentId") String contentId,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * DeleteUserWatchContentByContentIDV1
    * Remove content watcher
    * Removes a user as a watcher from a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param xAtlassianToken Note, you must add header when making a
    * request, as this operation has XSRF protection.
    * @param contentId The ID of the content to remove the watcher from.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("DELETE /rest/api/user/watch/content/{contentId}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "X-Atlassian-Token: {xAtlassianToken}"
    })
    void deleteUserWatchContentByContentIdv1(
            @NonNull @Param("xAtlassianToken") String xAtlassianToken,
            @NonNull @Param("contentId") String contentId,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * GetUserWatchLabelByLabelNameV1
    * Get label watch status
    * Returns whether a user is watching a label. Choose the user by doing one
    * of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param labelName The name of the label to be queried for whether the specified user is
    * watching it.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("GET /rest/api/user/watch/label/{labelName}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "Accept: application/json"
    })
    UserWatch getUserWatchLabelByLabelNameV1(
            @NonNull @Param("labelName") String labelName,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * PostUserWatchLabelByLabelNameV1
    * Add label watcher
    * Adds a user as a watcher to a label. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param xAtlassianToken Note, you must add header when making a
    * request, as this operation has XSRF protection.
    * @param labelName The name of the label to add the watcher to.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("POST /rest/api/user/watch/label/{labelName}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "X-Atlassian-Token: {xAtlassianToken}"
    })
    void postUserWatchLabelByLabelNameV1(
            @NonNull @Param("xAtlassianToken") String xAtlassianToken,
            @NonNull @Param("labelName") String labelName,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * DeleteUserWatchLabelByLabelNameV1
    * Remove label watcher
    * Removes a user as a watcher from a label. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param labelName The name of the label to remove the watcher from.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("DELETE /rest/api/user/watch/label/{labelName}?key={key}&username={username}&accountId={accountId}")
    void deleteUserWatchLabelByLabelNameV1(
            @NonNull @Param("labelName") String labelName,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * GetUserWatchSpaceBySpaceKeyV1
    * Get space watch status
    * Returns whether a user is watching a space. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spaceKey The key of the space to be queried for whether the specified user is
    * watching it.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("GET /rest/api/user/watch/space/{spaceKey}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "Accept: application/json"
    })
    UserWatch getUserWatchSpaceBySpaceKeyV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * PostUserWatchSpaceBySpaceKeyV1
    * Add space watcher
    * Adds a user as a watcher to a space. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param xAtlassianToken Note, you must add header when making a
    * request, as this operation has XSRF protection.
    * @param spaceKey The key of the space to add the watcher to.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("POST /rest/api/user/watch/space/{spaceKey}?key={key}&username={username}&accountId={accountId}")
    @Headers({
        "X-Atlassian-Token: {xAtlassianToken}"
    })
    void postUserWatchSpaceBySpaceKeyV1(
            @NonNull @Param("xAtlassianToken") String xAtlassianToken,
            @NonNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * DeleteUserWatchSpaceBySpaceKeyV1
    * Remove space watch
    * Removes a user as a watcher from a space. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spaceKey The key of the space to remove the watcher from.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    */
    @RequestLine("DELETE /rest/api/user/watch/space/{spaceKey}?key={key}&username={username}&accountId={accountId}")
    void deleteUserWatchSpaceBySpaceKeyV1(
            @NonNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username,
            @Nullable @Param("accountId") String accountId
    );

    /**
    * GetUserEmailV1
    * Get user email address
    * Returns a user's email address regardless of the user’s profile visibility settings. For Connect apps, this API is only available to apps approved by
    * Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
    * For Forge apps, this API only supports access via asApp() requests.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param accountId The account ID of the user, which uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required.
    */
    @RequestLine("GET /rest/api/user/email?accountId={accountId}")
    @Headers({
        "Accept: application/json"
    })
    AccountIDEmailRecord getUserEmailV1(
            @NonNull @Param("accountId") String accountId
    );

    /**
    * GetUserEmailBulkV1
    * Get user email addresses in batch
    * Returns a user's email address regardless of the user’s profile visibility settings. For Connect apps, this API is only available to apps approved by
    * Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
    * For Forge apps, this API only supports access via asApp() requests.
    * 
    * Any accounts which are not available will not be included in the result.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param accountId The account IDs of the users.
    */
    @RequestLine("GET /rest/api/user/email/bulk?accountId={accountId}")
    @Headers({
        "Accept: application/json"
    })
    List<AccountIDEmailRecord> getUserEmailBulkV1(
            @NonNull @Param("accountId") List<String> accountId
    );

    /**
    * GetAnalyticsContentByContentIDViewsV1
    * Get views
    * Get the total number of views a piece of content has.
    *
    * @param contentId The ID of the content to get the views for.
    * @param fromDate The number of views for the content since the date.
    */
    @RequestLine("GET /rest/api/analytics/content/{contentId}/views?fromDate={fromDate}")
    @Headers({
        "Accept: application/json"
    })
    GetViewsR200 getAnalyticsContentByContentIdviewsV1(
            @NonNull @Param("contentId") String contentId,
            @Nullable @Param("fromDate") String fromDate
    );

    /**
    * GetAnalyticsContentByContentIDViewersV1
    * Get viewers
    * Get the total number of distinct viewers a piece of content has.
    *
    * @param contentId The ID of the content to get the viewers for.
    * @param fromDate The number of views for the content since the date.
    */
    @RequestLine("GET /rest/api/analytics/content/{contentId}/viewers?fromDate={fromDate}")
    @Headers({
        "Accept: application/json"
    })
    GetViewersR200 getAnalyticsContentByContentIdviewersV1(
            @NonNull @Param("contentId") String contentId,
            @Nullable @Param("fromDate") String fromDate
    );

    /**
    * GetUserByUserIDPropertyV1
    * Get user properties
    * Returns the properties for a user as list of property keys. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user to be queried for its properties.
    * @param start The starting index of the returned properties.
    * @param limit The maximum number of properties to return per page.
    * Note, this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/user/{userId}/property?start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    UserPropertyKeyArray getUserByUserIdpropertyV1(
            @NonNull @Param("userId") String userId,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * GetUserByUserIDPropertyByKeyV1
    * Get user property
    * Returns the property corresponding to `key` for a user. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user to be queried for its properties.
    * @param key The key of the user property.
    */
    @RequestLine("GET /rest/api/user/{userId}/property/{key}")
    @Headers({
        "Accept: application/json"
    })
    UserProperty getUserByUserIdpropertyByKeyV1(
            @NonNull @Param("userId") String userId,
            @NonNull @Param("key") String key
    );

    /**
    * PutUserByUserIDPropertyByKeyV1
    * Update user property
    * Updates a property for the given user. Note, you cannot update the key of a user property, only the value.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    * @param payload The user property to be updated.
    */
    @RequestLine("PUT /rest/api/user/{userId}/property/{key}")
    @Headers({
        "Content-Type: application/json"
    })
    void putUserByUserIdpropertyByKeyV1(
            @NonNull @Param("userId") String userId,
            @NonNull @Param("key") String key,
            @NonNull UserPropertyUpdate payload
    );

    /**
    * PostUserByUserIDPropertyByKeyV1
    * Create user property by key
    * Creates a property for a user. For more information  about user properties, see [Confluence entity properties]
    * (https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * `Note:` the number of properties which could be created per app in a tenant for each user might be
    * restricted by fixed system limits.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    * @param payload The user property to be created.
    */
    @RequestLine("POST /rest/api/user/{userId}/property/{key}")
    @Headers({
        "Content-Type: application/json"
    })
    void postUserByUserIdpropertyByKeyV1(
            @NonNull @Param("userId") String userId,
            @NonNull @Param("key") String key,
            @NonNull UserPropertyCreate payload
    );

    /**
    * DeleteUserByUserIDPropertyByKeyV1
    * Delete user property
    * Deletes a property for the given user.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param userId The account ID of the user. The accountId uniquely identifies the user across all Atlassian
    * products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192
    * @param key The key of the user property.
    */
    @RequestLine("DELETE /rest/api/user/{userId}/property/{key}")
    void deleteUserByUserIdpropertyByKeyV1(
            @NonNull @Param("userId") String userId,
            @NonNull @Param("key") String key
    );

}
