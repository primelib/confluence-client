// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.SearchPageResponseSearchResult;
import io.github.primelib.confluence4j.rest.v1.operations.GetSearchUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSearchV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientSearchConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientSearchConsumerApi {
    private final ConfluenceRestClientSearchApi api;

    public ConfluenceRestClientSearchConsumerApi(ConfluenceRestClientSearchApi api) {
        this.api = api;
    }


    /**
    * GetSearchV1
    * Search content
    * Searches for content using the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.** 
    * See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * 
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the entities. Note, only entities that the user has
    * permission to view will be returned.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.</li>
    *   <li>cqlcontext: The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`</li>
    *   <li>cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.</li>
    *   <li>next: </li>
    *   <li>prev: </li>
    *   <li>limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>start: The start point of the collection to return</li>
    *   <li>includeArchivedSpaces: Whether to include content from archived spaces in the results.</li>
    *   <li>excludeCurrentSpaces: Whether to exclude current spaces and only show archived spaces.</li>
    *   <li>excerpt: The excerpt strategy to apply to the result</li>
    *   <li>sitePermissionTypeFilter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.</li>
    *   <li>expand: </li>
    * </ul>
    */
    public SearchPageResponseSearchResult GetSearchV1(Consumer<GetSearchV1OperationSpec> spec) {
        GetSearchV1OperationSpec r = new GetSearchV1OperationSpec(spec);
        return api.GetSearchV1(r.cql(), r.cqlcontext(), r.cursor(), r.next(), r.prev(), r.limit(), r.start(), r.includeArchivedSpaces(), r.excludeCurrentSpaces(), r.excerpt(), r.sitePermissionTypeFilter(), r.expand());
    }

    /**
    * GetSearchUserV1
    * Search users
    * Searches for users using user-specific queries from the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.
    * 
    * Note that some user fields may be set to null depending on the user's privacy settings.
    * These are: email, profilePicture, displayName, and timeZone.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user="1234" will return user with accountId "1234"           You can also use IN, NOT IN, != operators           cql=user IN ("12", "34") will return users with accountids "12" and "34"           cql=user.fullname~jo will return users with nickname/full name starting with "jo"           cql=user.accountid="123" will return user with accountId "123"</li>
    *   <li>start: The starting index of the returned users.</li>
    *   <li>limit: The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.</li>
    *   <li>sitePermissionTypeFilter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.</li>
    * </ul>
    */
    public SearchPageResponseSearchResult GetSearchUserV1(Consumer<GetSearchUserV1OperationSpec> spec) {
        GetSearchUserV1OperationSpec r = new GetSearchUserV1OperationSpec(spec);
        return api.GetSearchUserV1(r.cql(), r.start(), r.limit(), r.expand(), r.sitePermissionTypeFilter());
    }

}
