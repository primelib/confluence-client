// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * GetGroupPickerV1
 * <p>
 * Get search results of groups by partial query provided.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class GetGroupPickerV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * the search term used to query results.
     *
     */
    @NonNull
    private String query;

    /**
     * The starting index of the returned groups.
     *
     */
    @Nullable
    private Integer start;

    /**
     * The maximum number of groups to return per page.
     * Note, this is restricted to a maximum limit of 200 groups.
     *
     */
    @Nullable
    private Integer limit;

    /**
     * Whether to include total size parameter in the results.
     * Note, fetching total size property is an expensive operation; use it if your use case needs this value.
     *
     */
    @Nullable
    private Boolean shouldReturnTotalSize;

    /**
     * Constructs a validated instance of {@link GetGroupPickerV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public GetGroupPickerV1OperationSpec(Consumer<GetGroupPickerV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(query, "query is a required parameter!");
    }
}
