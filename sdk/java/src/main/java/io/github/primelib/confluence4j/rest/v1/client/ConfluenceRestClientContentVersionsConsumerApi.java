// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.Version;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDVersionByVersionNumberV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDVersionV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientContentVersionsConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientContentVersionsConsumerApi {
    private final ConfluenceRestClientContentVersionsApi api;

    public ConfluenceRestClientContentVersionsConsumerApi(ConfluenceRestClientContentVersionsApi api) {
        this.api = api;
    }


    /**
    * PostContentByIDVersionV1
    * Restore content version
    * Restores a historical version to be the latest version. That is, a new version
    * is created with the content of the historical version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content for which the history will be restored.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand. By default, the `content` object is expanded.  - `collaborators` returns the users that collaborated on the version. - `content` returns the content for the version.</li>
    *   <li>payload: The content version to be restored.</li>
    * </ul>
    */
    public Version PostContentByIDVersionV1(Consumer<PostContentByIDVersionV1OperationSpec> spec) {
        PostContentByIDVersionV1OperationSpec r = new PostContentByIDVersionV1OperationSpec(spec);
        return api.PostContentByIDVersionV1(r.id(), r.expand(), r.payload());
    }

    /**
    * DeleteContentByIDVersionByVersionNumberV1
    * Delete content version
    * Delete a historical version. This does not delete the changes made to the
    * content in that version, rather the changes for the deleted version are
    * rolled up into the next version. Note, you cannot delete the current version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the version will be deleted from.</li>
    *   <li>versionNumber: The number of the version to be deleted. The version number starts from 1 up to current version.</li>
    * </ul>
    */
    public void DeleteContentByIDVersionByVersionNumberV1(Consumer<DeleteContentByIDVersionByVersionNumberV1OperationSpec> spec) {
        DeleteContentByIDVersionByVersionNumberV1OperationSpec r = new DeleteContentByIDVersionByVersionNumberV1OperationSpec(spec);
        api.DeleteContentByIDVersionByVersionNumberV1(r.id(), r.versionNumber());
    }

}
