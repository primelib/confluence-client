// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.AccountId;
import io.github.primelib.confluence4j.rest.v1.models.Group;
import io.github.primelib.confluence4j.rest.v1.models.GroupArrayWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.GroupName;
import io.github.primelib.confluence4j.rest.v1.models.UserArray;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ConfluenceRestClientGroupApi
 *
 * **[WARNING](https://support.atlassian.com/user-management/docs/create-and-update-groups/) The standard Atlassian group names are default names only and can be edited or deleted.** For example, an admin or Atlassian support could delete the default group jira-software-users or rename it to jsw-users at any point.
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientGroupApi {

    /**
    * GetGroupV1
    * Get groups
    * Returns all user groups. The returned groups are ordered alphabetically in
    * ascending order by group name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param start The starting index of the returned groups.
    * @param limit The maximum number of groups to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param accessType The group permission level for which to filter results.
    */
    @RequestLine("GET /wiki/rest/api/group?start={start}&limit={limit}&accessType={accessType}")
    @Headers({
        "Accept: application/json"
    })
    GroupArrayWithLinks GetGroupV1(
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("accessType") String accessType
    );

    /**
    * PostGroupV1
    * Create new user group
    * Creates a new user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param payload Name of the group that is to be created.
    */
    @RequestLine("POST /wiki/rest/api/group")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    Group PostGroupV1(
            @NotNull GroupName payload
    );

    /**
    * GetGroupByIDV1
    * Get group
    * Returns a user group for a given group id.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param id The id of the group.
    */
    @RequestLine("GET /wiki/rest/api/group/by-id?id={id}")
    @Headers({
        "Accept: application/json"
    })
    Group GetGroupByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * DeleteGroupByIDV1
    * Delete user group
    * Delete user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param id Id of the group to delete.
    */
    @RequestLine("DELETE /wiki/rest/api/group/by-id?id={id}")
    void DeleteGroupByIDV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetGroupPickerV1
    * Search groups by partial query
    * Get search results of groups by partial query provided.
    *
    * @param query the search term used to query results.
    * @param start The starting index of the returned groups.
    * @param limit The maximum number of groups to return per page.
    * Note, this is restricted to a maximum limit of 200 groups.
    * @param shouldReturnTotalSize Whether to include total size parameter in the results.
    * Note, fetching total size property is an expensive operation; use it if your use case needs this value.
    */
    @RequestLine("GET /wiki/rest/api/group/picker?query={query}&start={start}&limit={limit}&shouldReturnTotalSize={shouldReturnTotalSize}")
    @Headers({
        "Accept: application/json"
    })
    GroupArrayWithLinks GetGroupPickerV1(
            @NotNull @Param("query") String query,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("shouldReturnTotalSize") Boolean shouldReturnTotalSize
    );

    /**
    * GetGroupByGroupIDMembersByGroupIDV1
    * Get group members
    * Returns the users that are members of a group.
    * 
    * Use updated Get group API
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param groupId The id of the group to be queried for its members.
    * @param start The starting index of the returned users.
    * @param limit The maximum number of users to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param shouldReturnTotalSize Whether to include total size parameter in the results.
    * Note, fetching total size property is an expensive operation; use it if your use case needs this value.
    * @param expand A multi-value parameter indicating which properties of the user to
    * expand.
    * 
    *   - `operations` returns the operations that the user is allowed to do.
    *   - `personalSpace` returns the user's personal space, if it exists.
    *   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.
    */
    @RequestLine("GET /wiki/rest/api/group/{groupId}/membersByGroupId?start={start}&limit={limit}&shouldReturnTotalSize={shouldReturnTotalSize}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    UserArray GetGroupByGroupIDMembersByGroupIDV1(
            @NotNull @Param("groupId") String groupId,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("shouldReturnTotalSize") Boolean shouldReturnTotalSize,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * PostGroupUserByGroupIDV1
    * Add member to group by groupId
    * Adds a user as a member in a group represented by its groupId
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param groupId GroupId of the group whose membership is updated
    * @param payload AccountId of the user who needs to be added as member.
    */
    @RequestLine("POST /wiki/rest/api/group/userByGroupId?groupId={groupId}")
    @Headers({
        "Content-Type: application/json"
    })
    void PostGroupUserByGroupIDV1(
            @NotNull @Param("groupId") String groupId,
            @NotNull AccountId payload
    );

    /**
    * DeleteGroupUserByGroupIDV1
    * Remove member from group using group id
    * Remove user as a member from a group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param groupId Id of the group whose membership is updated.
    * @param accountId The account ID of the user. The accountId uniquely identifies the user across all Atlassian products.
    * For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.
    * @param key This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    * @param username This parameter is no longer available and will be removed from the documentation soon.
    * Use `accountId` instead.
    * See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.
    */
    @RequestLine("DELETE /wiki/rest/api/group/userByGroupId?groupId={groupId}&accountId={accountId}&key={key}&username={username}")
    void DeleteGroupUserByGroupIDV1(
            @NotNull @Param("groupId") String groupId,
            @NotNull @Param("accountId") String accountId,
            @Nullable @Param("key") String key,
            @Nullable @Param("username") String username
    );

}
