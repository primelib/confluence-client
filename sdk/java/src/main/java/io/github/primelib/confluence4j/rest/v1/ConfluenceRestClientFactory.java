// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import feign.Feign;
import feign.Logger;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.micrometer.MicrometerCapability;
import feign.okhttp.OkHttpClient;
import feign.slf4j.Slf4jLogger;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientAnalyticsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientAnalyticsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientAuditApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientAuditConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentAttachmentsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentAttachmentsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentBodyApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentBodyConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentChildrenAndDescendantsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentChildrenAndDescendantsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentCommentsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentCommentsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentLabelsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentLabelsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentMacroBodyApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentMacroBodyConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentPermissionsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentPermissionsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentPropertiesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentPropertiesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentRestrictionsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentRestrictionsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentStatesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentStatesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentVersionsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentVersionsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentWatchesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientContentWatchesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientDynamicModulesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientDynamicModulesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientExperimentalApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientExperimentalConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientGroupApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientGroupConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientInlineTasksApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientInlineTasksConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientLabelInfoApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientLabelInfoConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientLongRunningTaskApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientLongRunningTaskConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientRelationApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientRelationConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSearchApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSearchConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSettingsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSettingsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpaceApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpaceConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpacePermissionsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpacePermissionsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpacePropertiesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpacePropertiesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpaceSettingsApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientSpaceSettingsConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientTemplateApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientTemplateConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientThemesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientThemesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientUserPropertiesApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientUserPropertiesConsumerApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientUsersApi;
import io.github.primelib.confluence4j.rest.v1.client.ConfluenceRestClientUsersConsumerApi;
import io.github.primelib.primecodegenlib.java.feign.common.capabilities.PrimeCapability;
import io.github.primelib.primecodegenlib.java.feign.common.interceptor.AuthInterceptor;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.Credentials;

@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@Slf4j
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientFactory {
    public static <T> T create(Consumer<ConfluenceRestClientFactorySpec<T>> spec) {
        ConfluenceRestClientFactorySpec<T> config = new ConfluenceRestClientFactorySpec<>(spec);

        if (config.api().isInterface()) {
            return buildClient(spec);
        }
        if (config.api() == ConfluenceRestClientConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientConsumerApi.class, ConfluenceRestClientApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientAnalyticsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientAnalyticsConsumerApi.class, ConfluenceRestClientAnalyticsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientAnalyticsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientAuditConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientAuditConsumerApi.class, ConfluenceRestClientAuditApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientAuditConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentConsumerApi.class, ConfluenceRestClientContentApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentAttachmentsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentAttachmentsConsumerApi.class, ConfluenceRestClientContentAttachmentsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentAttachmentsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentChildrenAndDescendantsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentChildrenAndDescendantsConsumerApi.class, ConfluenceRestClientContentChildrenAndDescendantsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentChildrenAndDescendantsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentMacroBodyConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentMacroBodyConsumerApi.class, ConfluenceRestClientContentMacroBodyApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentMacroBodyConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentBodyConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentBodyConsumerApi.class, ConfluenceRestClientContentBodyApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentBodyConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentCommentsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentCommentsConsumerApi.class, ConfluenceRestClientContentCommentsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentCommentsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentLabelsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentLabelsConsumerApi.class, ConfluenceRestClientContentLabelsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentLabelsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentPermissionsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentPermissionsConsumerApi.class, ConfluenceRestClientContentPermissionsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentPermissionsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentPropertiesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentPropertiesConsumerApi.class, ConfluenceRestClientContentPropertiesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentPropertiesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentRestrictionsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentRestrictionsConsumerApi.class, ConfluenceRestClientContentRestrictionsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentRestrictionsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentStatesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentStatesConsumerApi.class, ConfluenceRestClientContentStatesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentStatesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentVersionsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentVersionsConsumerApi.class, ConfluenceRestClientContentVersionsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentVersionsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientContentWatchesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientContentWatchesConsumerApi.class, ConfluenceRestClientContentWatchesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientContentWatchesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientDynamicModulesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientDynamicModulesConsumerApi.class, ConfluenceRestClientDynamicModulesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientDynamicModulesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientExperimentalConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientExperimentalConsumerApi.class, ConfluenceRestClientExperimentalApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientExperimentalConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientGroupConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientGroupConsumerApi.class, ConfluenceRestClientGroupApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientGroupConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientInlineTasksConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientInlineTasksConsumerApi.class, ConfluenceRestClientInlineTasksApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientInlineTasksConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientLabelInfoConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientLabelInfoConsumerApi.class, ConfluenceRestClientLabelInfoApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientLabelInfoConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientLongRunningTaskConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientLongRunningTaskConsumerApi.class, ConfluenceRestClientLongRunningTaskApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientLongRunningTaskConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientRelationConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientRelationConsumerApi.class, ConfluenceRestClientRelationApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientRelationConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSearchConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSearchConsumerApi.class, ConfluenceRestClientSearchApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSearchConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSettingsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSettingsConsumerApi.class, ConfluenceRestClientSettingsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSettingsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSpaceConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSpaceConsumerApi.class, ConfluenceRestClientSpaceApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSpaceConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSpacePermissionsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSpacePermissionsConsumerApi.class, ConfluenceRestClientSpacePermissionsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSpacePermissionsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSpacePropertiesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSpacePropertiesConsumerApi.class, ConfluenceRestClientSpacePropertiesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSpacePropertiesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientSpaceSettingsConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientSpaceSettingsConsumerApi.class, ConfluenceRestClientSpaceSettingsApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientSpaceSettingsConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientTemplateConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientTemplateConsumerApi.class, ConfluenceRestClientTemplateApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientTemplateConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientThemesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientThemesConsumerApi.class, ConfluenceRestClientThemesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientThemesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientUserPropertiesConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientUserPropertiesConsumerApi.class, ConfluenceRestClientUserPropertiesApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientUserPropertiesConsumerApi>) config);
        }
        if (config.api() == ConfluenceRestClientUsersConsumerApi.class) {
            return (T) ConfluenceRestClientFactory.buildConsumerClient(ConfluenceRestClientUsersConsumerApi.class, ConfluenceRestClientUsersApi.class, (ConfluenceRestClientFactorySpec<ConfluenceRestClientUsersConsumerApi>) config);
        }

        throw new IllegalArgumentException("api must be an compatible interface or consumer class");
    }

    public static ConfluenceRestClientApi create() {
        return create(spec -> spec.api(ConfluenceRestClientApi.class));
    }

    private static <T, U> T buildConsumerClient(Class<T> consumerApiClass, Class<U> apiClass, ConfluenceRestClientFactorySpec<T> config) {
        try {
            U api = buildClient(s -> {
                s.api(apiClass);
                s.applySpec(config);
            });
            return consumerApiClass.getConstructor(apiClass).newInstance(api);
        } catch (Exception ex) {
            throw new IllegalArgumentException("API must have a constructor with one parameter of type " + apiClass.getSimpleName(), ex);
        }
    }

    private static <T> T buildClient(Consumer<ConfluenceRestClientFactorySpec<T>> spec) {
        ConfluenceRestClientFactorySpec<T> config = new ConfluenceRestClientFactorySpec<>(spec);

        // http client
        okhttp3.OkHttpClient.Builder clientBuilder = new okhttp3.OkHttpClient.Builder();
        if (config.proxy() != null && config.proxy().type() != Proxy.Type.DIRECT) {
            clientBuilder.proxy(new Proxy(config.proxy().type(), new InetSocketAddress(config.proxy().host(), config.proxy().port())));
            if (config.proxy().username() != null || config.proxy().password() != null) {
                clientBuilder.proxyAuthenticator((route, response) -> {
                    return response.request().newBuilder()
                            .header("Proxy-Authorization", Credentials.basic(config.proxy().username(), new String(config.proxy().password())))
                            .build();
                });
            }
        }

        // insecure
        if (config.insecure()) {
            try {
                TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {}

                        @Override
                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {}

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[]{};
                        }
                    }
                };

                SSLContext sslContext = SSLContext.getInstance("SSL");
                sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

                clientBuilder.hostnameVerifier((hostname, session) -> true);
                clientBuilder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustAllCerts[0]);
            } catch (Exception ex) {
                throw new RuntimeException("failed to configure insecure mode", ex);
            }
        }

        // objectMapper
        JsonMapper.Builder objectMapperBuilder = JsonMapper.builder()
                .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)
                .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)
                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
                .propertyNamingStrategy(PropertyNamingStrategies.LOWER_CAMEL_CASE)
                .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false)
                .addModule(new JavaTimeModule());
        config.extensions().forEach(extension -> extension.customizeObjectMapper(objectMapperBuilder));
        ObjectMapper objectMapper = objectMapperBuilder.build();

        // builder
        return Feign.builder()
                .client(new OkHttpClient(clientBuilder.build()))
                .encoder(new JacksonEncoder(objectMapper))
                .decoder(new JacksonDecoder(objectMapper))
                .logger(new Slf4jLogger())
                .logLevel(Logger.Level.valueOf(config.logLevel().toUpperCase()))
                .addCapability(new MicrometerCapability(config.meterRegistry()))
                .addCapability(new PrimeCapability(config.backendName(), config.extensions()))
                .requestInterceptor(new AuthInterceptor(config.auth()))
                .decodeVoid()
                .target(config.api(), config.baseUrl());
    }
}
