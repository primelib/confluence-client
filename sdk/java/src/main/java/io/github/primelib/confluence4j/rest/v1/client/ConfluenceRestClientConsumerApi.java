// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.AccountIDEmailRecord;
import io.github.primelib.confluence4j.rest.v1.models.AsyncContentBody;
import io.github.primelib.confluence4j.rest.v1.models.AsyncId;
import io.github.primelib.confluence4j.rest.v1.models.AuditRecord;
import io.github.primelib.confluence4j.rest.v1.models.AuditRecordArray;
import io.github.primelib.confluence4j.rest.v1.models.AvailableContentStates;
import io.github.primelib.confluence4j.rest.v1.models.BlueprintTemplateArray;
import io.github.primelib.confluence4j.rest.v1.models.BulkUserLookupArray;
import io.github.primelib.confluence4j.rest.v1.models.ConnectModules;
import io.github.primelib.confluence4j.rest.v1.models.Content;
import io.github.primelib.confluence4j.rest.v1.models.ContentArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentBody;
import io.github.primelib.confluence4j.rest.v1.models.ContentRestriction;
import io.github.primelib.confluence4j.rest.v1.models.ContentRestrictionArray;
import io.github.primelib.confluence4j.rest.v1.models.ContentState;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateResponse;
import io.github.primelib.confluence4j.rest.v1.models.ContentStateSettings;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplate;
import io.github.primelib.confluence4j.rest.v1.models.ContentTemplateArray;
import io.github.primelib.confluence4j.rest.v1.models.GetRestrictionsByOperation;
import io.github.primelib.confluence4j.rest.v1.models.GetViewersR200;
import io.github.primelib.confluence4j.rest.v1.models.GetViewsR200;
import io.github.primelib.confluence4j.rest.v1.models.Group;
import io.github.primelib.confluence4j.rest.v1.models.GroupArrayWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.LabelArray;
import io.github.primelib.confluence4j.rest.v1.models.LabelDetails;
import io.github.primelib.confluence4j.rest.v1.models.LongTaskStatusArray;
import io.github.primelib.confluence4j.rest.v1.models.LongTaskStatusWithLinks;
import io.github.primelib.confluence4j.rest.v1.models.LookAndFeelSelection;
import io.github.primelib.confluence4j.rest.v1.models.LookAndFeelSettings;
import io.github.primelib.confluence4j.rest.v1.models.MacroInstance;
import io.github.primelib.confluence4j.rest.v1.models.MovePageR200;
import io.github.primelib.confluence4j.rest.v1.models.PermissionCheckResponse;
import io.github.primelib.confluence4j.rest.v1.models.Relation;
import io.github.primelib.confluence4j.rest.v1.models.RelationArray;
import io.github.primelib.confluence4j.rest.v1.models.RetentionPeriod;
import io.github.primelib.confluence4j.rest.v1.models.SearchPageResponseSearchResult;
import io.github.primelib.confluence4j.rest.v1.models.Space;
import io.github.primelib.confluence4j.rest.v1.models.SpacePermissionV2;
import io.github.primelib.confluence4j.rest.v1.models.SpaceSettings;
import io.github.primelib.confluence4j.rest.v1.models.SpaceWatchArray;
import io.github.primelib.confluence4j.rest.v1.models.SystemInfoEntity;
import io.github.primelib.confluence4j.rest.v1.models.Theme;
import io.github.primelib.confluence4j.rest.v1.models.ThemeArray;
import io.github.primelib.confluence4j.rest.v1.models.UserAnonymous;
import io.github.primelib.confluence4j.rest.v1.models.UserArray;
import io.github.primelib.confluence4j.rest.v1.models.UserProperty;
import io.github.primelib.confluence4j.rest.v1.models.UserPropertyKeyArray;
import io.github.primelib.confluence4j.rest.v1.models.UserWatch;
import io.github.primelib.confluence4j.rest.v1.models.Version;
import io.github.primelib.confluence4j.rest.v1.models.WatchArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteAtlassianConnect1AppModuleDynamicV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDLabelByLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDPageTreeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDRestrictionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDStateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteContentByIDVersionByVersionNumberV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteGroupByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteGroupUserByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSettingsLookandfeelCustomV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSpaceBySpaceKeyLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSpaceBySpaceKeyPermissionByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSpaceBySpaceKeyThemeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteTemplateByContentTemplateIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAnalyticsContentByContentIDViewersV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAnalyticsContentByContentIDViewsV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAtlassianConnect1AppModuleDynamicV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAuditExportV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAuditRetentionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAuditSinceV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetAuditV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDChildAttachmentByAttachmentIDDownloadV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDDescendantByTypeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDDescendantV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDHistoryByVersionMacroIDByMacroIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDNotificationChildCreatedV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDNotificationCreatedV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDRestrictionByOperationByOperationKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDRestrictionByOperationV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDRestrictionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDStateAvailableV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDStateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentSearchV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentStatesV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentbodyConvertAsyncBulkTasksV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentbodyConvertAsyncByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupByGroupIDMembersByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupPickerV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetGroupV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetLongtaskByIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetLongtaskV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSearchUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSearchV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSettingsLookandfeelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSettingsSystemInfoV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSettingsThemeByThemeKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSettingsThemeSelectedV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSettingsThemeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeySettingsV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyStateContentV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyStateSettingsV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyStateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyThemeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyWatchV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplateBlueprintV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplateByContentTemplateIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetTemplatePageV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserAnonymousV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserBulkV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserByUserIDPropertyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserCurrentV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserEmailBulkV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserEmailV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserMemberofV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostAtlassianConnect1AppModuleDynamicV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostAuditV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentArchiveV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentBlueprintInstanceByDraftIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDCopyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDPagehierarchyCopyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDPermissionCheckV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDRestrictionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentByIDVersionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentbodyConvertAsyncBulkTasksV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostContentbodyConvertAsyncByToV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostGroupUserByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostGroupV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSettingsLookandfeelCustomV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpaceBySpaceKeyLabelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpaceBySpaceKeyPermissionCustomContentV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpaceBySpaceKeyPermissionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpacePrivateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostSpaceV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostTemplateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserByUserIDPropertyByKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutAuditRetentionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentBlueprintInstanceByDraftIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByIDChildAttachmentByAttachmentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByIDRestrictionV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByIDStateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutSettingsLookandfeelV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutSpaceBySpaceKeySettingsV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutSpaceBySpaceKeyThemeV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutTemplateV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PutUserByUserIDPropertyByKeyV1OperationSpec;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientConsumerApi {
    private final ConfluenceRestClientApi api;

    public ConfluenceRestClientConsumerApi(ConfluenceRestClientApi api) {
        this.api = api;
    }


    /**
    * GetAtlassianConnect1AppModuleDynamicV1
    * Get modules
    * Returns all modules registered dynamically by the calling app.
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    */
    public ConnectModules getAtlassianConnect1AppModuleDynamicV1(Consumer<GetAtlassianConnect1AppModuleDynamicV1OperationSpec> spec) {
        GetAtlassianConnect1AppModuleDynamicV1OperationSpec r = new GetAtlassianConnect1AppModuleDynamicV1OperationSpec(spec);
        return api.getAtlassianConnect1AppModuleDynamicV1();
    }

    /**
    * PostAtlassianConnect1AppModuleDynamicV1
    * Register modules
    * Registers a list of modules. For the list of modules that support dynamic registration, see [Dynamic modules](https://developer.atlassian.com/cloud/confluence/dynamic-modules/).
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: </li>
    * </ul>
    */
    public void postAtlassianConnect1AppModuleDynamicV1(Consumer<PostAtlassianConnect1AppModuleDynamicV1OperationSpec> spec) {
        PostAtlassianConnect1AppModuleDynamicV1OperationSpec r = new PostAtlassianConnect1AppModuleDynamicV1OperationSpec(spec);
        api.postAtlassianConnect1AppModuleDynamicV1(r.payload());
    }

    /**
    * DeleteAtlassianConnect1AppModuleDynamicV1
    * Remove modules
    * Remove all or a list of modules registered by the calling app.
    * 
    * **[Permissions](#permissions) required:** Only Connect apps can make this request.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>moduleKey: The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter. For example, `moduleKey=dynamic-attachment-entity-property&amp;moduleKey=dynamic-select-field`. Nonexistent keys are ignored.</li>
    * </ul>
    */
    public void deleteAtlassianConnect1AppModuleDynamicV1(Consumer<DeleteAtlassianConnect1AppModuleDynamicV1OperationSpec> spec) {
        DeleteAtlassianConnect1AppModuleDynamicV1OperationSpec r = new DeleteAtlassianConnect1AppModuleDynamicV1OperationSpec(spec);
        api.deleteAtlassianConnect1AppModuleDynamicV1(r.moduleKey());
    }

    /**
    * GetAuditV1
    * Get audit records
    * Returns all records in the audit log, optionally for a certain date range.
    * This contains information about events like space exports, group membership
    * changes, app installations, etc. For more information, see
    * [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
    * in the Confluence administrator's guide.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>startDate: Filters the results to the records on or after the `startDate`. The `startDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.</li>
    *   <li>endDate: Filters the results to the records on or before the `endDate`. The `endDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.</li>
    *   <li>searchString: Filters the results to records that have string property values matching the `searchString`.</li>
    *   <li>start: The starting index of the returned records.</li>
    *   <li>limit: The maximum number of records to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public AuditRecordArray getAuditV1(Consumer<GetAuditV1OperationSpec> spec) {
        GetAuditV1OperationSpec r = new GetAuditV1OperationSpec(spec);
        return api.getAuditV1(r.startDate(), r.endDate(), r.searchString(), r.start(), r.limit());
    }

    /**
    * PostAuditV1
    * Create audit record
    * Creates a record in the audit log.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The record to be created in the audit log.</li>
    * </ul>
    */
    public AuditRecord postAuditV1(Consumer<PostAuditV1OperationSpec> spec) {
        PostAuditV1OperationSpec r = new PostAuditV1OperationSpec(spec);
        return api.postAuditV1(r.payload());
    }

    /**
    * GetAuditExportV1
    * Export audit records
    * Exports audit records as a CSV file or ZIP file.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>startDate: Filters the exported results to the records on or after the `startDate`. The `startDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.</li>
    *   <li>endDate: Filters the exported results to the records on or before the `endDate`. The `endDate` must be specified as [epoch time](https://www.epochconverter.com/) in milliseconds.</li>
    *   <li>searchString: Filters the exported results to records that have string property values matching the `searchString`.</li>
    *   <li>format: The format of the export file for the audit records.</li>
    * </ul>
    */
    public Byte[] getAuditExportV1(Consumer<GetAuditExportV1OperationSpec> spec) {
        GetAuditExportV1OperationSpec r = new GetAuditExportV1OperationSpec(spec);
        return api.getAuditExportV1(r.startDate(), r.endDate(), r.searchString(), r.format());
    }

    /**
    * GetAuditRetentionV1
    * Get retention period
    * Returns the retention period for records in the audit log. The retention
    * period is how long an audit record is kept for, from creation date until
    * it is deleted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    */
    public RetentionPeriod getAuditRetentionV1(Consumer<GetAuditRetentionV1OperationSpec> spec) {
        GetAuditRetentionV1OperationSpec r = new GetAuditRetentionV1OperationSpec(spec);
        return api.getAuditRetentionV1();
    }

    /**
    * PutAuditRetentionV1
    * Set retention period
    * Sets the retention period for records in the audit log. The retention period
    * can be set to a maximum of 1 year.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The updated retention period.</li>
    * </ul>
    */
    public RetentionPeriod putAuditRetentionV1(Consumer<PutAuditRetentionV1OperationSpec> spec) {
        PutAuditRetentionV1OperationSpec r = new PutAuditRetentionV1OperationSpec(spec);
        return api.putAuditRetentionV1(r.payload());
    }

    /**
    * GetAuditSinceV1
    * Get audit records for time period
    * Returns records from the audit log, for a time period back from the current
    * date. For example, you can use this method to get the last 3 months of records.
    * 
    * This contains information about events like space exports, group membership
    * changes, app installations, etc. For more information, see
    * [Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html)
    * in the Confluence administrator's guide.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>number: The number of units for the time period.</li>
    *   <li>units: The unit of time that the time period is measured in.</li>
    *   <li>searchString: Filters the results to records that have string property values matching the `searchString`.</li>
    *   <li>start: The starting index of the returned records.</li>
    *   <li>limit: The maximum number of records to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public AuditRecordArray getAuditSinceV1(Consumer<GetAuditSinceV1OperationSpec> spec) {
        GetAuditSinceV1OperationSpec r = new GetAuditSinceV1OperationSpec(spec);
        return api.getAuditSinceV1(r.number(), r.units(), r.searchString(), r.start(), r.limit());
    }

    /**
    * PostContentArchiveV1
    * Archive pages
    * Archives a list of pages. The pages to be archived are specified as a list of content IDs.
    * This API accepts the archival request and returns a task ID.
    * The archival process happens asynchronously.
    * Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
    * 
    * Each content ID needs to resolve to page objects that are not already in an archived state.
    * The content IDs need not belong to the same space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Archive' permission for each of the pages in the corresponding space it belongs to.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The pages to be archived.</li>
    * </ul>
    */
    public void postContentArchiveV1(Consumer<PostContentArchiveV1OperationSpec> spec) {
        PostContentArchiveV1OperationSpec r = new PostContentArchiveV1OperationSpec(spec);
        api.postContentArchiveV1(r.payload());
    }

    /**
    * PutContentBlueprintInstanceByDraftIDV1
    * Publish shared draft
    * Publishes a shared draft of a page created from a blueprint.
    * 
    * By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the draft and 'Add' permission for the space that
    * the content will be created in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>draftId: The ID of the draft page that was created from a blueprint. You can find the `draftId` in the Confluence application by opening the draft page and checking the page URL.</li>
    *   <li>status: The status of the content to be updated, i.e. the draft. This is set to 'draft' by default, so you shouldn't need to specify it.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand.  - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards. Use this if you only need to check whether the content has children of a particular type. - `childTypes.attachment` returns whether the content has attachments. - `childTypes.comment` returns whether the content has comments. - `childTypes.page` returns whether the content has child pages. - `childTypes.whiteboard` returns whether the content has child whiteboards. - `childTypes.database` returns whether the content has child databases. - `childTypes.embed` returns whether the content has child embeds (smartlinks). - `childTypes.folder` returns whether the content has child folders. - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - `metadata.currentuser` returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - `metadata.properties` returns content properties that have been set via the Confluence REST API. - `metadata.labels` returns the labels that have been added to the content. - `metadata.frontend` this property is only used by Atlassian. - `operations` returns the operations for the content, which are used when setting permissions. - `children.page` returns pages that are descendants at the level immediately below the content. - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content. - `children.database` returns databases that are descendants at the level immediately below the content. - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content. - `children.folder` returns folders that are descendants at the level immediately below the content. - `children.attachment` returns all attachments for the content. - `children.comment` returns all comments on the content. - `restrictions.read.restrictions.user` returns the users that have permission to read the content. - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn't remove associated restrictions. - `restrictions.update.restrictions.user` returns the users that have permission to update the content. - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn't remove associated restrictions. - `history` returns the history of the content, including the date it was created. - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated. - `history.previousVersion` returns information about the update prior to the current content update. - `history.contributors` returns all of the users who have contributed to the content. - `history.nextVersion` returns information about the update after to the current content update. - `ancestors` returns the parent content, if the content is a page or whiteboard. - `body` returns the body of the content in different formats, including the editor format, view format, and export format. - `body.storage` returns the body of content in storage format. - `body.view` returns the body of content in view format. - `version` returns information about the most recent update of the content, including who updated it and when it was updated. - `descendants.page` returns pages that are descendants at any level below the content. - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content. - `descendants.database` returns databases that are descendants at any level below the content. - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content. - `descendants.folder` returns folders that are descendants at any level below the content. - `descendants.attachment` returns all attachments for the content, same as `children.attachment`. - `descendants.comment` returns all comments on the content, same as `children.comment`. - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - `extensions.inlineProperties` returns inline comment-specific properties. - `extensions.resolution` returns the resolution status of each comment.</li>
    *   <li>payload: </li>
    * </ul>
    */
    public Content putContentBlueprintInstanceByDraftIdv1(Consumer<PutContentBlueprintInstanceByDraftIDV1OperationSpec> spec) {
        PutContentBlueprintInstanceByDraftIDV1OperationSpec r = new PutContentBlueprintInstanceByDraftIDV1OperationSpec(spec);
        return api.putContentBlueprintInstanceByDraftIdv1(r.draftId(), r.status(), r.expand(), r.payload());
    }

    /**
    * PostContentBlueprintInstanceByDraftIDV1
    * Publish legacy draft
    * Publishes a legacy draft of a page created from a blueprint. Legacy drafts
    * will eventually be removed in favor of shared drafts. For now, this method
    * works the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).
    * 
    * By default, the following objects are expanded: `body.storage`, `history`, `space`, `version`, `ancestors`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the draft and 'Add' permission for the space that
    * the content will be created in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>draftId: The ID of the draft page that was created from a blueprint. You can find the `draftId` in the Confluence application by opening the draft page and checking the page URL.</li>
    *   <li>status: The status of the content to be updated, i.e. the draft. This is set to 'draft' by default, so you shouldn't need to specify it.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand.  - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards. Use this if you only need to check whether the content has children of a particular type. - `childTypes.attachment` returns whether the content has attachments. - `childTypes.comment` returns whether the content has comments. - `childTypes.page` returns whether the content has child pages. - `childTypes.whiteboard` returns whether the content has child whiteboards. - `childTypes.database` returns whether the content has child databases. - `childTypes.embed` returns whether the content has child embeds (smartlinks). - `childTypes.folder` returns whether the content has child folders. - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - `metadata.currentuser` returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - `metadata.properties` returns content properties that have been set via the Confluence REST API. - `metadata.labels` returns the labels that have been added to the content. - `metadata.frontend` this property is only used by Atlassian. - `operations` returns the operations for the content, which are used when setting permissions. - `children.page` returns pages that are descendants at the level immediately below the content. - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content. - `children.database` returns databases that are descendants at the level immediately below the content. - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content. - `children.folder` returns folders that are descendants at the level immediately below the content. - `children.attachment` returns all attachments for the content. - `children.comment` returns all comments on the content. - `restrictions.read.restrictions.user` returns the users that have permission to read the content. - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn't remove associated restrictions. - `restrictions.update.restrictions.user` returns the users that have permission to update the content. - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn't remove associated restrictions. - `history` returns the history of the content, including the date it was created. - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated. - `history.previousVersion` returns information about the update prior to the current content update. - `history.contributors` returns all of the users who have contributed to the content. - `history.nextVersion` returns information about the update after to the current content update. - `ancestors` returns the parent content, if the content is a page or whiteboard. - `body` returns the body of the content in different formats, including the editor format, view format, and export format. - `body.storage` returns the body of content in storage format. - `body.view` returns the body of content in view format. - `version` returns information about the most recent update of the content, including who updated it and when it was updated. - `descendants.page` returns pages that are descendants at any level below the content. - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content. - `descendants.database` returns databases that are descendants at any level below the content. - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content. - `descendants.folder` returns folders that are descendants at any level below the content. - `descendants.attachment` returns all attachments for the content, same as `children.attachment`. - `descendants.comment` returns all comments on the content, same as `children.comment`. - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - `extensions.inlineProperties` returns inline comment-specific properties. - `extensions.resolution` returns the resolution status of each comment.</li>
    *   <li>payload: </li>
    * </ul>
    */
    public Content postContentBlueprintInstanceByDraftIdv1(Consumer<PostContentBlueprintInstanceByDraftIDV1OperationSpec> spec) {
        PostContentBlueprintInstanceByDraftIDV1OperationSpec r = new PostContentBlueprintInstanceByDraftIDV1OperationSpec(spec);
        return api.postContentBlueprintInstanceByDraftIdv1(r.draftId(), r.status(), r.expand(), r.payload());
    }

    /**
    * GetContentSearchV1
    * Search content by CQL
    * Returns the list of content that matches a Confluence Query Language
    * (CQL) query. For information on CQL, see:
    * [Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/content/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/content/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/content/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    * Only content that the user has permission to view will be returned.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>cql: The CQL string that is used to find the requested content.</li>
    *   <li>cqlcontext: The space, content, and content status to execute the search against. Specify this as an object with the following properties:  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space spacified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand.  - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards. Use this if you only need to check whether the content has children of a particular type. - `childTypes.attachment` returns whether the content has attachments. - `childTypes.comment` returns whether the content has comments. - `childTypes.page` returns whether the content has child pages. - `childTypes.whiteboard` returns whether the content has child whiteboards. - `childTypes.database` returns whether the content has child databases. - `childTypes.embed` returns whether the content has child embeds (smartlinks). - `childTypes.folder` returns whether the content has child folders. - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - `metadata.currentuser` returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - `metadata.properties` returns content properties that have been set via the Confluence REST API. - `metadata.labels` returns the labels that have been added to the content. - `metadata.frontend` this property is only used by Atlassian. - `operations` returns the operations for the content, which are used when setting permissions. - `children.page` returns pages that are descendants at the level immediately below the content. - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content. - `children.database` returns databases that are descendants at the level immediately below the content. - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content. - `children.folder` returns folders that are descendants at the level immediately below the content. - `children.attachment` returns all attachments for the content. - `children.comment` returns all comments on the content. - `restrictions.read.restrictions.user` returns the users that have permission to read the content. - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn't remove associated restrictions. - `restrictions.update.restrictions.user` returns the users that have permission to update the content. - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn't remove associated restrictions. - `history` returns the history of the content, including the date it was created. - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated. - `history.previousVersion` returns information about the update prior to the current content update. - `history.contributors` returns all of the users who have contributed to the content. - `history.nextVersion` returns information about the update after to the current content update. - `ancestors` returns the parent content, if the content is a page or whiteboard. - `body` returns the body of the content in different formats, including the editor format, view format, and export format. - `body.storage` returns the body of content in storage format. - `body.view` returns the body of content in view format. - `version` returns information about the most recent update of the content, including who updated it and when it was updated. - `descendants.page` returns pages that are descendants at any level below the content. - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content. - `descendants.database` returns databases that are descendants at any level below the content. - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content. - `descendants.folder` returns folders that are descendants at any level below the content. - `descendants.attachment` returns all attachments for the content, same as `children.attachment`. - `descendants.comment` returns all comments on the content, same as `children.comment`. - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - `extensions.inlineProperties` returns inline comment-specific properties. - `extensions.resolution` returns the resolution status of each comment.</li>
    *   <li>cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.</li>
    *   <li>limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public ContentArray getContentSearchV1(Consumer<GetContentSearchV1OperationSpec> spec) {
        GetContentSearchV1OperationSpec r = new GetContentSearchV1OperationSpec(spec);
        return api.getContentSearchV1(r.cql(), r.cqlcontext(), r.expand(), r.cursor(), r.limit());
    }

    /**
    * DeleteContentByIDPageTreeV1
    * Delete page tree
    * Moves a pagetree rooted at a page to the space's trash:
    * 
    * - If the content's type is `page` and its status is `current`, it will be trashed including
    * all its descendants.
    * - For every other combination of content type and status, this API is not supported.
    * 
    * This API accepts the pageTree delete request and returns a task ID.
    * The delete process happens asynchronously.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the `/longtask/&lt;taskId&gt;` REST API to get the copy task status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Delete' permission for the space that the content is in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content which forms root of the page tree, to be deleted.</li>
    * </ul>
    */
    public void deleteContentByIdpageTreeV1(Consumer<DeleteContentByIDPageTreeV1OperationSpec> spec) {
        DeleteContentByIDPageTreeV1OperationSpec r = new DeleteContentByIDPageTreeV1OperationSpec(spec);
        api.deleteContentByIdpageTreeV1(r.id());
    }

    /**
    * PutContentByPageIDMoveByPositionByTargetIDV1
    * Move a page to a new location relative to a target page
    * Move a page to a new location relative to a target page:
    * 
    * * `before` - move the page under the same parent as the target, before the target in the list of children
    * * `after` - move the page under the same parent as the target, after the target in the list of children
    * * `append` - move the page to be a child of the target
    * 
    * Caution: This API can move pages to the top level of a space. Top-level pages are difficult to find in the UI
    * because they do not show up in the page tree display. To avoid this, never use `before` or `after` positions
    * when the `targetId` is a top-level page.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>pageId: The ID of the page to be moved</li>
    *   <li>position: The position to move the page to relative to the target page: * `before` - move the page under the same parent as the target, before the target in the list of children * `after` - move the page under the same parent as the target, after the target in the list of children * `append` - move the page to be a child of the target</li>
    *   <li>targetId: The ID of the target page for this operation</li>
    * </ul>
    */
    public MovePageR200 putContentByPageIdmoveByPositionByTargetIdv1(Consumer<PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec> spec) {
        PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec r = new PutContentByPageIDMoveByPositionByTargetIDV1OperationSpec(spec);
        return api.putContentByPageIdmoveByPositionByTargetIdv1(r.pageId(), r.position(), r.targetId());
    }

    /**
    * PutContentByIDChildAttachmentByAttachmentIDV1
    * Update attachment properties
    * Updates the attachment properties, i.e. the non-binary data of an attachment
    * like the filename, media-type, comment, and parent container.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the attachment is attached to.</li>
    *   <li>attachmentId: The ID of the attachment to update.</li>
    *   <li>payload: The details of the attachment to be updated.</li>
    * </ul>
    */
    public Content putContentByIdchildAttachmentByAttachmentIdv1(Consumer<PutContentByIDChildAttachmentByAttachmentIDV1OperationSpec> spec) {
        PutContentByIDChildAttachmentByAttachmentIDV1OperationSpec r = new PutContentByIDChildAttachmentByAttachmentIDV1OperationSpec(spec);
        return api.putContentByIdchildAttachmentByAttachmentIdv1(r.id(), r.attachmentId(), r.payload());
    }

    /**
    * GetContentByIDChildAttachmentByAttachmentIDDownloadV1
    * Get URI to download attachment
    * Redirects the client to a URL that serves an attachment's binary data.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the attachment is attached to.</li>
    *   <li>attachmentId: The ID of the attachment to download.</li>
    *   <li>version: The version of the attachment. If this parameter is absent, the redirect URI will download the latest version of the attachment.</li>
    *   <li>status: The statuses allowed on the retrieved attachment. If this parameter is absent, it will default to `current`.</li>
    * </ul>
    */
    public void getContentByIdchildAttachmentByAttachmentIddownloadV1(Consumer<GetContentByIDChildAttachmentByAttachmentIDDownloadV1OperationSpec> spec) {
        GetContentByIDChildAttachmentByAttachmentIDDownloadV1OperationSpec r = new GetContentByIDChildAttachmentByAttachmentIDDownloadV1OperationSpec(spec);
        api.getContentByIdchildAttachmentByAttachmentIddownloadV1(r.id(), r.attachmentId(), r.version(), r.status());
    }

    /**
    * GetContentByIDDescendantV1
    * Get content descendants
    * Returns a map of the descendants of a piece of content. This is similar
    * to [Get content children](#api-content-id-child-get), except that this
    * method returns child pages at all levels, rather than just the direct
    * child pages.
    * 
    * A piece of content has different types of descendants, depending on its type:
    * 
    * - `page`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `whiteboard`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `database`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `embed`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `folder`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `blogpost`: descendant is `comment`, `attachment`
    * - `attachment`: descendant is `comment`
    * - `comment`: descendant is `attachment`
    * 
    * The map will always include all descendant types that are valid for the content.
    * However, if the content has no instances of a descendant type, the map will
    * contain an empty array for that descendant type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if it
    * is a page.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its descendants.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the children to expand, where:  - `attachment` returns all attachments for the content. - `comments` returns all comments for the content. - `page` returns all child pages of the content. - `whiteboard` returns all child whiteboards of the content. - `database` returns all child databases of the content. - `embed` returns all child embeds of the content. - `folder` returns all child folders of the content.</li>
    * </ul>
    * @deprecated
    */
    @Deprecated
    public Map<String, Object> getContentByIddescendantV1(Consumer<GetContentByIDDescendantV1OperationSpec> spec) {
        GetContentByIDDescendantV1OperationSpec r = new GetContentByIDDescendantV1OperationSpec(spec);
        return api.getContentByIddescendantV1(r.id(), r.expand());
    }

    /**
    * GetContentByIDDescendantByTypeV1
    * Get content descendants by type
    * Returns all descendants of a given type, for a piece of content. This is
    * similar to [Get content children by type](#api-content-id-child-type-get),
    * except that this method returns child pages at all levels, rather than just
    * the direct child pages.
    * 
    * A piece of content has different types of descendants, depending on its type:
    * 
    * - `page`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `whiteboard`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `database`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `embed`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `folder`: descendant is `page`, `whiteboard`, `database`, `embed`, `folder`, `comment`, `attachment`
    * - `blogpost`: descendant is `comment`, `attachment`
    * - `attachment`: descendant is `comment`
    * - `comment`: descendant is `attachment`
    * 
    * Custom content types that are provided by apps can also be returned.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if it
    * is a page.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its descendants.</li>
    *   <li>type: The type of descendants to return.</li>
    *   <li>depth: Filter the results to descendants upto a desired level of the content. Note, the maximum value supported is 100. root level of the content means immediate (level 1) descendants of the type requested. all represents returning all descendants of the type requested.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand.  - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards. Use this if you only need to check whether the content has children of a particular type. - `childTypes.attachment` returns whether the content has attachments. - `childTypes.comment` returns whether the content has comments. - `childTypes.page` returns whether the content has child pages. - `childTypes.whiteboard` returns whether the content has child whiteboards. - `childTypes.database` returns whether the content has child databases. - `childTypes.embed` returns whether the content has child embeds (smartlinks). - `childTypes.folder` returns whether the content has child folders. - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - `metadata.currentuser` returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - `metadata.properties` returns content properties that have been set via the Confluence REST API. - `metadata.labels` returns the labels that have been added to the content. - `metadata.frontend` this property is only used by Atlassian. - `operations` returns the operations for the content, which are used when setting permissions. - `children.page` returns pages that are descendants at the level immediately below the content. - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content. - `children.database` returns databases that are descendants at the level immediately below the content. - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content. - `children.folder` returns folders that are descendants at the level immediately below the content. - `children.attachment` returns all attachments for the content. - `children.comment` returns all comments on the content. - `restrictions.read.restrictions.user` returns the users that have permission to read the content. - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn't remove associated restrictions. - `restrictions.update.restrictions.user` returns the users that have permission to update the content. - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn't remove associated restrictions. - `history` returns the history of the content, including the date it was created. - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated. - `history.previousVersion` returns information about the update prior to the current content update. - `history.contributors` returns all of the users who have contributed to the content. - `history.nextVersion` returns information about the update after to the current content update. - `ancestors` returns the parent content, if the content is a page or whiteboard. - `body` returns the body of the content in different formats, including the editor format, view format, and export format. - `body.storage` returns the body of content in storage format. - `body.view` returns the body of content in view format. - `version` returns information about the most recent update of the content, including who updated it and when it was updated. - `descendants.page` returns pages that are descendants at any level below the content. - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content. - `descendants.database` returns databases that are descendants at any level below the content. - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content. - `descendants.folder` returns folders that are descendants at any level below the content. - `descendants.attachment` returns all attachments for the content, same as `children.attachment`. - `descendants.comment` returns all comments on the content, same as `children.comment`. - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - `extensions.inlineProperties` returns inline comment-specific properties. - `extensions.resolution` returns the resolution status of each comment.</li>
    *   <li>start: The starting index of the returned content.</li>
    *   <li>limit: The maximum number of content to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    * @deprecated
    */
    @Deprecated
    public ContentArray getContentByIddescendantByTypeV1(Consumer<GetContentByIDDescendantByTypeV1OperationSpec> spec) {
        GetContentByIDDescendantByTypeV1OperationSpec r = new GetContentByIDDescendantByTypeV1OperationSpec(spec);
        return api.getContentByIddescendantByTypeV1(r.id(), r.type(), r.depth(), r.expand(), r.start(), r.limit());
    }

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDV1
    * Get macro body by macro ID
    * Returns the body of a macro in storage format, for the given macro ID.
    * This includes information like the name of the macro, the body of the macro,
    * and any macro parameters. This method is mainly used by Cloud apps.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID for the content that contains the macro.</li>
    *   <li>version: The version of the content that contains the macro. Specifying `0` as the `version` will return the macro body for the latest content version.</li>
    *   <li>macroId: The ID of the macro. This is usually passed by the app that the macro is in. Otherwise, find the macro ID by querying the desired content and version, then expanding the body in storage format. For example, '/content/196611/version/7?expand=content.body.storage'.</li>
    * </ul>
    */
    public MacroInstance getContentByIdhistoryByVersionMacroIdbyMacroIdv1(Consumer<GetContentByIDHistoryByVersionMacroIDByMacroIDV1OperationSpec> spec) {
        GetContentByIDHistoryByVersionMacroIDByMacroIDV1OperationSpec r = new GetContentByIDHistoryByVersionMacroIDByMacroIDV1OperationSpec(spec);
        return api.getContentByIdhistoryByVersionMacroIdbyMacroIdv1(r.id(), r.version(), r.macroId());
    }

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1
    * Get macro body by macro ID and convert the representation synchronously
    * Returns the body of a macro in format specified in path, for the given macro ID.
    * This includes information like the name of the macro, the body of the macro,
    * and any macro parameters.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID for the content that contains the macro.</li>
    *   <li>version: The version of the content that contains the macro. Specifying `0` as the `version` will return the macro body for the latest content version.</li>
    *   <li>macroId: The ID of the macro. This is usually passed by the app that the macro is in. Otherwise, find the macro ID by querying the desired content and version, then expanding the body in storage format. For example, '/content/196611/version/7?expand=content.body.storage'.</li>
    *   <li>to: The content representation to return the macro in.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when converting to `view` format).   If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is  necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for any nested dynamic content (i.e. macros).  - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro) - `mediaToken` returns JWT token for retrieving attachment data from Media API - `macroRenderedOutput` additionally converts body to view format - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs - `webresource.superbatch.uris.all` returns all common dependencies as static URLs - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags - `webresource.uris.js` returns JS dependencies specific to conversion - `webresource.uris.css` returns CSS dependencies specific to conversion - `webresource.uris.all` returns all dependencies specific to conversion      - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags</li>
    *   <li>spaceKeyContext: The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted to a link to the "Example page" page in the "TEST" space.</li>
    *   <li>embeddedContentRender: Mode used for rendering embedded content, like attachments.  - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.</li>
    * </ul>
    */
    public ContentBody getContentByIdhistoryByVersionMacroIdbyMacroIdconvertByToV1(Consumer<GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1OperationSpec> spec) {
        GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1OperationSpec r = new GetContentByIDHistoryByVersionMacroIDByMacroIDConvertByToV1OperationSpec(spec);
        return api.getContentByIdhistoryByVersionMacroIdbyMacroIdconvertByToV1(r.id(), r.version(), r.macroId(), r.to(), r.expand(), r.spaceKeyContext(), r.embeddedContentRender());
    }

    /**
    * GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1
    * Get macro body by macro ID and convert representation Asynchronously
    * Returns Async Id of the conversion task which will convert the macro into a content body of the desired format.
    * The result will be available for 5 minutes after completion of the conversion.
    * 
    * About the macro ID: When a macro is created in a new version of content,
    * Confluence will generate a random ID for it, unless an ID is specified
    * (by an app). The macro ID will look similar to this: '884bd9-0cb8-41d5-98be-f80943c14f96'.
    * The ID is then persisted as new versions of content are created, and is
    * only modified by Confluence if there are conflicting IDs.
    * 
    * For Forge macros, the value for macro ID is the "local ID" of that particular ADF node.
    * This value can be retrieved either client-side by calling view.getContext() and accessing "localId"
    * on the resulting object, or server-side by examining the "local-id" parameter node inside the "parameters" node.
    * 
    * Note that there are other attributes named "local-id", but only this particular one is used to store the macro ID.
    * 
    * Example:
    * &lt;ac:adf-node type="extension"&gt;
    *   &lt;ac:adf-attribute key="extension-type"&gt;com.atlassian.ecosystem&lt;/ac:adf-attribute&gt;
    *   &lt;ac:adf-attribute key="parameters"&gt;
    *       &lt;ac:adf-parameter key="local-id"&gt;e9c4aa10-73fa-417c-888d-48c719ae4165&lt;/ac:adf-parameter&gt;
    *   &lt;/ac:adf-parameter&gt;
    * &lt;/ac:adf-node&gt;
    * 
    * Note, to preserve backwards compatibility this resource will also match on
    * the hash of the macro body, even if a macro ID is found. This check will
    * eventually become redundant, as macro IDs are generated for pages and
    * transparently propagate out to all instances.
    * 
    * This backwards compatibility logic does not apply to Forge macros; those
    * can only be retrieved by their ID.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content that the macro is in.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID for the content that contains the macro.</li>
    *   <li>version: The version of the content that contains the macro. Specifying `0` as the `version` will return the macro body for the latest content version.</li>
    *   <li>macroId: The ID of the macro. For apps, this is passed to the macro by the Connect/Forge framework. Otherwise, find the macro ID by querying the desired content and version, then expanding the body in storage format. For example, '/content/196611/version/7?expand=content.body.storage'.</li>
    *   <li>to: The content representation to return the macro in. Currently, the following conversions are allowed:  - `export_view` - `styled_view` - `view`</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when converting to `view` format).   If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is  necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for any nested dynamic content (i.e. macros).  - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro) - `mediaToken` returns JWT token for retrieving attachment data from Media API - `macroRenderedOutput` additionally converts body to view format - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs - `webresource.superbatch.uris.all` returns all common dependencies as static URLs - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags - `webresource.uris.js` returns JS dependencies specific to conversion - `webresource.uris.css` returns CSS dependencies specific to conversion - `webresource.uris.all` returns all dependencies specific to conversion      - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags</li>
    *   <li>allowCache: If this field is false, the cache will erase its current value and begin a conversion. If this field is true, the cache will not erase its current value, and will set the status of the result in cache to RERUNNING. Once the data is updated, the status will change to COMPLETED.  Large macros that take long to convert, and who want to show intermediate, but potentially stale data, immediately should set this field to true. Cache values are stored per macro per user per content and expansions.</li>
    *   <li>spaceKeyContext: The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted to a link to the "Example page" page in the "TEST" space.</li>
    *   <li>embeddedContentRender: Mode used for rendering embedded content, like attachments.  - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.</li>
    * </ul>
    */
    public AsyncId getContentByIdhistoryByVersionMacroIdbyMacroIdconvertAsyncByToV1(Consumer<GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1OperationSpec> spec) {
        GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1OperationSpec r = new GetContentByIDHistoryByVersionMacroIDByMacroIDConvertAsyncByToV1OperationSpec(spec);
        return api.getContentByIdhistoryByVersionMacroIdbyMacroIdconvertAsyncByToV1(r.id(), r.version(), r.macroId(), r.to(), r.expand(), r.allowCache(), r.spaceKeyContext(), r.embeddedContentRender());
    }

    /**
    * PostContentByIDLabelV1
    * Add labels to content
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that will have labels added to it.</li>
    *   <li>payload: The labels to add to the content.</li>
    * </ul>
    */
    public LabelArray postContentByIdlabelV1(Consumer<PostContentByIDLabelV1OperationSpec> spec) {
        PostContentByIDLabelV1OperationSpec r = new PostContentByIDLabelV1OperationSpec(spec);
        return api.postContentByIdlabelV1(r.id(), r.payload());
    }

    /**
    * DeleteContentByIDLabelV1
    * Remove label from content using query parameter
    * Removes a label from a piece of content. Labels can't be deleted from archived content.
    * This is similar to [Remove label from content](#api-content-id-label-label-delete)
    * except that the label name is specified via a query parameter.
    * 
    * Use this method if the label name has "/" characters, as
    * [Remove label from content using query parameter](#api-content-id-label-delete)
    * does not accept "/" characters for the label name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the label will be removed from.</li>
    *   <li>name: The name of the label to be removed.</li>
    * </ul>
    */
    public void deleteContentByIdlabelV1(Consumer<DeleteContentByIDLabelV1OperationSpec> spec) {
        DeleteContentByIDLabelV1OperationSpec r = new DeleteContentByIDLabelV1OperationSpec(spec);
        api.deleteContentByIdlabelV1(r.id(), r.name());
    }

    /**
    * DeleteContentByIDLabelByLabelV1
    * Remove label from content
    * Removes a label from a piece of content. Labels can't be deleted from archived content.
    * This is similar to [Remove label from content using query parameter](#api-content-id-label-delete)
    * except that the label name is specified via a path parameter.
    * 
    * Use this method if the label name does not have "/" characters, as the path
    * parameter does not accept "/" characters for security reasons. Otherwise,
    * use [Remove label from content using query parameter](#api-content-id-label-delete).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the label will be removed from.</li>
    *   <li>label: The name of the label to be removed.</li>
    * </ul>
    */
    public void deleteContentByIdlabelByLabelV1(Consumer<DeleteContentByIDLabelByLabelV1OperationSpec> spec) {
        DeleteContentByIDLabelByLabelV1OperationSpec r = new DeleteContentByIDLabelByLabelV1OperationSpec(spec);
        api.deleteContentByIdlabelByLabelV1(r.id(), r.label());
    }

    /**
    * GetContentByIDNotificationChildCreatedV1
    * Get watches for page
    * Returns the watches for a page. A user that watches a page will receive
    * receive notifications when the page is updated.
    * 
    * If you want to manage watches for a page, use the following `user` methods:
    * 
    * - [Get content watch status for user](#api-user-watch-content-contentId-get)
    * - [Add content watch](#api-user-watch-content-contentId-post)
    * - [Remove content watch](#api-user-watch-content-contentId-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its watches.</li>
    *   <li>start: The starting index of the returned watches.</li>
    *   <li>limit: The maximum number of watches to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public WatchArray getContentByIdnotificationChildCreatedV1(Consumer<GetContentByIDNotificationChildCreatedV1OperationSpec> spec) {
        GetContentByIDNotificationChildCreatedV1OperationSpec r = new GetContentByIDNotificationChildCreatedV1OperationSpec(spec);
        return api.getContentByIdnotificationChildCreatedV1(r.id(), r.start(), r.limit());
    }

    /**
    * GetContentByIDNotificationCreatedV1
    * Get watches for space
    * Returns all space watches for the space that the content is in. A user that
    * watches a space will receive receive notifications when any content in the
    * space is updated.
    * 
    * If you want to manage watches for a space, use the following `user` methods:
    * 
    * - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
    * - [Add space watch](#api-user-watch-space-spaceKey-post)
    * - [Remove space watch](#api-user-watch-space-spaceKey-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its watches.</li>
    *   <li>start: The starting index of the returned watches.</li>
    *   <li>limit: The maximum number of watches to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public SpaceWatchArray getContentByIdnotificationCreatedV1(Consumer<GetContentByIDNotificationCreatedV1OperationSpec> spec) {
        GetContentByIDNotificationCreatedV1OperationSpec r = new GetContentByIDNotificationCreatedV1OperationSpec(spec);
        return api.getContentByIdnotificationCreatedV1(r.id(), r.start(), r.limit());
    }

    /**
    * PostContentByIDPagehierarchyCopyV1
    * Copy page hierarchy
    * Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.
    *  The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.
    *  The titleOptions object defines the rules of renaming page titles during the copy;
    *  for example, search and replace can be used in conjunction to rewrite the copied page titles.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the /longtask/&lt;taskId&gt; REST API to get the copy task status.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: </li>
    *   <li>payload: Request object from json post body</li>
    * </ul>
    */
    public void postContentByIdpagehierarchyCopyV1(Consumer<PostContentByIDPagehierarchyCopyV1OperationSpec> spec) {
        PostContentByIDPagehierarchyCopyV1OperationSpec r = new PostContentByIDPagehierarchyCopyV1OperationSpec(spec);
        api.postContentByIdpagehierarchyCopyV1(r.id(), r.payload());
    }

    /**
    * PostContentByIDCopyV1
    * Copy single page
    * Copies a single page and its associated properties, permissions, attachments, and custom contents.
    *  The `id` path parameter refers to the content ID of the page to copy. The target of the page to be copied
    *  is defined using the `destination` in the request body and can be one of the following types.
    * 
    *   - `space`: page will be copied to the specified space as a root page on the space
    *   - `parent_page`: page will be copied as a child of the specified parent page
    *   - `parent_content`: page will be copied as a child of the specified parent content
    *   - `existing_page`: page will be copied and replace the specified page
    * 
    * By default, the following objects are expanded: `space`, `history`, `version`.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the space that the content will be copied in and permission to update the content if copying to an `existing_page`.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: </li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand. Maximum sub-expansions allowed is `8`.  - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards. Use this if you only need to check whether the content has children of a particular type. - `childTypes.attachment` returns whether the content has attachments. - `childTypes.comment` returns whether the content has comments. - `childTypes.page` returns whether the content has child pages. - `childTypes.whiteboard` returns whether the content has child whiteboards. - `childTypes.database` returns whether the content has child databases. - `childTypes.embed` returns whether the content has child embeds (smartlinks). - `childTypes.folder` returns whether the content has child folder. - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get). - `metadata.currentuser` returns information about the current user in relation to the content, including when they last viewed it, modified it, contributed to it, or added it as a favorite. - `metadata.properties` returns content properties that have been set via the Confluence REST API. - `metadata.labels` returns the labels that have been added to the content. - `metadata.frontend` this property is only used by Atlassian. - `operations` returns the operations for the content, which are used when setting permissions. - `children.page` returns pages that are descendants at the level immediately below the content. - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content. - `children.database` returns databases that are descendants at the level immediately below the content. - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content. - `children.folder` returns folders that are descendants at the level immediately below the content. - `children.attachment` returns all attachments for the content. - `children.comment` returns all comments on the content. - `restrictions.read.restrictions.user` returns the users that have permission to read the content. - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that this may return deleted groups, because deleting a group doesn't remove associated restrictions. - `restrictions.update.restrictions.user` returns the users that have permission to update the content. - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that this may return deleted groups because deleting a group doesn't remove associated restrictions. - `history` returns the history of the content, including the date it was created. - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated. - `history.previousVersion` returns information about the update prior to the current content update. - `history.contributors` returns all of the users who have contributed to the content. - `history.nextVersion` returns information about the update after to the current content update. - `ancestors` returns the parent content, if the content is a page or whiteboard. - `body` returns the body of the content in different formats, including the editor format, view format, and export format. - `body.storage` returns the body of content in storage format. - `body.view` returns the body of content in view format. - `version` returns information about the most recent update of the content, including who updated it and when it was updated. - `descendants.page` returns pages that are descendants at any level below the content. - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content. - `descendants.database` returns databases that are descendants at any level below the content. - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content. - `descendants.folder` returns folders that are descendants at any level below the content. - `descendants.attachment` returns all attachments for the content, same as `children.attachment`. - `descendants.comment` returns all comments on the content, same as `children.comment`. - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).  In addition, the following comment-specific expansions can be used: - `extensions.inlineProperties` returns inline comment-specific properties. - `extensions.resolution` returns the resolution status of each comment.</li>
    *   <li>payload: Request object from json post body</li>
    * </ul>
    */
    public Content postContentByIdcopyV1(Consumer<PostContentByIDCopyV1OperationSpec> spec) {
        PostContentByIDCopyV1OperationSpec r = new PostContentByIDCopyV1OperationSpec(spec);
        return api.postContentByIdcopyV1(r.id(), r.expand(), r.payload());
    }

    /**
    * PostContentByIDPermissionCheckV1
    * Check content permissions
    * Check if a user or a group can perform an operation to the specified content. The `operation` to check
    * must be provided. The user’s account ID or the ID of the group can be provided in the `subject` to check
    * permissions against a specified user or group. The following permission checks are done to make sure that the
    * user or group has the proper access:
    * 
    * - site permissions
    * - space permissions
    * - content restrictions
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission) if checking permission for self,
    * otherwise 'Confluence Administrator' global permission is required.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to check permissions against.</li>
    *   <li>payload: The content permission request.</li>
    * </ul>
    */
    public PermissionCheckResponse postContentByIdpermissionCheckV1(Consumer<PostContentByIDPermissionCheckV1OperationSpec> spec) {
        PostContentByIDPermissionCheckV1OperationSpec r = new PostContentByIDPermissionCheckV1OperationSpec(spec);
        return api.postContentByIdpermissionCheckV1(r.id(), r.payload());
    }

    /**
    * GetContentByIDRestrictionV1
    * Get restrictions
    * Returns the restrictions on a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its restrictions.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions to expand. By default, the following objects are expanded: `restrictions.user`, `restrictions.group`.  - `restrictions.user` returns the piece of content that the restrictions are applied to. - `restrictions.group` returns the piece of content that the restrictions are applied to. - `content` returns the piece of content that the restrictions are applied to.</li>
    *   <li>start: The starting index of the users and groups in the returned restrictions.</li>
    *   <li>limit: The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public ContentRestrictionArray getContentByIdrestrictionV1(Consumer<GetContentByIDRestrictionV1OperationSpec> spec) {
        GetContentByIDRestrictionV1OperationSpec r = new GetContentByIDRestrictionV1OperationSpec(spec);
        return api.getContentByIdrestrictionV1(r.id(), r.expand(), r.start(), r.limit());
    }

    /**
    * PutContentByIDRestrictionV1
    * Update restrictions
    * Updates restrictions for a piece of content. This removes the existing
    * restrictions and replaces them with the restrictions in the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to update restrictions for.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - `restrictions.user` returns the piece of content that the restrictions are applied to. Expanded by default. - `restrictions.group` returns the piece of content that the restrictions are applied to. Expanded by default. - `content` returns the piece of content that the restrictions are applied to.</li>
    *   <li>payload: The updated restrictions for the content.</li>
    * </ul>
    */
    public ContentRestrictionArray putContentByIdrestrictionV1(Consumer<PutContentByIDRestrictionV1OperationSpec> spec) {
        PutContentByIDRestrictionV1OperationSpec r = new PutContentByIDRestrictionV1OperationSpec(spec);
        return api.putContentByIdrestrictionV1(r.id(), r.expand(), r.payload());
    }

    /**
    * PostContentByIDRestrictionV1
    * Add restrictions
    * Adds restrictions to a piece of content. Note, this does not change any
    * existing restrictions on the content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to add restrictions to.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - `restrictions.user` returns the piece of content that the restrictions are applied to. Expanded by default. - `restrictions.group` returns the piece of content that the restrictions are applied to. Expanded by default. - `content` returns the piece of content that the restrictions are applied to.</li>
    *   <li>payload: The restrictions to be added to the content.</li>
    * </ul>
    */
    public ContentRestrictionArray postContentByIdrestrictionV1(Consumer<PostContentByIDRestrictionV1OperationSpec> spec) {
        PostContentByIDRestrictionV1OperationSpec r = new PostContentByIDRestrictionV1OperationSpec(spec);
        return api.postContentByIdrestrictionV1(r.id(), r.expand(), r.payload());
    }

    /**
    * DeleteContentByIDRestrictionV1
    * Delete restrictions
    * Removes all restrictions (read and update) on a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to remove restrictions from.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions (returned in response) to expand.  - `restrictions.user` returns the piece of content that the restrictions are applied to. Expanded by default. - `restrictions.group` returns the piece of content that the restrictions are applied to. Expanded by default. - `content` returns the piece of content that the restrictions are applied to.</li>
    * </ul>
    */
    public ContentRestrictionArray deleteContentByIdrestrictionV1(Consumer<DeleteContentByIDRestrictionV1OperationSpec> spec) {
        DeleteContentByIDRestrictionV1OperationSpec r = new DeleteContentByIDRestrictionV1OperationSpec(spec);
        return api.deleteContentByIdrestrictionV1(r.id(), r.expand());
    }

    /**
    * GetContentByIDRestrictionByOperationV1
    * Get restrictions by operation
    * Returns restrictions on a piece of content by operation. This method is
    * similar to [Get restrictions](#api-content-id-restriction-get) except that
    * the operations are properties of the return object, rather than items in
    * a results array.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its restrictions.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions to expand.  - `restrictions.user` returns the piece of content that the restrictions are applied to. Expanded by default. - `restrictions.group` returns the piece of content that the restrictions are applied to. Expanded by default. - `content` returns the piece of content that the restrictions are applied to.</li>
    * </ul>
    */
    public GetRestrictionsByOperation getContentByIdrestrictionByOperationV1(Consumer<GetContentByIDRestrictionByOperationV1OperationSpec> spec) {
        GetContentByIDRestrictionByOperationV1OperationSpec r = new GetContentByIDRestrictionByOperationV1OperationSpec(spec);
        return api.getContentByIdrestrictionByOperationV1(r.id(), r.expand());
    }

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyV1
    * Get restrictions for operation
    * Returns the restictions on a piece of content for a given operation (read
    * or update).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its restrictions.</li>
    *   <li>operationKey: The operation type of the restrictions to be returned.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content restrictions to expand.  - `restrictions.user` returns the piece of content that the restrictions are applied to. Expanded by default. - `restrictions.group` returns the piece of content that the restrictions are applied to. Expanded by default. - `content` returns the piece of content that the restrictions are applied to.</li>
    *   <li>start: The starting index of the users and groups in the returned restrictions.</li>
    *   <li>limit: The maximum number of users and the maximum number of groups, in the returned restrictions, to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public ContentRestriction getContentByIdrestrictionByOperationByOperationKeyV1(Consumer<GetContentByIDRestrictionByOperationByOperationKeyV1OperationSpec> spec) {
        GetContentByIDRestrictionByOperationByOperationKeyV1OperationSpec r = new GetContentByIDRestrictionByOperationByOperationKeyV1OperationSpec(spec);
        return api.getContentByIdrestrictionByOperationByOperationKeyV1(r.id(), r.operationKey(), r.expand(), r.start(), r.limit());
    }

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Get content restriction status for group
    * Returns whether the specified content restriction applies to a group.
    * For example, if a page with `id=123` has a `read` restriction for the `123456` group id,
    * the following request will return `true`:
    * 
    * `/wiki/rest/api/content/123/restriction/byOperation/read/byGroupId/123456`
    * 
    * Note that a response of `true` does not guarantee that the group can view the page, as it does not account for
    * account-inherited restrictions, space permissions, or even product access. For more
    * information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that the restriction applies to.</li>
    *   <li>groupId: The id of the group to be queried for whether the content restriction applies to it.</li>
    * </ul>
    */
    public void getContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(Consumer<GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec> spec) {
        GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec r = new GetContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec(spec);
        api.getContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(r.id(), r.operationKey(), r.groupId());
    }

    /**
    * PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Add group to content restriction
    * Adds a group to a content restriction by Group Id. That is, grant read or update
    * permission to the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that the restriction applies to.</li>
    *   <li>groupId: The groupId of the group to add to the content restriction.</li>
    * </ul>
    */
    public void putContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(Consumer<PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec> spec) {
        PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec r = new PutContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec(spec);
        api.putContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(r.id(), r.operationKey(), r.groupId());
    }

    /**
    * DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1
    * Remove group from content restriction
    * Removes a group from a content restriction. That is, remove read or update
    * permission for the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that the restriction applies to.</li>
    *   <li>groupId: The id of the group to remove from the content restriction.</li>
    * </ul>
    */
    public void deleteContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(Consumer<DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec> spec) {
        DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec r = new DeleteContentByIDRestrictionByOperationByOperationKeyByGroupIDByGroupIDV1OperationSpec(spec);
        api.deleteContentByIdrestrictionByOperationByOperationKeyByGroupIdbyGroupIdv1(r.id(), r.operationKey(), r.groupId());
    }

    /**
    * GetContentByIDRestrictionByOperationByOperationKeyUserV1
    * Get content restriction status for user
    * Returns whether the specified content restriction applies to a user.
    * For example, if a page with `id=123` has a `read` restriction for a user with an account ID of
    * `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`, the following request will return `true`:
    * 
    * `/wiki/rest/api/content/123/restriction/byOperation/read/user?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`
    * 
    * Note that a response of `true` does not guarantee that the user can view the page, as it does not account for
    * account-inherited restrictions, space permissions, or even product access. For more
    * information, see [Confluence permissions](https://confluence.atlassian.com/x/_AozKw).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that is restricted.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void getContentByIdrestrictionByOperationByOperationKeyUserV1(Consumer<GetContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec> spec) {
        GetContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec r = new GetContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec(spec);
        api.getContentByIdrestrictionByOperationByOperationKeyUserV1(r.id(), r.operationKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * PutContentByIDRestrictionByOperationByOperationKeyUserV1
    * Add user to content restriction
    * Adds a user to a content restriction. That is, grant read or update
    * permission to the user for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that the restriction applies to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void putContentByIdrestrictionByOperationByOperationKeyUserV1(Consumer<PutContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec> spec) {
        PutContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec r = new PutContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec(spec);
        api.putContentByIdrestrictionByOperationByOperationKeyUserV1(r.id(), r.operationKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteContentByIDRestrictionByOperationByOperationKeyUserV1
    * Remove user from content restriction
    * Removes a group from a content restriction. That is, remove read or update
    * permission for the group for a piece of content.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the restriction applies to.</li>
    *   <li>operationKey: The operation that the restriction applies to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void deleteContentByIdrestrictionByOperationByOperationKeyUserV1(Consumer<DeleteContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec> spec) {
        DeleteContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec r = new DeleteContentByIDRestrictionByOperationByOperationKeyUserV1OperationSpec(spec);
        api.deleteContentByIdrestrictionByOperationByOperationKeyUserV1(r.id(), r.operationKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetContentByIDStateV1
    * Get content state
    * Gets the current content state of the draft or current version of content. To specify the draft version, set
    * the parameter status to draft, otherwise archived or current will get the relevant published state.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The id of the content whose content state is of interest.</li>
    *   <li>status: Set status to one of [current,draft,archived]. Default value is current.</li>
    * </ul>
    */
    public ContentStateResponse getContentByIdstateV1(Consumer<GetContentByIDStateV1OperationSpec> spec) {
        GetContentByIDStateV1OperationSpec r = new GetContentByIDStateV1OperationSpec(spec);
        return api.getContentByIdstateV1(r.id(), r.status());
    }

    /**
    * PutContentByIDStateV1
    * Set the content state of a content and publishes a new version of the content.
    * Sets the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new state.
    * 
    * You may pass in either an id of a state, or the name and color of a desired new state.
    * If all 3 are passed in, id will be used.
    * If the name and color passed in already exist under the current user's existing custom states, the existing state will be reused.
    * If custom states are disabled in the space of the content (which can be determined by getting the content state space settings of the content's space)
    * then this set will fail.
    * 
    * You may not remove a content state via this PUT request. You must use the DELETE method. A specified state is required in the body of this request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The Id of the content whose content state is to be set.</li>
    *   <li>status: Status of content onto which state will be placed. If draft, then draft state will change. If current, state will be placed onto a new version of the content with same body as previous version.</li>
    *   <li>payload: Content state fields for state. Pass in id for an existing state, or new name and color for best matching existing state, or new state if allowed in space.</li>
    * </ul>
    */
    public ContentStateResponse putContentByIdstateV1(Consumer<PutContentByIDStateV1OperationSpec> spec) {
        PutContentByIDStateV1OperationSpec r = new PutContentByIDStateV1OperationSpec(spec);
        return api.putContentByIdstateV1(r.id(), r.status(), r.payload());
    }

    /**
    * DeleteContentByIDStateV1
    * Removes the content state of a content and publishes a new version.
    * Removes the content state of the content specified and creates a new version
    * (publishes the content without changing the body) of the content with the new status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The Id of the content whose content state is to be set.</li>
    *   <li>status: status of content state from which to delete state. Can be draft or archived</li>
    * </ul>
    */
    public ContentStateResponse deleteContentByIdstateV1(Consumer<DeleteContentByIDStateV1OperationSpec> spec) {
        DeleteContentByIDStateV1OperationSpec r = new DeleteContentByIDStateV1OperationSpec(spec);
        return api.deleteContentByIdstateV1(r.id(), r.status());
    }

    /**
    * GetContentByIDStateAvailableV1
    * Gets available content states for content.
    * Gets content states that are available for the content to be set as.
    * Will return all enabled Space Content States.
    * Will only return most the 3 most recently published custom content states to match UI editor list.
    * To get all custom content states, use the /content-states endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to edit the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: id of content to get available states for</li>
    * </ul>
    */
    public AvailableContentStates getContentByIdstateAvailableV1(Consumer<GetContentByIDStateAvailableV1OperationSpec> spec) {
        GetContentByIDStateAvailableV1OperationSpec r = new GetContentByIDStateAvailableV1OperationSpec(spec);
        return api.getContentByIdstateAvailableV1(r.id());
    }

    /**
    * PostContentByIDVersionV1
    * Restore content version
    * Restores a historical version to be the latest version. That is, a new version
    * is created with the content of the historical version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content for which the history will be restored.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand. By default, the `content` object is expanded.  - `collaborators` returns the users that collaborated on the version. - `content` returns the content for the version.</li>
    *   <li>payload: The content version to be restored.</li>
    * </ul>
    */
    public Version postContentByIdversionV1(Consumer<PostContentByIDVersionV1OperationSpec> spec) {
        PostContentByIDVersionV1OperationSpec r = new PostContentByIDVersionV1OperationSpec(spec);
        return api.postContentByIdversionV1(r.id(), r.expand(), r.payload());
    }

    /**
    * DeleteContentByIDVersionByVersionNumberV1
    * Delete content version
    * Delete a historical version. This does not delete the changes made to the
    * content in that version, rather the changes for the deleted version are
    * rolled up into the next version. Note, you cannot delete the current version.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content that the version will be deleted from.</li>
    *   <li>versionNumber: The number of the version to be deleted. The version number starts from 1 up to current version.</li>
    * </ul>
    */
    public void deleteContentByIdversionByVersionNumberV1(Consumer<DeleteContentByIDVersionByVersionNumberV1OperationSpec> spec) {
        DeleteContentByIDVersionByVersionNumberV1OperationSpec r = new DeleteContentByIDVersionByVersionNumberV1OperationSpec(spec);
        api.deleteContentByIdversionByVersionNumberV1(r.id(), r.versionNumber());
    }

    /**
    * GetContentStatesV1
    * Get Custom Content States
    * Get custom content states that authenticated user has created.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**
    * Must have user authentication.
    *
    */
    public List<ContentState> getContentStatesV1(Consumer<GetContentStatesV1OperationSpec> spec) {
        GetContentStatesV1OperationSpec r = new GetContentStatesV1OperationSpec(spec);
        return api.getContentStatesV1();
    }

    /**
    * PostContentbodyConvertAsyncByToV1
    * Asynchronously convert content body
    * Converts a content body from one format to another format asynchronously.
    * Returns the asyncId for the asynchronous task.
    * 
    * Supported conversions:
    * 
    * - atlas_doc_format: editor, export_view, storage, styled_view, view
    * - storage: atlas_doc_format, editor, export_view, styled_view, view
    * - editor: storage
    * 
    * No other conversions are supported at the moment.
    * Once a conversion is completed, it will be available for 5 minutes at the result endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>to: The name of the target format for the content body.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand and populate. Expands are dependent on the `to` conversion format and may be irrelevant for certain conversions (e.g. `macroRenderedOutput` is redundant when converting to `view` format).   If rendering to `view` format, and the body content being converted includes arbitrary nested content (such as macros); then it is  necessary to include webresource expands in the request. Webresources for content body are the batched JS and CSS dependencies for any nested dynamic content (i.e. macros).  - `embeddedContent` returns metadata for nested content (e.g. page included using page include macro) - `mediaToken` returns JWT token for retrieving attachment data from Media API - `macroRenderedOutput` additionally converts body to view format - `webresource.superbatch.uris.js` returns all common JS dependencies as static URLs - `webresource.superbatch.uris.css` returns all common CSS dependencies as static URLs - `webresource.superbatch.uris.all` returns all common dependencies as static URLs - `webresource.superbatch.tags.all` returns all common JS dependencies as html `&lt;script&gt;` tags - `webresource.superbatch.tags.css` returns all common CSS dependencies as html `&lt;style&gt;` tags - `webresource.superbatch.tags.js` returns all common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags - `webresource.uris.js` returns JS dependencies specific to conversion - `webresource.uris.css` returns CSS dependencies specific to conversion - `webresource.uris.all` returns all dependencies specific to conversion      - `webresource.tags.all` returns common JS dependencies as html `&lt;script&gt;` tags - `webresource.tags.css` returns common CSS dependencies as html `&lt;style&gt;` tags - `webresource.tags.js` returns common dependencies as html `&lt;script&gt;` and `&lt;style&gt;` tags</li>
    *   <li>spaceKeyContext: The space key used for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `spaceKeyContext=TEST` parameter is provided, then the link will be converted to a link to the "Example page" page in the "TEST" space.</li>
    *   <li>contentIdContext: The content ID used to find the space for resolving embedded content (page includes, files, and links) in the content body. For example, if the source content contains the link `&lt;ac:link&gt;&lt;ri:page ri:content-title="Example page" /&gt;&lt;ac:link&gt;` and the `contentIdContext=123` parameter is provided, then the link will be converted to a link to the "Example page" page in the same space that has the content with ID=123. Note, `spaceKeyContext` will be ignored if this parameter is provided.</li>
    *   <li>allowCache: If this field is false, the cache will erase its current value and begin a new conversion. If this field is true, the cache will not erase its current value, and will set the status of the async conversion to RERUNNING. Once the data is updated, the status will change to COMPLETED.  Large macros that take long to convert, and whose data need not immediately up to date (same as previous conversion's result within last 5 minutes) should set this fields to true. Cache values are stored per user per content body and expansions.</li>
    *   <li>embeddedContentRender: Mode used for rendering embedded content, like attachments.  - `current` renders the embedded content using the latest version. - `version-at-save` renders the embedded content using the version at the time of save.</li>
    *   <li>payload: The content body to convert.</li>
    * </ul>
    */
    public AsyncId postContentbodyConvertAsyncByToV1(Consumer<PostContentbodyConvertAsyncByToV1OperationSpec> spec) {
        PostContentbodyConvertAsyncByToV1OperationSpec r = new PostContentbodyConvertAsyncByToV1OperationSpec(spec);
        return api.postContentbodyConvertAsyncByToV1(r.to(), r.expand(), r.spaceKeyContext(), r.contentIdContext(), r.allowCache(), r.embeddedContentRender(), r.payload());
    }

    /**
    * GetContentbodyConvertAsyncByIDV1
    * Get asynchronously converted content body from the id or the current status of the task.
    * Returns the asynchronous content body for the corresponding id if the task is complete 
    * or returns the status of the task.
    * 
    * After the task is completed, the result can be obtained for 5 minutes, or until an identical conversion request is made again,
    * with allowCache query param set to false.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * If request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The asyncId of the macro task to get the converted body.</li>
    * </ul>
    */
    public AsyncContentBody getContentbodyConvertAsyncByIdv1(Consumer<GetContentbodyConvertAsyncByIDV1OperationSpec> spec) {
        GetContentbodyConvertAsyncByIDV1OperationSpec r = new GetContentbodyConvertAsyncByIDV1OperationSpec(spec);
        return api.getContentbodyConvertAsyncByIdv1(r.id());
    }

    /**
    * GetContentbodyConvertAsyncBulkTasksV1
    * Get asynchronous content body conversion task result in bulk
    * Returns the content body for the corresponding `asyncId` of a completed conversion task. If
    * the task is not completed, the task status is returned instead.
    * 
    * Once a conversion task is completed, the result can be obtained for up to 5 minutes, or
    * until an identical conversion request is made again with the `allowCache` parameter set to
    * false.
    * 
    * Note that there is a maximum limit of 50 task results per request to this endpoint.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>ids: The asyncIds of the conversion tasks.</li>
    * </ul>
    */
    public List<AsyncContentBody> getContentbodyConvertAsyncBulkTasksV1(Consumer<GetContentbodyConvertAsyncBulkTasksV1OperationSpec> spec) {
        GetContentbodyConvertAsyncBulkTasksV1OperationSpec r = new GetContentbodyConvertAsyncBulkTasksV1OperationSpec(spec);
        return api.getContentbodyConvertAsyncBulkTasksV1(r.ids());
    }

    /**
    * PostContentbodyConvertAsyncBulkTasksV1
    * Create asynchronous content body conversion tasks in bulk
    * Asynchronously converts content bodies from one format to another format in bulk. Use the Content body
    * REST API to get the status of conversion tasks. Note that there is a maximum limit of 10 conversions per
    * request to this endpoint.
    * 
    * Supported conversions:
    * 
    * - storage: editor, export_view, styled_view, view
    * - editor: storage
    * 
    * Once a conversion task is completed, it is available for polling for up to 5 minutes.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space, and permission to view the content if the `spaceKeyContext` or
    * `contentIdContext` are present.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: An array of parameters to create content body conversion tasks.</li>
    * </ul>
    */
    public List<AsyncId> postContentbodyConvertAsyncBulkTasksV1(Consumer<PostContentbodyConvertAsyncBulkTasksV1OperationSpec> spec) {
        PostContentbodyConvertAsyncBulkTasksV1OperationSpec r = new PostContentbodyConvertAsyncBulkTasksV1OperationSpec(spec);
        return api.postContentbodyConvertAsyncBulkTasksV1(r.payload());
    }

    /**
    * GetLabelV1
    * Get label information
    * Returns label information and a list of contents associated with the label.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission). Only contents
    * that the user is permitted to view is returned.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>name: Name of the label to query.</li>
    *   <li>type: The type of contents that are to be returned.</li>
    *   <li>start: The starting offset for the results.</li>
    *   <li>limit: The number of results to be returned.</li>
    * </ul>
    */
    public LabelDetails getLabelV1(Consumer<GetLabelV1OperationSpec> spec) {
        GetLabelV1OperationSpec r = new GetLabelV1OperationSpec(spec);
        return api.getLabelV1(r.name(), r.type(), r.start(), r.limit());
    }

    /**
    * GetGroupV1
    * Get groups
    * Returns all user groups. The returned groups are ordered alphabetically in
    * ascending order by group name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>start: The starting index of the returned groups.</li>
    *   <li>limit: The maximum number of groups to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>accessType: The group permission level for which to filter results.</li>
    * </ul>
    */
    public GroupArrayWithLinks getGroupV1(Consumer<GetGroupV1OperationSpec> spec) {
        GetGroupV1OperationSpec r = new GetGroupV1OperationSpec(spec);
        return api.getGroupV1(r.start(), r.limit(), r.accessType());
    }

    /**
    * PostGroupV1
    * Create new user group
    * Creates a new user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: Name of the group that is to be created.</li>
    * </ul>
    */
    public Group postGroupV1(Consumer<PostGroupV1OperationSpec> spec) {
        PostGroupV1OperationSpec r = new PostGroupV1OperationSpec(spec);
        return api.postGroupV1(r.payload());
    }

    /**
    * GetGroupByIDV1
    * Get group
    * Returns a user group for a given group id.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The id of the group.</li>
    * </ul>
    */
    public Group getGroupByIdv1(Consumer<GetGroupByIDV1OperationSpec> spec) {
        GetGroupByIDV1OperationSpec r = new GetGroupByIDV1OperationSpec(spec);
        return api.getGroupByIdv1(r.id());
    }

    /**
    * DeleteGroupByIDV1
    * Delete user group
    * Delete user group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: Id of the group to delete.</li>
    * </ul>
    */
    public void deleteGroupByIdv1(Consumer<DeleteGroupByIDV1OperationSpec> spec) {
        DeleteGroupByIDV1OperationSpec r = new DeleteGroupByIDV1OperationSpec(spec);
        api.deleteGroupByIdv1(r.id());
    }

    /**
    * GetGroupPickerV1
    * Search groups by partial query
    * Get search results of groups by partial query provided.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>query: the search term used to query results.</li>
    *   <li>start: The starting index of the returned groups.</li>
    *   <li>limit: The maximum number of groups to return per page. Note, this is restricted to a maximum limit of 200 groups.</li>
    *   <li>shouldReturnTotalSize: Whether to include total size parameter in the results. Note, fetching total size property is an expensive operation; use it if your use case needs this value.</li>
    * </ul>
    */
    public GroupArrayWithLinks getGroupPickerV1(Consumer<GetGroupPickerV1OperationSpec> spec) {
        GetGroupPickerV1OperationSpec r = new GetGroupPickerV1OperationSpec(spec);
        return api.getGroupPickerV1(r.query(), r.start(), r.limit(), r.shouldReturnTotalSize());
    }

    /**
    * GetGroupByGroupIDMembersByGroupIDV1
    * Get group members
    * Returns the users that are members of a group.
    * 
    * Use updated Get group API
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: The id of the group to be queried for its members.</li>
    *   <li>start: The starting index of the returned users.</li>
    *   <li>limit: The maximum number of users to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>shouldReturnTotalSize: Whether to include total size parameter in the results. Note, fetching total size property is an expensive operation; use it if your use case needs this value.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.   - `personalSpace` returns the user's personal space, if it exists.   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.</li>
    * </ul>
    */
    public UserArray getGroupByGroupIdmembersByGroupIdv1(Consumer<GetGroupByGroupIDMembersByGroupIDV1OperationSpec> spec) {
        GetGroupByGroupIDMembersByGroupIDV1OperationSpec r = new GetGroupByGroupIDMembersByGroupIDV1OperationSpec(spec);
        return api.getGroupByGroupIdmembersByGroupIdv1(r.groupId(), r.start(), r.limit(), r.shouldReturnTotalSize(), r.expand());
    }

    /**
    * PostGroupUserByGroupIDV1
    * Add member to group by groupId
    * Adds a user as a member in a group represented by its groupId
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: GroupId of the group whose membership is updated</li>
    *   <li>payload: AccountId of the user who needs to be added as member.</li>
    * </ul>
    */
    public void postGroupUserByGroupIdv1(Consumer<PostGroupUserByGroupIDV1OperationSpec> spec) {
        PostGroupUserByGroupIDV1OperationSpec r = new PostGroupUserByGroupIDV1OperationSpec(spec);
        api.postGroupUserByGroupIdv1(r.groupId(), r.payload());
    }

    /**
    * DeleteGroupUserByGroupIDV1
    * Remove member from group using group id
    * Remove user as a member from a group.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * User must be a site admin.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>groupId: Id of the group whose membership is updated.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    * </ul>
    */
    public void deleteGroupUserByGroupIdv1(Consumer<DeleteGroupUserByGroupIDV1OperationSpec> spec) {
        DeleteGroupUserByGroupIDV1OperationSpec r = new DeleteGroupUserByGroupIDV1OperationSpec(spec);
        api.deleteGroupUserByGroupIdv1(r.groupId(), r.accountId(), r.key(), r.username());
    }

    /**
    * GetLongtaskV1
    * Get long-running tasks
    * Returns information about all active long-running tasks (e.g. space export),
    * such as how long each task has been running and the percentage of each task
    * that has completed.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>key: The key of the tasks.</li>
    *   <li>start: The starting index of the returned tasks.</li>
    *   <li>limit: The maximum number of tasks to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public LongTaskStatusArray getLongtaskV1(Consumer<GetLongtaskV1OperationSpec> spec) {
        GetLongtaskV1OperationSpec r = new GetLongtaskV1OperationSpec(spec);
        return api.getLongtaskV1(r.key(), r.start(), r.limit());
    }

    /**
    * GetLongtaskByIDV1
    * Get long-running task
    * Returns information about an active long-running task (e.g. space export),
    * such as how long it has been running and the percentage of the task that
    * has completed.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the task.</li>
    * </ul>
    */
    public LongTaskStatusWithLinks getLongtaskByIdv1(Consumer<GetLongtaskByIDV1OperationSpec> spec) {
        GetLongtaskByIDV1OperationSpec r = new GetLongtaskByIDV1OperationSpec(spec);
        return api.getLongtaskByIdv1(r.id());
    }

    /**
    * GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1
    * Find target entities related to a source entity
    * Returns all target entities that have a particular relationship to the
    * source entity. Note, relationships are one way.
    * 
    * For example, the following method finds all content that the current user
    * has an 'ignore' relationship with:
    * `GET /wiki/rest/api/relation/ignore/from/user/current/to/content`
    * Note, 'ignore' is an example custom relationship type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>relationName: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.</li>
    *   <li>sourceType: The source entity type of the relationship.</li>
    *   <li>sourceKey: The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.</li>
    *   <li>targetType: The target entity type of the relationship.</li>
    *   <li>sourceStatus: The status of the source. This parameter is only used when the `sourceType` is 'content'.</li>
    *   <li>targetStatus: The status of the target. This parameter is only used when the `targetType` is 'content'.</li>
    *   <li>sourceVersion: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.</li>
    *   <li>targetVersion: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.</li>
    *   <li>start: The starting index of the returned relationships.</li>
    *   <li>limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public RelationArray getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1(Consumer<GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1OperationSpec> spec) {
        GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1OperationSpec r = new GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1OperationSpec(spec);
        return api.getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeV1(r.relationName(), r.sourceType(), r.sourceKey(), r.targetType(), r.sourceStatus(), r.targetStatus(), r.sourceVersion(), r.targetVersion(), r.expand(), r.start(), r.limit());
    }

    /**
    * GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Find relationship from source to target
    * Find whether a particular type of relationship exists from a source
    * entity to a target entity. Note, relationships are one way.
    * 
    * For example, you can use this method to find whether the current user has
    * selected a particular page as a favorite (i.e. 'save for later'):
    * `GET /wiki/rest/api/relation/favourite/from/user/current/to/content/123`
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>relationName: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship as well as any other relationship types created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put).</li>
    *   <li>sourceType: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.</li>
    *   <li>sourceKey: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.</li>
    *   <li>targetType: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.</li>
    *   <li>targetKey: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.</li>
    *   <li>sourceStatus: The status of the source. This parameter is only used when the `sourceType` is 'content'.</li>
    *   <li>targetStatus: The status of the target. This parameter is only used when the `targetType` is 'content'.</li>
    *   <li>sourceVersion: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.</li>
    *   <li>targetVersion: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.</li>
    * </ul>
    */
    public Relation getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(Consumer<GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec> spec) {
        GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec r = new GetRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec(spec);
        return api.getRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(r.relationName(), r.sourceType(), r.sourceKey(), r.targetType(), r.targetKey(), r.sourceStatus(), r.targetStatus(), r.sourceVersion(), r.targetVersion(), r.expand());
    }

    /**
    * PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Create relationship
    * Creates a relationship between two entities (user, space, content). The
    * 'favourite' relationship is supported by default, but you can use this method
    * to create any type of relationship between two entities.
    * 
    * For example, the following method creates a 'sibling' relationship between
    * two pieces of content:
    * `PUT /wiki/rest/api/relation/sibling/from/content/123/to/content/456`
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>relationName: The name of the relationship. This method supports the 'favourite' (i.e. 'save for later') relationship. You can also specify any other value for this parameter to create a custom relationship type.</li>
    *   <li>sourceType: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.</li>
    *   <li>sourceKey: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.</li>
    *   <li>targetType: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.</li>
    *   <li>targetKey: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.</li>
    *   <li>sourceStatus: The status of the source. This parameter is only used when the `sourceType` is 'content'.</li>
    *   <li>targetStatus: The status of the target. This parameter is only used when the `targetType` is 'content'.</li>
    *   <li>sourceVersion: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.</li>
    *   <li>targetVersion: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.</li>
    * </ul>
    */
    public Relation putRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(Consumer<PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec> spec) {
        PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec r = new PutRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec(spec);
        return api.putRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(r.relationName(), r.sourceType(), r.sourceKey(), r.targetType(), r.targetKey(), r.sourceStatus(), r.targetStatus(), r.sourceVersion(), r.targetVersion());
    }

    /**
    * DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1
    * Delete relationship
    * Deletes a relationship between two entities (user, space, content).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    * For favourite relationships, the current user can only delete their own
    * favourite relationships. A space administrator can delete favourite
    * relationships for any user.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>relationName: The name of the relationship.</li>
    *   <li>sourceType: The source entity type of the relationship. This must be 'user', if the `relationName` is 'favourite'.</li>
    *   <li>sourceKey: - The identifier for the source entity:  - If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `sourceType` is 'content', then specify the content ID. - If `sourceType` is 'space', then specify the space key.</li>
    *   <li>targetType: The target entity type of the relationship. This must be 'space' or 'content', if the `relationName` is 'favourite'.</li>
    *   <li>targetKey: - The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.</li>
    *   <li>sourceStatus: The status of the source. This parameter is only used when the `sourceType` is 'content'.</li>
    *   <li>targetStatus: The status of the target. This parameter is only used when the `targetType` is 'content'.</li>
    *   <li>sourceVersion: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.</li>
    *   <li>targetVersion: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.</li>
    * </ul>
    */
    public void deleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(Consumer<DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec> spec) {
        DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec r = new DeleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1OperationSpec(spec);
        api.deleteRelationByRelationNameFromBySourceTypeBySourceKeyToByTargetTypeByTargetKeyV1(r.relationName(), r.sourceType(), r.sourceKey(), r.targetType(), r.targetKey(), r.sourceStatus(), r.targetStatus(), r.sourceVersion(), r.targetVersion());
    }

    /**
    * GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1
    * Find source entities related to a target entity
    * Returns all target entities that have a particular relationship to the
    * source entity. Note, relationships are one way.
    * 
    * For example, the following method finds all users that have a 'collaborator'
    * relationship to a piece of content with an ID of '1234':
    * `GET /wiki/rest/api/relation/collaborator/to/content/1234/from/user`
    * Note, 'collaborator' is an example custom relationship type.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view both the target entity and source entity.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>relationName: The name of the relationship. This method supports relationships created via [Create relationship](#api-wiki-rest-api-relation-relationname-from-sourcetype-sourcekey-to-targettype-targetkey-put). Note, this method does not support 'like' or 'favourite' relationships.</li>
    *   <li>sourceType: The source entity type of the relationship.</li>
    *   <li>targetType: The target entity type of the relationship.</li>
    *   <li>targetKey: The identifier for the target entity:  - If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or the account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details. - If `targetType` is 'content', then specify the content ID. - If `targetType` is 'space', then specify the space key.</li>
    *   <li>sourceStatus: The status of the source. This parameter is only used when the `sourceType` is 'content'.</li>
    *   <li>targetStatus: The status of the target. This parameter is only used when the `targetType` is 'content'.</li>
    *   <li>sourceVersion: The version of the source. This parameter is only used when the `sourceType` is 'content' and the `sourceStatus` is 'historical'.</li>
    *   <li>targetVersion: The version of the target. This parameter is only used when the `targetType` is 'content' and the `targetStatus` is 'historical'.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the response object to expand.  - `relationData` returns information about the relationship, such as who created it and when it was created. - `source` returns the source entity. - `target` returns the target entity.</li>
    *   <li>start: The starting index of the returned relationships.</li>
    *   <li>limit: The maximum number of relationships to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public RelationArray getRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1(Consumer<GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1OperationSpec> spec) {
        GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1OperationSpec r = new GetRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1OperationSpec(spec);
        return api.getRelationByRelationNameToByTargetTypeByTargetKeyFromBySourceTypeV1(r.relationName(), r.sourceType(), r.targetType(), r.targetKey(), r.sourceStatus(), r.targetStatus(), r.sourceVersion(), r.targetVersion(), r.expand(), r.start(), r.limit());
    }

    /**
    * GetSearchV1
    * Search content
    * Searches for content using the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.** 
    * See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * 
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the entities. Note, only entities that the user has
    * permission to view will be returned.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.</li>
    *   <li>cqlcontext: The space, content, and content status to execute the search against.  - `spaceKey` Key of the space to search against. Optional. - `contentId` ID of the content to search against. Optional. Must be in the space specified by `spaceKey`. - `contentStatuses` Content statuses to search against. Optional.  Specify these values in an object. For example, `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`</li>
    *   <li>cursor: Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.</li>
    *   <li>next: </li>
    *   <li>prev: </li>
    *   <li>limit: The maximum number of content objects to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>start: The start point of the collection to return</li>
    *   <li>includeArchivedSpaces: Whether to include content from archived spaces in the results.</li>
    *   <li>excludeCurrentSpaces: Whether to exclude current spaces and only show archived spaces.</li>
    *   <li>excerpt: The excerpt strategy to apply to the result</li>
    *   <li>sitePermissionTypeFilter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.</li>
    *   <li>expand: </li>
    * </ul>
    */
    public SearchPageResponseSearchResult getSearchV1(Consumer<GetSearchV1OperationSpec> spec) {
        GetSearchV1OperationSpec r = new GetSearchV1OperationSpec(spec);
        return api.getSearchV1(r.cql(), r.cqlcontext(), r.cursor(), r.next(), r.prev(), r.limit(), r.start(), r.includeArchivedSpaces(), r.excludeCurrentSpaces(), r.excerpt(), r.sitePermissionTypeFilter(), r.expand());
    }

    /**
    * GetSearchUserV1
    * Search users
    * Searches for users using user-specific queries from the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.
    * 
    * Note that some user fields may be set to null depending on the user's privacy settings.
    * These are: email, profilePicture, displayName, and timeZone.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>cql: The CQL query to be used for the search. See [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) for instructions on how to build a CQL query.  Example queries:           cql=type=user will return up to 10k users           cql=user="1234" will return user with accountId "1234"           You can also use IN, NOT IN, != operators           cql=user IN ("12", "34") will return users with accountids "12" and "34"           cql=user.fullname~jo will return users with nickname/full name starting with "jo"           cql=user.accountid="123" will return user with accountId "123"</li>
    *   <li>start: The starting index of the returned users.</li>
    *   <li>limit: The maximum number of user objects to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.  - `operations` returns the operations for the user, which are used when setting permissions. - `personalSpace` returns the personal space of the user.</li>
    *   <li>sitePermissionTypeFilter: Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator` for external/guest users, and `all` to include all permission types.</li>
    * </ul>
    */
    public SearchPageResponseSearchResult getSearchUserV1(Consumer<GetSearchUserV1OperationSpec> spec) {
        GetSearchUserV1OperationSpec r = new GetSearchUserV1OperationSpec(spec);
        return api.getSearchUserV1(r.cql(), r.start(), r.limit(), r.expand(), r.sitePermissionTypeFilter());
    }

    /**
    * GetSettingsLookandfeelV1
    * Get look and feel settings
    * Returns the look and feel settings for the site or a single space. This
    * includes attributes such as the color scheme, padding, and border radius.
    * 
    * The look and feel settings for a space can be inherited from the global
    * look and feel settings or provided by a theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * None
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space for which the look and feel settings will be returned. If this is not set, only the global look and feel settings are returned.</li>
    * </ul>
    */
    public LookAndFeelSettings getSettingsLookandfeelV1(Consumer<GetSettingsLookandfeelV1OperationSpec> spec) {
        GetSettingsLookandfeelV1OperationSpec r = new GetSettingsLookandfeelV1OperationSpec(spec);
        return api.getSettingsLookandfeelV1(r.spaceKey());
    }

    /**
    * PutSettingsLookandfeelV1
    * Select look and feel settings
    * Sets the look and feel settings to the default (global) settings, the
    * custom settings, or the current theme's settings for a space.
    * The custom and theme settings can only be selected if there is already
    * a theme set for a space. Note, the default space settings are inherited
    * from the current global settings.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The look and feel type to be set.</li>
    * </ul>
    */
    public LookAndFeelSelection putSettingsLookandfeelV1(Consumer<PutSettingsLookandfeelV1OperationSpec> spec) {
        PutSettingsLookandfeelV1OperationSpec r = new PutSettingsLookandfeelV1OperationSpec(spec);
        return api.putSettingsLookandfeelV1(r.payload());
    }

    /**
    * PostSettingsLookandfeelCustomV1
    * Update look and feel settings
    * Updates the look and feel settings for the site or for a single space.
    * If custom settings exist, they are updated. If no custom settings exist,
    * then a set of custom settings is created.
    * 
    * Note, if a theme is selected for a space, the space look and feel settings
    * are provided by the theme and cannot be overridden.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space for which the look and feel settings will be updated. If this is not set, the global look and feel settings will be updated.</li>
    *   <li>payload: The updated settings. All values for the settings must be included, regardless of whether they are being changed.  One way to create the request body is to copy the settings from the response body of [Get look and feel settings](#api-settings-lookandfeel-get) and modify it as needed.</li>
    * </ul>
    */
    public Object postSettingsLookandfeelCustomV1(Consumer<PostSettingsLookandfeelCustomV1OperationSpec> spec) {
        PostSettingsLookandfeelCustomV1OperationSpec r = new PostSettingsLookandfeelCustomV1OperationSpec(spec);
        return api.postSettingsLookandfeelCustomV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSettingsLookandfeelCustomV1
    * Reset look and feel settings
    * Resets the custom look and feel settings for the site or a single space.
    * This changes the values of the custom settings to be the same as the
    * default settings. It does not change which settings (default or custom)
    * are selected. Note, the default space settings are inherited from the
    * current global settings.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space for which the look and feel settings will be reset. If this is not set, the global look and feel settings will be reset.</li>
    * </ul>
    */
    public void deleteSettingsLookandfeelCustomV1(Consumer<DeleteSettingsLookandfeelCustomV1OperationSpec> spec) {
        DeleteSettingsLookandfeelCustomV1OperationSpec r = new DeleteSettingsLookandfeelCustomV1OperationSpec(spec);
        api.deleteSettingsLookandfeelCustomV1(r.spaceKey());
    }

    /**
    * GetSettingsSystemInfoV1
    * Get system info
    * Returns the system information for the Confluence Cloud tenant. This
    * information is used by Atlassian.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    */
    public SystemInfoEntity getSettingsSystemInfoV1(Consumer<GetSettingsSystemInfoV1OperationSpec> spec) {
        GetSettingsSystemInfoV1OperationSpec r = new GetSettingsSystemInfoV1OperationSpec(spec);
        return api.getSettingsSystemInfoV1();
    }

    /**
    * GetSettingsThemeV1
    * Get themes
    * Returns all themes, not including the default theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>start: The starting index of the returned themes.</li>
    *   <li>limit: The maximum number of themes to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public ThemeArray getSettingsThemeV1(Consumer<GetSettingsThemeV1OperationSpec> spec) {
        GetSettingsThemeV1OperationSpec r = new GetSettingsThemeV1OperationSpec(spec);
        return api.getSettingsThemeV1(r.start(), r.limit());
    }

    /**
    * GetSettingsThemeSelectedV1
    * Get global theme
    * Returns the globally assigned theme.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    */
    public Theme getSettingsThemeSelectedV1(Consumer<GetSettingsThemeSelectedV1OperationSpec> spec) {
        GetSettingsThemeSelectedV1OperationSpec r = new GetSettingsThemeSelectedV1OperationSpec(spec);
        return api.getSettingsThemeSelectedV1();
    }

    /**
    * GetSettingsThemeByThemeKeyV1
    * Get theme
    * Returns a theme. This includes information about the theme name,
    * description, and icon.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>themeKey: The key of the theme to be returned.</li>
    * </ul>
    */
    public Theme getSettingsThemeByThemeKeyV1(Consumer<GetSettingsThemeByThemeKeyV1OperationSpec> spec) {
        GetSettingsThemeByThemeKeyV1OperationSpec r = new GetSettingsThemeByThemeKeyV1OperationSpec(spec);
        return api.getSettingsThemeByThemeKeyV1(r.themeKey());
    }

    /**
    * PostSpaceV1
    * Create space
    * Creates a new space. Note, currently you cannot set space labels when
    * creating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Create Space(s)' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The space to be created.</li>
    * </ul>
    */
    public Space postSpaceV1(Consumer<PostSpaceV1OperationSpec> spec) {
        PostSpaceV1OperationSpec r = new PostSpaceV1OperationSpec(spec);
        return api.postSpaceV1(r.payload());
    }

    /**
    * PostSpacePrivateV1
    * Create private space
    * Creates a new space that is only visible to the creator. This method is
    * the same as the [Create space](#api-space-post) method with permissions
    * set to the current user only. Note, currently you cannot set space
    * labels when creating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Create Space(s)' global permission.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The space to be created.</li>
    * </ul>
    */
    public Space postSpacePrivateV1(Consumer<PostSpacePrivateV1OperationSpec> spec) {
        PostSpacePrivateV1OperationSpec r = new PostSpacePrivateV1OperationSpec(spec);
        return api.postSpacePrivateV1(r.payload());
    }

    /**
    * PutSpaceBySpaceKeyV1
    * Update space
    * Updates the name, description, or homepage of a space.
    * 
    * -   For security reasons, permissions cannot be updated via the API and
    * must be changed via the user interface instead.
    * -   Currently you cannot set space labels when updating a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to update.</li>
    *   <li>payload: The updated space.</li>
    * </ul>
    */
    public Space putSpaceBySpaceKeyV1(Consumer<PutSpaceBySpaceKeyV1OperationSpec> spec) {
        PutSpaceBySpaceKeyV1OperationSpec r = new PutSpaceBySpaceKeyV1OperationSpec(spec);
        return api.putSpaceBySpaceKeyV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSpaceBySpaceKeyV1
    * Delete space
    * Permanently deletes a space without sending it to the trash. Note, the space will be deleted in a long running task.
    * Therefore, the space may not be deleted yet when this method has
    * returned. Clients should poll the status link that is returned in the
    * response until the task completes.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to delete.</li>
    * </ul>
    */
    public void deleteSpaceBySpaceKeyV1(Consumer<DeleteSpaceBySpaceKeyV1OperationSpec> spec) {
        DeleteSpaceBySpaceKeyV1OperationSpec r = new DeleteSpaceBySpaceKeyV1OperationSpec(spec);
        api.deleteSpaceBySpaceKeyV1(r.spaceKey());
    }

    /**
    * PostSpaceBySpaceKeyPermissionV1
    * Add new permission to space
    * Adds new permission to space.
    * 
    * If the permission to be added is a group permission, the group can be identified
    * by its group name or group id.
    * 
    * Note: Apps cannot access this REST resource - including when utilizing user impersonation.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content.</li>
    *   <li>payload: The permission to be created.</li>
    * </ul>
    */
    public SpacePermissionV2 postSpaceBySpaceKeyPermissionV1(Consumer<PostSpaceBySpaceKeyPermissionV1OperationSpec> spec) {
        PostSpaceBySpaceKeyPermissionV1OperationSpec r = new PostSpaceBySpaceKeyPermissionV1OperationSpec(spec);
        return api.postSpaceBySpaceKeyPermissionV1(r.spaceKey(), r.payload());
    }

    /**
    * PostSpaceBySpaceKeyPermissionCustomContentV1
    * Add new custom content permission to space
    * Adds new custom content permission to space.
    * 
    * If the permission to be added is a group permission, the group can be identified
    * by its group name or group id.
    * 
    * Note: Only apps can access this REST resource and only make changes to the respective app permissions.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content.</li>
    *   <li>payload: The permissions to be created.</li>
    * </ul>
    */
    public void postSpaceBySpaceKeyPermissionCustomContentV1(Consumer<PostSpaceBySpaceKeyPermissionCustomContentV1OperationSpec> spec) {
        PostSpaceBySpaceKeyPermissionCustomContentV1OperationSpec r = new PostSpaceBySpaceKeyPermissionCustomContentV1OperationSpec(spec);
        api.postSpaceBySpaceKeyPermissionCustomContentV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSpaceBySpaceKeyPermissionByIDV1
    * Remove a space permission
    * Removes a space permission. Note that removing Read Space permission for a user or group will remove all
    * the space permissions for that user or group.
    * 
    * Note: Apps cannot access this REST resource - including when utilizing user impersonation.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content.</li>
    *   <li>id: Id of the permission to be deleted.</li>
    * </ul>
    */
    public void deleteSpaceBySpaceKeyPermissionByIdv1(Consumer<DeleteSpaceBySpaceKeyPermissionByIDV1OperationSpec> spec) {
        DeleteSpaceBySpaceKeyPermissionByIDV1OperationSpec r = new DeleteSpaceBySpaceKeyPermissionByIDV1OperationSpec(spec);
        api.deleteSpaceBySpaceKeyPermissionByIdv1(r.spaceKey(), r.id());
    }

    /**
    * GetSpaceBySpaceKeySettingsV1
    * Get space settings
    * Returns the settings of a space. Currently only the
    * `routeOverrideEnabled` setting can be returned.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its settings.</li>
    * </ul>
    */
    public SpaceSettings getSpaceBySpaceKeySettingsV1(Consumer<GetSpaceBySpaceKeySettingsV1OperationSpec> spec) {
        GetSpaceBySpaceKeySettingsV1OperationSpec r = new GetSpaceBySpaceKeySettingsV1OperationSpec(spec);
        return api.getSpaceBySpaceKeySettingsV1(r.spaceKey());
    }

    /**
    * PutSpaceBySpaceKeySettingsV1
    * Update space settings
    * Updates the settings for a space. Currently only the
    * `routeOverrideEnabled` setting can be updated.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space whose settings will be updated.</li>
    *   <li>payload: The space settings to update.</li>
    * </ul>
    */
    public SpaceSettings putSpaceBySpaceKeySettingsV1(Consumer<PutSpaceBySpaceKeySettingsV1OperationSpec> spec) {
        PutSpaceBySpaceKeySettingsV1OperationSpec r = new PutSpaceBySpaceKeySettingsV1OperationSpec(spec);
        return api.putSpaceBySpaceKeySettingsV1(r.spaceKey(), r.payload());
    }

    /**
    * GetSpaceBySpaceKeyStateV1
    * Get space suggested content states
    * Get content states that are suggested in the space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content state settings.</li>
    * </ul>
    */
    public List<ContentState> getSpaceBySpaceKeyStateV1(Consumer<GetSpaceBySpaceKeyStateV1OperationSpec> spec) {
        GetSpaceBySpaceKeyStateV1OperationSpec r = new GetSpaceBySpaceKeyStateV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyStateV1(r.spaceKey());
    }

    /**
    * GetSpaceBySpaceKeyStateSettingsV1
    * Get content state settings for space
    * Get object describing whether content states are allowed at all, if custom content states or space content states
    * are restricted, and a list of space content states allowed for the space if they are not restricted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content state settings.</li>
    * </ul>
    */
    public ContentStateSettings getSpaceBySpaceKeyStateSettingsV1(Consumer<GetSpaceBySpaceKeyStateSettingsV1OperationSpec> spec) {
        GetSpaceBySpaceKeyStateSettingsV1OperationSpec r = new GetSpaceBySpaceKeyStateSettingsV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyStateSettingsV1(r.spaceKey());
    }

    /**
    * GetSpaceBySpaceKeyStateContentV1
    * Get content in space with given content state
    * Returns all content that has the provided content state in a space.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its content state settings.</li>
    *   <li>stateId: The id of the content state to filter content by</li>
    *   <li>expand: A multi-value parameter indicating which properties of the content to expand. Options include: space, version, history, children, etc.  Ex: space,version</li>
    *   <li>limit: Maximum number of results to return</li>
    *   <li>start: Number of result to start returning. (0 indexed)</li>
    * </ul>
    */
    public ContentArray getSpaceBySpaceKeyStateContentV1(Consumer<GetSpaceBySpaceKeyStateContentV1OperationSpec> spec) {
        GetSpaceBySpaceKeyStateContentV1OperationSpec r = new GetSpaceBySpaceKeyStateContentV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyStateContentV1(r.spaceKey(), r.stateId(), r.expand(), r.limit(), r.start());
    }

    /**
    * GetSpaceBySpaceKeyThemeV1
    * Get space theme
    * Returns the theme selected for a space, if one is set. If no space
    * theme is set, this means that the space is inheriting the global look
    * and feel settings.
    * 
    * **[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for its theme.</li>
    * </ul>
    */
    public Theme getSpaceBySpaceKeyThemeV1(Consumer<GetSpaceBySpaceKeyThemeV1OperationSpec> spec) {
        GetSpaceBySpaceKeyThemeV1OperationSpec r = new GetSpaceBySpaceKeyThemeV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyThemeV1(r.spaceKey());
    }

    /**
    * PutSpaceBySpaceKeyThemeV1
    * Set space theme
    * Sets the theme for a space. Note, if you want to reset the space theme to
    * the default Confluence theme, use the 'Reset space theme' method instead
    * of this method.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to set the theme for.</li>
    *   <li>payload: </li>
    * </ul>
    */
    public Theme putSpaceBySpaceKeyThemeV1(Consumer<PutSpaceBySpaceKeyThemeV1OperationSpec> spec) {
        PutSpaceBySpaceKeyThemeV1OperationSpec r = new PutSpaceBySpaceKeyThemeV1OperationSpec(spec);
        return api.putSpaceBySpaceKeyThemeV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSpaceBySpaceKeyThemeV1
    * Reset space theme
    * Resets the space theme. This means that the space will inherit the
    * global look and feel settings
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to reset the theme for.</li>
    * </ul>
    */
    public void deleteSpaceBySpaceKeyThemeV1(Consumer<DeleteSpaceBySpaceKeyThemeV1OperationSpec> spec) {
        DeleteSpaceBySpaceKeyThemeV1OperationSpec r = new DeleteSpaceBySpaceKeyThemeV1OperationSpec(spec);
        api.deleteSpaceBySpaceKeyThemeV1(r.spaceKey());
    }

    /**
    * GetSpaceBySpaceKeyWatchV1
    * Get space watchers
    * Returns a list of watchers of a space
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to get watchers.</li>
    *   <li>start: The start point of the collection to return.</li>
    *   <li>limit: The limit of the number of items to return, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public SpaceWatchArray getSpaceBySpaceKeyWatchV1(Consumer<GetSpaceBySpaceKeyWatchV1OperationSpec> spec) {
        GetSpaceBySpaceKeyWatchV1OperationSpec r = new GetSpaceBySpaceKeyWatchV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyWatchV1(r.spaceKey(), r.start(), r.limit());
    }

    /**
    * GetSpaceBySpaceKeyLabelV1
    * Get Space Labels
    * Returns a list of labels associated with a space. Can provide a prefix as well as other filters to
    * select different types of labels.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to get labels for.</li>
    *   <li>prefix: Filters the results to labels with the specified prefix. If this parameter is not specified, then labels with any prefix will be returned.  - `global` prefix is used by labels that are on content within the provided space. - `my` prefix can be explicitly added by a user when adding a label via the UI, e.g. 'my:example-label'. - `team` prefix is used for labels applied to the space.</li>
    *   <li>start: The starting index of the returned labels.</li>
    *   <li>limit: The maximum number of labels to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public LabelArray getSpaceBySpaceKeyLabelV1(Consumer<GetSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        GetSpaceBySpaceKeyLabelV1OperationSpec r = new GetSpaceBySpaceKeyLabelV1OperationSpec(spec);
        return api.getSpaceBySpaceKeyLabelV1(r.spaceKey(), r.prefix(), r.start(), r.limit());
    }

    /**
    * PostSpaceBySpaceKeyLabelV1
    * Add labels to a space
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to add labels to.</li>
    *   <li>payload: The labels to add to the content.</li>
    * </ul>
    */
    public LabelArray postSpaceBySpaceKeyLabelV1(Consumer<PostSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        PostSpaceBySpaceKeyLabelV1OperationSpec r = new PostSpaceBySpaceKeyLabelV1OperationSpec(spec);
        return api.postSpaceBySpaceKeyLabelV1(r.spaceKey(), r.payload());
    }

    /**
    * DeleteSpaceBySpaceKeyLabelV1
    * Remove label from a space
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to remove a labels from.</li>
    *   <li>name: The name of the label to remove</li>
    *   <li>prefix: The prefix of the label to remove. If not provided defaults to global.</li>
    * </ul>
    */
    public void deleteSpaceBySpaceKeyLabelV1(Consumer<DeleteSpaceBySpaceKeyLabelV1OperationSpec> spec) {
        DeleteSpaceBySpaceKeyLabelV1OperationSpec r = new DeleteSpaceBySpaceKeyLabelV1OperationSpec(spec);
        api.deleteSpaceBySpaceKeyLabelV1(r.spaceKey(), r.name(), r.prefix());
    }

    /**
    * PutTemplateV1
    * Update content template
    * Updates a content template. Note, blueprint templates cannot be updated
    * via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to update a space template or 'Confluence Administrator'
    * global permission to update a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The updated content template.</li>
    * </ul>
    */
    public ContentTemplate putTemplateV1(Consumer<PutTemplateV1OperationSpec> spec) {
        PutTemplateV1OperationSpec r = new PutTemplateV1OperationSpec(spec);
        return api.putTemplateV1(r.payload());
    }

    /**
    * PostTemplateV1
    * Create content template
    * Creates a new content template. Note, blueprint templates cannot be created via the REST API.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Admin' permission for the space to create a space template or 'Confluence Administrator'
    * global permission to create a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>payload: The content template to be created. The content body must be in 'storage' format.</li>
    * </ul>
    */
    public ContentTemplate postTemplateV1(Consumer<PostTemplateV1OperationSpec> spec) {
        PostTemplateV1OperationSpec r = new PostTemplateV1OperationSpec(spec);
        return api.postTemplateV1(r.payload());
    }

    /**
    * GetTemplateBlueprintV1
    * Get blueprint templates
    * Returns all templates provided by blueprints. Use this method to retrieve
    * all global blueprint templates or all blueprint templates in a space.
    * 
    * Note, all global blueprints are inherited by each space. Space blueprints
    * can be customised without affecting the global blueprints.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view blueprints for the space and permission
    * to access the Confluence site ('Can use' global permission) to view global blueprints.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for templates. If the `spaceKey` is not specified, global blueprint templates will be returned.</li>
    *   <li>start: The starting index of the returned templates.</li>
    *   <li>limit: The maximum number of templates to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public BlueprintTemplateArray getTemplateBlueprintV1(Consumer<GetTemplateBlueprintV1OperationSpec> spec) {
        GetTemplateBlueprintV1OperationSpec r = new GetTemplateBlueprintV1OperationSpec(spec);
        return api.getTemplateBlueprintV1(r.spaceKey(), r.start(), r.limit(), r.expand());
    }

    /**
    * GetTemplatePageV1
    * Get content templates
    * Returns all content templates. Use this method to retrieve all global
    * content templates or all content templates in a space.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for templates. If the `spaceKey` is not specified, global templates will be returned.</li>
    *   <li>start: The starting index of the returned templates.</li>
    *   <li>limit: The maximum number of templates to return per page. Note, this may be restricted by fixed system limits.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public ContentTemplateArray getTemplatePageV1(Consumer<GetTemplatePageV1OperationSpec> spec) {
        GetTemplatePageV1OperationSpec r = new GetTemplatePageV1OperationSpec(spec);
        return api.getTemplatePageV1(r.spaceKey(), r.start(), r.limit(), r.expand());
    }

    /**
    * GetTemplateByContentTemplateIDV1
    * Get content template
    * Returns a content template. This includes information about template,
    * like the name, the space or blueprint that the template is in, the body
    * of the template, and more.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'View' permission for the space to view space templates and permission to
    * access the Confluence site ('Can use' global permission) to view global templates.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentTemplateId: The ID of the content template to be returned.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the template to expand.  - `body` or `body.storage` returns the content of the template in storage format.</li>
    * </ul>
    */
    public ContentTemplate getTemplateByContentTemplateIdv1(Consumer<GetTemplateByContentTemplateIDV1OperationSpec> spec) {
        GetTemplateByContentTemplateIDV1OperationSpec r = new GetTemplateByContentTemplateIDV1OperationSpec(spec);
        return api.getTemplateByContentTemplateIdv1(r.contentTemplateId(), r.expand());
    }

    /**
    * DeleteTemplateByContentTemplateIDV1
    * Remove template
    * Deletes a template. This results in different actions depending on the
    * type of template:
    * 
    * - If the template is a content template, it is deleted.
    * - If the template is a modified space-level blueprint template, it reverts
    * to the template inherited from the global-level blueprint template.
    * - If the template is a modified global-level blueprint template, it reverts
    * to the default global-level blueprint template.
    * 
    *  Note, unmodified blueprint templates cannot be deleted.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    *         'Admin' permission for the space to delete a space template or 'Confluence Administrator'
    *         global permission to delete a global template.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentTemplateId: The ID of the template to be deleted.</li>
    * </ul>
    */
    public void deleteTemplateByContentTemplateIdv1(Consumer<DeleteTemplateByContentTemplateIDV1OperationSpec> spec) {
        DeleteTemplateByContentTemplateIDV1OperationSpec r = new DeleteTemplateByContentTemplateIDV1OperationSpec(spec);
        api.deleteTemplateByContentTemplateIdv1(r.contentTemplateId());
    }

    /**
    * GetUserV1
    * Get user
    * Returns a user. This includes information about the user, such as the
    * display name, account ID, profile picture, and more. The information returned may be
    * restricted by the user's profile visibility settings.
    * 
    * **Note:** to add, edit, or delete users in your organization, see the
    * [user management REST API](/cloud/admin/user-management/about/).
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.   - `personalSpace` returns the user's personal space, if it exists.   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.</li>
    * </ul>
    */
    public Map<String, Object> getUserV1(Consumer<GetUserV1OperationSpec> spec) {
        GetUserV1OperationSpec r = new GetUserV1OperationSpec(spec);
        return api.getUserV1(r.accountId(), r.expand());
    }

    /**
    * GetUserAnonymousV1
    * Get anonymous user
    * Returns information about how anonymous users are represented, like the
    * profile picture and display name.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.</li>
    * </ul>
    */
    public UserAnonymous getUserAnonymousV1(Consumer<GetUserAnonymousV1OperationSpec> spec) {
        GetUserAnonymousV1OperationSpec r = new GetUserAnonymousV1OperationSpec(spec);
        return api.getUserAnonymousV1(r.expand());
    }

    /**
    * GetUserCurrentV1
    * Get current user
    * Returns the currently logged-in user. This includes information about
    * the user, like the display name, userKey, account ID, profile picture,
    * and more.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.   - `personalSpace` returns the user's personal space, if it exists.   - `isExternalCollaborator`(@deprecated) see `isGuest` in response to find out whether the user is a guest.</li>
    * </ul>
    */
    public Map<String, Object> getUserCurrentV1(Consumer<GetUserCurrentV1OperationSpec> spec) {
        GetUserCurrentV1OperationSpec r = new GetUserCurrentV1OperationSpec(spec);
        return api.getUserCurrentV1(r.expand());
    }

    /**
    * GetUserMemberofV1
    * Get group memberships for user
    * Returns the groups that a user is a member of.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    *   <li>start: The starting index of the returned groups.</li>
    *   <li>limit: The maximum number of groups to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public GroupArrayWithLinks getUserMemberofV1(Consumer<GetUserMemberofV1OperationSpec> spec) {
        GetUserMemberofV1OperationSpec r = new GetUserMemberofV1OperationSpec(spec);
        return api.getUserMemberofV1(r.accountId(), r.start(), r.limit());
    }

    /**
    * GetUserBulkV1
    * Get multiple users using ids
    * Returns user details for the ids provided in the request.
    * Currently this API returns a maximum of 100 results.
    * If more than 100 account ids are passed in, then the first 100 will be returned.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>accountId: A list of accountId's of users to be returned.</li>
    *   <li>expand: A multi-value parameter indicating which properties of the user to expand.    - `operations` returns the operations that the user is allowed to do.   - `personalSpace` returns the user's personal space, if it exists.   - `isExternalCollaborator`(@deprecated) use `isGuest` instead to return whether the user is a guest.</li>
    * </ul>
    */
    public BulkUserLookupArray getUserBulkV1(Consumer<GetUserBulkV1OperationSpec> spec) {
        GetUserBulkV1OperationSpec r = new GetUserBulkV1OperationSpec(spec);
        return api.getUserBulkV1(r.accountId(), r.expand());
    }

    /**
    * GetUserWatchContentByContentIDV1
    * Get content watch status
    * Returns whether a user is watching a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch getUserWatchContentByContentIdv1(Consumer<GetUserWatchContentByContentIDV1OperationSpec> spec) {
        GetUserWatchContentByContentIDV1OperationSpec r = new GetUserWatchContentByContentIDV1OperationSpec(spec);
        return api.getUserWatchContentByContentIdv1(r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchContentByContentIDV1
    * Add content watcher
    * Adds a user as a watcher to a piece of content. Choose the user by doing
    * one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void postUserWatchContentByContentIdv1(Consumer<PostUserWatchContentByContentIDV1OperationSpec> spec) {
        PostUserWatchContentByContentIDV1OperationSpec r = new PostUserWatchContentByContentIDV1OperationSpec(spec);
        api.postUserWatchContentByContentIdv1(r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchContentByContentIDV1
    * Remove content watcher
    * Removes a user as a watcher from a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>contentId: The ID of the content to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void deleteUserWatchContentByContentIdv1(Consumer<DeleteUserWatchContentByContentIDV1OperationSpec> spec) {
        DeleteUserWatchContentByContentIDV1OperationSpec r = new DeleteUserWatchContentByContentIDV1OperationSpec(spec);
        api.deleteUserWatchContentByContentIdv1(r.xAtlassianToken(), r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetUserWatchLabelByLabelNameV1
    * Get label watch status
    * Returns whether a user is watching a label. Choose the user by doing one
    * of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>labelName: The name of the label to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch getUserWatchLabelByLabelNameV1(Consumer<GetUserWatchLabelByLabelNameV1OperationSpec> spec) {
        GetUserWatchLabelByLabelNameV1OperationSpec r = new GetUserWatchLabelByLabelNameV1OperationSpec(spec);
        return api.getUserWatchLabelByLabelNameV1(r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchLabelByLabelNameV1
    * Add label watcher
    * Adds a user as a watcher to a label. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>labelName: The name of the label to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void postUserWatchLabelByLabelNameV1(Consumer<PostUserWatchLabelByLabelNameV1OperationSpec> spec) {
        PostUserWatchLabelByLabelNameV1OperationSpec r = new PostUserWatchLabelByLabelNameV1OperationSpec(spec);
        api.postUserWatchLabelByLabelNameV1(r.xAtlassianToken(), r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchLabelByLabelNameV1
    * Remove label watcher
    * Removes a user as a watcher from a label. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>labelName: The name of the label to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void deleteUserWatchLabelByLabelNameV1(Consumer<DeleteUserWatchLabelByLabelNameV1OperationSpec> spec) {
        DeleteUserWatchLabelByLabelNameV1OperationSpec r = new DeleteUserWatchLabelByLabelNameV1OperationSpec(spec);
        api.deleteUserWatchLabelByLabelNameV1(r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetUserWatchSpaceBySpaceKeyV1
    * Get space watch status
    * Returns whether a user is watching a space. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch getUserWatchSpaceBySpaceKeyV1(Consumer<GetUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        GetUserWatchSpaceBySpaceKeyV1OperationSpec r = new GetUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        return api.getUserWatchSpaceBySpaceKeyV1(r.spaceKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchSpaceBySpaceKeyV1
    * Add space watcher
    * Adds a user as a watcher to a space. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>spaceKey: The key of the space to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void postUserWatchSpaceBySpaceKeyV1(Consumer<PostUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        PostUserWatchSpaceBySpaceKeyV1OperationSpec r = new PostUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        api.postUserWatchSpaceBySpaceKeyV1(r.xAtlassianToken(), r.spaceKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchSpaceBySpaceKeyV1
    * Remove space watch
    * Removes a user as a watcher from a space. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void deleteUserWatchSpaceBySpaceKeyV1(Consumer<DeleteUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        DeleteUserWatchSpaceBySpaceKeyV1OperationSpec r = new DeleteUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        api.deleteUserWatchSpaceBySpaceKeyV1(r.spaceKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetUserEmailV1
    * Get user email address
    * Returns a user's email address regardless of the user’s profile visibility settings. For Connect apps, this API is only available to apps approved by
    * Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
    * For Forge apps, this API only supports access via asApp() requests.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required.</li>
    * </ul>
    */
    public AccountIDEmailRecord getUserEmailV1(Consumer<GetUserEmailV1OperationSpec> spec) {
        GetUserEmailV1OperationSpec r = new GetUserEmailV1OperationSpec(spec);
        return api.getUserEmailV1(r.accountId());
    }

    /**
    * GetUserEmailBulkV1
    * Get user email addresses in batch
    * Returns a user's email address regardless of the user’s profile visibility settings. For Connect apps, this API is only available to apps approved by
    * Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
    * For Forge apps, this API only supports access via asApp() requests.
    * 
    * Any accounts which are not available will not be included in the result.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>accountId: The account IDs of the users.</li>
    * </ul>
    */
    public List<AccountIDEmailRecord> getUserEmailBulkV1(Consumer<GetUserEmailBulkV1OperationSpec> spec) {
        GetUserEmailBulkV1OperationSpec r = new GetUserEmailBulkV1OperationSpec(spec);
        return api.getUserEmailBulkV1(r.accountId());
    }

    /**
    * GetAnalyticsContentByContentIDViewsV1
    * Get views
    * Get the total number of views a piece of content has.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to get the views for.</li>
    *   <li>fromDate: The number of views for the content since the date.</li>
    * </ul>
    */
    public GetViewsR200 getAnalyticsContentByContentIdviewsV1(Consumer<GetAnalyticsContentByContentIDViewsV1OperationSpec> spec) {
        GetAnalyticsContentByContentIDViewsV1OperationSpec r = new GetAnalyticsContentByContentIDViewsV1OperationSpec(spec);
        return api.getAnalyticsContentByContentIdviewsV1(r.contentId(), r.fromDate());
    }

    /**
    * GetAnalyticsContentByContentIDViewersV1
    * Get viewers
    * Get the total number of distinct viewers a piece of content has.
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to get the viewers for.</li>
    *   <li>fromDate: The number of views for the content since the date.</li>
    * </ul>
    */
    public GetViewersR200 getAnalyticsContentByContentIdviewersV1(Consumer<GetAnalyticsContentByContentIDViewersV1OperationSpec> spec) {
        GetAnalyticsContentByContentIDViewersV1OperationSpec r = new GetAnalyticsContentByContentIDViewersV1OperationSpec(spec);
        return api.getAnalyticsContentByContentIdviewersV1(r.contentId(), r.fromDate());
    }

    /**
    * GetUserByUserIDPropertyV1
    * Get user properties
    * Returns the properties for a user as list of property keys. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user to be queried for its properties.</li>
    *   <li>start: The starting index of the returned properties.</li>
    *   <li>limit: The maximum number of properties to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public UserPropertyKeyArray getUserByUserIdpropertyV1(Consumer<GetUserByUserIDPropertyV1OperationSpec> spec) {
        GetUserByUserIDPropertyV1OperationSpec r = new GetUserByUserIDPropertyV1OperationSpec(spec);
        return api.getUserByUserIdpropertyV1(r.userId(), r.start(), r.limit());
    }

    /**
    * GetUserByUserIDPropertyByKeyV1
    * Get user property
    * Returns the property corresponding to `key` for a user. For more information
    * about user properties, see [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user to be queried for its properties.</li>
    *   <li>key: The key of the user property.</li>
    * </ul>
    */
    public UserProperty getUserByUserIdpropertyByKeyV1(Consumer<GetUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        GetUserByUserIDPropertyByKeyV1OperationSpec r = new GetUserByUserIDPropertyByKeyV1OperationSpec(spec);
        return api.getUserByUserIdpropertyByKeyV1(r.userId(), r.key());
    }

    /**
    * PutUserByUserIDPropertyByKeyV1
    * Update user property
    * Updates a property for the given user. Note, you cannot update the key of a user property, only the value.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    *   <li>payload: The user property to be updated.</li>
    * </ul>
    */
    public void putUserByUserIdpropertyByKeyV1(Consumer<PutUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        PutUserByUserIDPropertyByKeyV1OperationSpec r = new PutUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.putUserByUserIdpropertyByKeyV1(r.userId(), r.key(), r.payload());
    }

    /**
    * PostUserByUserIDPropertyByKeyV1
    * Create user property by key
    * Creates a property for a user. For more information  about user properties, see [Confluence entity properties]
    * (https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * `Note:` the number of properties which could be created per app in a tenant for each user might be
    * restricted by fixed system limits.
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    *   <li>payload: The user property to be created.</li>
    * </ul>
    */
    public void postUserByUserIdpropertyByKeyV1(Consumer<PostUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        PostUserByUserIDPropertyByKeyV1OperationSpec r = new PostUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.postUserByUserIdpropertyByKeyV1(r.userId(), r.key(), r.payload());
    }

    /**
    * DeleteUserByUserIDPropertyByKeyV1
    * Delete user property
    * Deletes a property for the given user.
    * For more information about user properties, see
    * [Confluence entity properties](https://developer.atlassian.com/cloud/confluence/confluence-entity-properties/).
    * `Note`, these properties stored against a user are on a Confluence site level and not space/content level.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>userId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192</li>
    *   <li>key: The key of the user property.</li>
    * </ul>
    */
    public void deleteUserByUserIdpropertyByKeyV1(Consumer<DeleteUserByUserIDPropertyByKeyV1OperationSpec> spec) {
        DeleteUserByUserIDPropertyByKeyV1OperationSpec r = new DeleteUserByUserIDPropertyByKeyV1OperationSpec(spec);
        api.deleteUserByUserIdpropertyByKeyV1(r.userId(), r.key());
    }

}
