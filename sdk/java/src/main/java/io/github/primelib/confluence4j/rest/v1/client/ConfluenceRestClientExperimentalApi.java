// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.LabelArray;
import java.util.List;
import java.util.Map;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ConfluenceRestClientExperimentalApi
 *
 * APIs in this section can change without any prior deprecation notice.
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientExperimentalApi {

    /**
    * DeleteContentByIDPageTreeV1
    * Delete page tree
    * Moves a pagetree rooted at a page to the space's trash:
    * 
    * - If the content's type is `page` and its status is `current`, it will be trashed including
    * all its descendants.
    * - For every other combination of content type and status, this API is not supported.
    * 
    * This API accepts the pageTree delete request and returns a task ID.
    * The delete process happens asynchronously.
    * 
    *  Response example:
    *  &lt;pre&gt;&lt;code&gt;
    *  {
    *       "id" : "1180606",
    *       "links" : {
    *            "status" : "/rest/api/longtask/1180606"
    *       }
    *  }
    *  &lt;/code&gt;&lt;/pre&gt;
    *  Use the `/longtask/&lt;taskId&gt;` REST API to get the copy task status.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Delete' permission for the space that the content is in.
    *
    * @param id The ID of the content which forms root of the page tree, to be deleted.
    */
    @RequestLine("DELETE /rest/api/content/{id}/pageTree")
    void DeleteContentByIDPageTreeV1(
            @NotNull @Param("id") String id
    );

    /**
    * GetSpaceBySpaceKeyLabelV1
    * Get Space Labels
    * Returns a list of labels associated with a space. Can provide a prefix as well as other filters to
    * select different types of labels.
    *
    * @param spaceKey The key of the space to get labels for.
    * @param prefix Filters the results to labels with the specified prefix. If this parameter
    * is not specified, then labels with any prefix will be returned.
    * 
    * - `global` prefix is used by labels that are on content within the provided space.
    * - `my` prefix can be explicitly added by a user when adding a label
    * via the UI, e.g. 'my:example-label'.
    * - `team` prefix is used for labels applied to the space.
    * @param start The starting index of the returned labels.
    * @param limit The maximum number of labels to return per page. Note,
    * this may be restricted by fixed system limits.
    */
    @RequestLine("GET /rest/api/space/{spaceKey}/label?prefix={prefix}&start={start}&limit={limit}")
    @Headers({
        "Accept: application/json"
    })
    LabelArray GetSpaceBySpaceKeyLabelV1(
            @NotNull @Param("spaceKey") String spaceKey,
            @Nullable @Param("prefix") String prefix,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit
    );

    /**
    * PostSpaceBySpaceKeyLabelV1
    * Add labels to a space
    * Adds labels to a piece of content. Does not modify the existing labels.
    * 
    * Notes:
    * 
    * - Labels can also be added when creating content ([Create content](#api-content-post)).
    * - Labels can be updated when updating content ([Update content](#api-content-id-put)).
    * This will delete the existing labels and replace them with the labels in
    * the request.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to update the content.
    *
    * @param spaceKey The key of the space to add labels to.
    * @param payload The labels to add to the content.
    */
    @RequestLine("POST /rest/api/space/{spaceKey}/label")
    @Headers({
        "Content-Type: application/json",
        "Accept: application/json"
    })
    LabelArray PostSpaceBySpaceKeyLabelV1(
            @NotNull @Param("spaceKey") String spaceKey,
            @NotNull List<Map<String, Object>> payload
    );

    /**
    * DeleteSpaceBySpaceKeyLabelV1
    * Remove label from a space
    *
    * @param spaceKey The key of the space to remove a labels from.
    * @param name The name of the label to remove
    * @param prefix The prefix of the label to remove. If not provided defaults to global.
    */
    @RequestLine("DELETE /rest/api/space/{spaceKey}/label?name={name}&prefix={prefix}")
    void DeleteSpaceBySpaceKeyLabelV1(
            @NotNull @Param("spaceKey") String spaceKey,
            @NotNull @Param("name") String name,
            @Nullable @Param("prefix") String prefix
    );

}
