// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import io.github.primelib.confluence4j.rest.v1.models.VersionRestore;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * PostContentByIDVersionV1
 * <p>
 * Restores a historical version to be the latest version. That is, a new version
 * is created with the content of the historical version.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * Permission to update the content.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PostContentByIDVersionV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the content for which the history will be restored.
     *
     */
    @NonNull
    private String id;

    /**
     * A multi-value parameter indicating which properties of the content to expand. By default, the `content`
     * object is expanded.
     * 
     * - `collaborators` returns the users that collaborated on the version.
     * - `content` returns the content for the version.
     *
     */
    @Nullable
    private List<String> expand;

    /**
     * The content version to be restored.
     *
     */
    @NonNull
    private VersionRestore payload;

    /**
     * Constructs a validated instance of {@link PostContentByIDVersionV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PostContentByIDVersionV1OperationSpec(Consumer<PostContentByIDVersionV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(id, "id is a required parameter!");
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
