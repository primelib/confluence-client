// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import io.github.primelib.confluence4j.rest.v1.models.CopyPageRequest;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

/**
 * PostContentByIDCopyV1
 * <p>
 * Copies a single page and its associated properties, permissions, attachments, and custom contents.
 *  The `id` path parameter refers to the content ID of the page to copy. The target of the page to be copied
 *  is defined using the `destination` in the request body and can be one of the following types.
 * 
 *   - `space`: page will be copied to the specified space as a root page on the space
 *   - `parent_page`: page will be copied as a child of the specified parent page
 *   - `parent_content`: page will be copied as a child of the specified parent content
 *   - `existing_page`: page will be copied and replace the specified page
 * 
 * By default, the following objects are expanded: `space`, `history`, `version`.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the space that the content will be copied in and permission to update the content if copying to an `existing_page`.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class PostContentByIDCopyV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * id
     *
     */
    @NonNull
    private String id;

    /**
     * A multi-value parameter indicating which properties of the content to expand.
     * Maximum sub-expansions allowed is `8`.
     * 
     * - `childTypes.all` returns whether the content has attachments, comments, or child pages/whiteboards.
     * Use this if you only need to check whether the content has children of a particular type.
     * - `childTypes.attachment` returns whether the content has attachments.
     * - `childTypes.comment` returns whether the content has comments.
     * - `childTypes.page` returns whether the content has child pages.
     * - `childTypes.whiteboard` returns whether the content has child whiteboards.
     * - `childTypes.database` returns whether the content has child databases.
     * - `childTypes.embed` returns whether the content has child embeds (smartlinks).
     * - `childTypes.folder` returns whether the content has child folder.
     * - `container` returns the space that the content is in. This is the same as the information
     * returned by [Get space](#api-space-spaceKey-get).
     * - `metadata.currentuser` returns information about the current user in relation to the content,
     * including when they last viewed it, modified it, contributed to it, or added it as a favorite.
     * - `metadata.properties` returns content properties that have been set via the Confluence REST API.
     * - `metadata.labels` returns the labels that have been added to the content.
     * - `metadata.frontend` this property is only used by Atlassian.
     * - `operations` returns the operations for the content, which are used when setting permissions.
     * - `children.page` returns pages that are descendants at the level immediately below the content.
     * - `children.whiteboard` returns whiteboards that are descendants at the level immediately below the content.
     * - `children.database` returns databases that are descendants at the level immediately below the content.
     * - `children.embed` returns embeds (smartlinks) that are descendants at the level immediately below the content.
     * - `children.folder` returns folders that are descendants at the level immediately below the content.
     * - `children.attachment` returns all attachments for the content.
     * - `children.comment` returns all comments on the content.
     * - `restrictions.read.restrictions.user` returns the users that have permission to read the content.
     * - `restrictions.read.restrictions.group` returns the groups that have permission to read the content. Note that
     * this may return deleted groups, because deleting a group doesn't remove associated restrictions.
     * - `restrictions.update.restrictions.user` returns the users that have permission to update the content.
     * - `restrictions.update.restrictions.group` returns the groups that have permission to update the content. Note that
     * this may return deleted groups because deleting a group doesn't remove associated restrictions.
     * - `history` returns the history of the content, including the date it was created.
     * - `history.lastUpdated` returns information about the most recent update of the content, including
     * who updated it and when it was updated.
     * - `history.previousVersion` returns information about the update prior to the current content update.
     * - `history.contributors` returns all of the users who have contributed to the content.
     * - `history.nextVersion` returns information about the update after to the current content update.
     * - `ancestors` returns the parent content, if the content is a page or whiteboard.
     * - `body` returns the body of the content in different formats, including the editor format,
     * view format, and export format.
     * - `body.storage` returns the body of content in storage format.
     * - `body.view` returns the body of content in view format.
     * - `version` returns information about the most recent update of the content, including who updated it
     * and when it was updated.
     * - `descendants.page` returns pages that are descendants at any level below the content.
     * - `descendants.whiteboard` returns whiteboards that are descendants at any level below the content.
     * - `descendants.database` returns databases that are descendants at any level below the content.
     * - `descendants.embed` returns embeds (smartlinks) that are descendants at any level below the content.
     * - `descendants.folder` returns folders that are descendants at any level below the content.
     * - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.
     * - `descendants.comment` returns all comments on the content, same as `children.comment`.
     * - `space` returns the space that the content is in. This is the same as the information returned by
     * [Get space](#api-space-spaceKey-get).
     * 
     * In addition, the following comment-specific expansions can be used:
     * - `extensions.inlineProperties` returns inline comment-specific properties.
     * - `extensions.resolution` returns the resolution status of each comment.
     *
     */
    @Nullable
    private List<String> expand;

    /**
     * Request object from json post body
     *
     */
    @NonNull
    private CopyPageRequest payload;

    /**
     * Constructs a validated instance of {@link PostContentByIDCopyV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public PostContentByIDCopyV1OperationSpec(Consumer<PostContentByIDCopyV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(id, "id is a required parameter!");
        Objects.requireNonNull(payload, "payload is a required parameter!");
    }
}
