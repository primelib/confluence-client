// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * DeleteTemplateByContentTemplateIDV1
 * <p>
 * Deletes a template. This results in different actions depending on the
 * type of template:
 * 
 * - If the template is a content template, it is deleted.
 * - If the template is a modified space-level blueprint template, it reverts
 * to the template inherited from the global-level blueprint template.
 * - If the template is a modified global-level blueprint template, it reverts
 * to the default global-level blueprint template.
 * 
 *  Note, unmodified blueprint templates cannot be deleted.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 *         'Admin' permission for the space to delete a space template or 'Confluence Administrator'
 *         global permission to delete a global template.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class DeleteTemplateByContentTemplateIDV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the template to be deleted.
     *
     */
    @NonNull
    private String contentTemplateId;

    /**
     * Constructs a validated instance of {@link DeleteTemplateByContentTemplateIDV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public DeleteTemplateByContentTemplateIDV1OperationSpec(Consumer<DeleteTemplateByContentTemplateIDV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(contentTemplateId, "contentTemplateId is a required parameter!");
    }
}
