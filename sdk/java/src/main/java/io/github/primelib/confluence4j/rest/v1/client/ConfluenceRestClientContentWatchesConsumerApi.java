// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import io.github.primelib.confluence4j.rest.v1.models.SpaceWatchArray;
import io.github.primelib.confluence4j.rest.v1.models.UserWatch;
import io.github.primelib.confluence4j.rest.v1.models.WatchArray;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.DeleteUserWatchSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDNotificationChildCreatedV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetContentByIDNotificationCreatedV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetSpaceBySpaceKeyWatchV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.GetUserWatchSpaceBySpaceKeyV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchContentByContentIDV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchLabelByLabelNameV1OperationSpec;
import io.github.primelib.confluence4j.rest.v1.operations.PostUserWatchSpaceBySpaceKeyV1OperationSpec;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;

/**
 * ConfluenceRestClientContentWatchesConsumerApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public class ConfluenceRestClientContentWatchesConsumerApi {
    private final ConfluenceRestClientContentWatchesApi api;

    public ConfluenceRestClientContentWatchesConsumerApi(ConfluenceRestClientContentWatchesApi api) {
        this.api = api;
    }


    /**
    * GetContentByIDNotificationChildCreatedV1
    * Get watches for page
    * Returns the watches for a page. A user that watches a page will receive
    * receive notifications when the page is updated.
    * 
    * If you want to manage watches for a page, use the following `user` methods:
    * 
    * - [Get content watch status for user](#api-user-watch-content-contentId-get)
    * - [Add content watch](#api-user-watch-content-contentId-post)
    * - [Remove content watch](#api-user-watch-content-contentId-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its watches.</li>
    *   <li>start: The starting index of the returned watches.</li>
    *   <li>limit: The maximum number of watches to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public WatchArray GetContentByIDNotificationChildCreatedV1(Consumer<GetContentByIDNotificationChildCreatedV1OperationSpec> spec) {
        GetContentByIDNotificationChildCreatedV1OperationSpec r = new GetContentByIDNotificationChildCreatedV1OperationSpec(spec);
        return api.GetContentByIDNotificationChildCreatedV1(r.id(), r.start(), r.limit());
    }

    /**
    * GetContentByIDNotificationCreatedV1
    * Get watches for space
    * Returns all space watches for the space that the content is in. A user that
    * watches a space will receive receive notifications when any content in the
    * space is updated.
    * 
    * If you want to manage watches for a space, use the following `user` methods:
    * 
    * - [Get space watch status for user](#api-user-watch-space-spaceKey-get)
    * - [Add space watch](#api-user-watch-space-spaceKey-post)
    * - [Remove space watch](#api-user-watch-space-spaceKey-delete)
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>id: The ID of the content to be queried for its watches.</li>
    *   <li>start: The starting index of the returned watches.</li>
    *   <li>limit: The maximum number of watches to return per page. Note, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public SpaceWatchArray GetContentByIDNotificationCreatedV1(Consumer<GetContentByIDNotificationCreatedV1OperationSpec> spec) {
        GetContentByIDNotificationCreatedV1OperationSpec r = new GetContentByIDNotificationCreatedV1OperationSpec(spec);
        return api.GetContentByIDNotificationCreatedV1(r.id(), r.start(), r.limit());
    }

    /**
    * GetSpaceBySpaceKeyWatchV1
    * Get space watchers
    * Returns a list of watchers of a space
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to get watchers.</li>
    *   <li>start: The start point of the collection to return.</li>
    *   <li>limit: The limit of the number of items to return, this may be restricted by fixed system limits.</li>
    * </ul>
    */
    public SpaceWatchArray GetSpaceBySpaceKeyWatchV1(Consumer<GetSpaceBySpaceKeyWatchV1OperationSpec> spec) {
        GetSpaceBySpaceKeyWatchV1OperationSpec r = new GetSpaceBySpaceKeyWatchV1OperationSpec(spec);
        return api.GetSpaceBySpaceKeyWatchV1(r.spaceKey(), r.start(), r.limit());
    }

    /**
    * GetUserWatchContentByContentIDV1
    * Get content watch status
    * Returns whether a user is watching a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch GetUserWatchContentByContentIDV1(Consumer<GetUserWatchContentByContentIDV1OperationSpec> spec) {
        GetUserWatchContentByContentIDV1OperationSpec r = new GetUserWatchContentByContentIDV1OperationSpec(spec);
        return api.GetUserWatchContentByContentIDV1(r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchContentByContentIDV1
    * Add content watcher
    * Adds a user as a watcher to a piece of content. Choose the user by doing
    * one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>contentId: The ID of the content to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void PostUserWatchContentByContentIDV1(Consumer<PostUserWatchContentByContentIDV1OperationSpec> spec) {
        PostUserWatchContentByContentIDV1OperationSpec r = new PostUserWatchContentByContentIDV1OperationSpec(spec);
        api.PostUserWatchContentByContentIDV1(r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchContentByContentIDV1
    * Remove content watcher
    * Removes a user as a watcher from a piece of content. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>contentId: The ID of the content to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void DeleteUserWatchContentByContentIDV1(Consumer<DeleteUserWatchContentByContentIDV1OperationSpec> spec) {
        DeleteUserWatchContentByContentIDV1OperationSpec r = new DeleteUserWatchContentByContentIDV1OperationSpec(spec);
        api.DeleteUserWatchContentByContentIDV1(r.xAtlassianToken(), r.contentId(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetUserWatchLabelByLabelNameV1
    * Get label watch status
    * Returns whether a user is watching a label. Choose the user by doing one
    * of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>labelName: The name of the label to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch GetUserWatchLabelByLabelNameV1(Consumer<GetUserWatchLabelByLabelNameV1OperationSpec> spec) {
        GetUserWatchLabelByLabelNameV1OperationSpec r = new GetUserWatchLabelByLabelNameV1OperationSpec(spec);
        return api.GetUserWatchLabelByLabelNameV1(r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchLabelByLabelNameV1
    * Add label watcher
    * Adds a user as a watcher to a label. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>labelName: The name of the label to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void PostUserWatchLabelByLabelNameV1(Consumer<PostUserWatchLabelByLabelNameV1OperationSpec> spec) {
        PostUserWatchLabelByLabelNameV1OperationSpec r = new PostUserWatchLabelByLabelNameV1OperationSpec(spec);
        api.PostUserWatchLabelByLabelNameV1(r.xAtlassianToken(), r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchLabelByLabelNameV1
    * Remove label watcher
    * Removes a user as a watcher from a label. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>labelName: The name of the label to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void DeleteUserWatchLabelByLabelNameV1(Consumer<DeleteUserWatchLabelByLabelNameV1OperationSpec> spec) {
        DeleteUserWatchLabelByLabelNameV1OperationSpec r = new DeleteUserWatchLabelByLabelNameV1OperationSpec(spec);
        api.DeleteUserWatchLabelByLabelNameV1(r.labelName(), r.key(), r.username(), r.accountId());
    }

    /**
    * GetUserWatchSpaceBySpaceKeyV1
    * Get space watch status
    * Returns whether a user is watching a space. Choose the user by
    * doing one of the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to be queried for whether the specified user is watching it.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public UserWatch GetUserWatchSpaceBySpaceKeyV1(Consumer<GetUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        GetUserWatchSpaceBySpaceKeyV1OperationSpec r = new GetUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        return api.GetUserWatchSpaceBySpaceKeyV1(r.spaceKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * PostUserWatchSpaceBySpaceKeyV1
    * Add space watcher
    * Adds a user as a watcher to a space. Choose the user by doing one of the
    * following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * Note, you must add the `X-Atlassian-Token: no-check` header when making a
    * request, as this operation has XSRF protection.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>xAtlassianToken: Note, you must add header when making a request, as this operation has XSRF protection.</li>
    *   <li>spaceKey: The key of the space to add the watcher to.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void PostUserWatchSpaceBySpaceKeyV1(Consumer<PostUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        PostUserWatchSpaceBySpaceKeyV1OperationSpec r = new PostUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        api.PostUserWatchSpaceBySpaceKeyV1(r.xAtlassianToken(), r.spaceKey(), r.key(), r.username(), r.accountId());
    }

    /**
    * DeleteUserWatchSpaceBySpaceKeyV1
    * Remove space watch
    * Removes a user as a watcher from a space. Choose the user by doing one of
    * the following:
    * 
    * - Specify a user via a query parameter: Use the `accountId` to identify the user.
    * - Do not specify a user: The currently logged-in user will be used.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * 'Confluence Administrator' global permission if specifying a user, otherwise
    * permission to access the Confluence site ('Can use' global permission).
    *
    * @param spec a consumer that creates the payload for this operation. Supports the following properties:
    * <ul>
    *   <li>spaceKey: The key of the space to remove the watcher from.</li>
    *   <li>key: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>username: This parameter is no longer available and will be removed from the documentation soon. Use `accountId` instead. See the [deprecation notice](/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/) for details.</li>
    *   <li>accountId: The account ID of the user. The accountId uniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.</li>
    * </ul>
    */
    public void DeleteUserWatchSpaceBySpaceKeyV1(Consumer<DeleteUserWatchSpaceBySpaceKeyV1OperationSpec> spec) {
        DeleteUserWatchSpaceBySpaceKeyV1OperationSpec r = new DeleteUserWatchSpaceBySpaceKeyV1OperationSpec(spec);
        api.DeleteUserWatchSpaceBySpaceKeyV1(r.spaceKey(), r.key(), r.username(), r.accountId());
    }

}
