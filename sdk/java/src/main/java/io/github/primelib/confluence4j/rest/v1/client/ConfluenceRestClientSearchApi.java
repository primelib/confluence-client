// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.client;

import feign.Headers;
import feign.Param;
import feign.RequestLine;
import io.github.primelib.confluence4j.rest.v1.models.SearchPageResponseSearchResult;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ConfluenceRestClientSearchApi
 */
@Generated(value = "io.github.primelib.primecodegen")
public interface ConfluenceRestClientSearchApi {

    /**
    * GetSearchV1
    * Search content
    * Searches for content using the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * **Note that CQL input queries submitted through the `/wiki/rest/api/search` endpoint no longer support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.** 
    * See this [deprecation notice](https://developer.atlassian.com/cloud/confluence/deprecation-notice-search-api/) for more details.
    * 
    * Example initial call:
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25
    * ```
    * 
    * Example response:
    * ```
    * {
    *   "results": [
    *     { ... },
    *     { ... },
    *     ...
    *     { ... }
    *   ],
    *   "limit": 25,
    *   "size": 25,
    *   ...
    *   "_links": {
    *     "base": "&lt;url&gt;",
    *     "context": "&lt;url&gt;",
    *     "next": "/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg",
    *     "self": "&lt;url&gt;"
    *   }
    * }
    * ```
    * 
    * When additional results are available, returns `next` and `prev` URLs to retrieve them in subsequent calls. The URLs each contain a cursor that points to the appropriate set of results. Use `limit` to specify the number of results returned in each call.
    * 
    * Example subsequent call (taken from example response):
    * ```
    * /wiki/rest/api/search?cql=type=page&amp;limit=25&amp;cursor=raNDoMsTRiNg
    * ```
    * The response to this will have a `prev` URL similar to the `next` in the example response.
    * 
    * If the expand query parameter is used with the `body.export_view` and/or `body.styled_view` properties, then the query limit parameter will be restricted to a maximum value of 25.
    * 
    * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
    * Permission to view the entities. Note, only entities that the user has
    * permission to view will be returned.
    *
    * @param cql The CQL query to be used for the search. See
    * [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
    * for instructions on how to build a CQL query.
    * @param cqlcontext The space, content, and content status to execute the search
    * against.
    * 
    * - `spaceKey` Key of the space to search against. Optional.
    * - `contentId` ID of the content to search against. Optional. Must be
    * in the space specified by `spaceKey`.
    * - `contentStatuses` Content statuses to search against. Optional.
    * 
    * Specify these values in an object. For example,
    * `cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`
    * @param cursor Pointer to a set of search results, returned as part of the `next` or `prev` URL from the previous search call.
    * @param next 
    * @param prev 
    * @param limit The maximum number of content objects to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param start The start point of the collection to return
    * @param includeArchivedSpaces Whether to include content from archived spaces in the results.
    * @param excludeCurrentSpaces Whether to exclude current spaces and only show archived spaces.
    * @param excerpt The excerpt strategy to apply to the result
    * @param sitePermissionTypeFilter Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator`
    * for external/guest users, and `all` to include all permission types.
    * @param expand 
    */
    @RequestLine("GET /rest/api/search?cql={cql}&cqlcontext={cqlcontext}&cursor={cursor}&next={next}&prev={prev}&limit={limit}&start={start}&includeArchivedSpaces={includeArchivedSpaces}&excludeCurrentSpaces={excludeCurrentSpaces}&excerpt={excerpt}&sitePermissionTypeFilter={sitePermissionTypeFilter}&expand={expand}")
    @Headers({
        "Accept: application/json"
    })
    SearchPageResponseSearchResult GetSearchV1(
            @NotNull @Param("cql") String cql,
            @Nullable @Param("cqlcontext") String cqlcontext,
            @Nullable @Param("cursor") String cursor,
            @Nullable @Param("next") Boolean next,
            @Nullable @Param("prev") Boolean prev,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("includeArchivedSpaces") Boolean includeArchivedSpaces,
            @Nullable @Param("excludeCurrentSpaces") Boolean excludeCurrentSpaces,
            @Nullable @Param("excerpt") String excerpt,
            @Nullable @Param("sitePermissionTypeFilter") String sitePermissionTypeFilter,
            @Nullable @Param("expand") List<String> expand
    );

    /**
    * GetSearchUserV1
    * Search users
    * Searches for users using user-specific queries from the
    * [Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
    * 
    * Note that CQL input queries submitted through the `/wiki/rest/api/search/user` endpoint only support user-specific fields like `user`, `user.fullname`, `user.accountid`, and `user.userkey`.
    * 
    * Note that some user fields may be set to null depending on the user's privacy settings.
    * These are: email, profilePicture, displayName, and timeZone.
    *
    * @param cql The CQL query to be used for the search. See
    * [Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)
    * for instructions on how to build a CQL query.
    * 
    * Example queries:
    *           cql=type=user will return up to 10k users
    *           cql=user="1234" will return user with accountId "1234"
    *           You can also use IN, NOT IN, != operators
    *           cql=user IN ("12", "34") will return users with accountids "12" and "34"
    *           cql=user.fullname~jo will return users with nickname/full name starting with "jo"
    *           cql=user.accountid="123" will return user with accountId "123"
    * @param start The starting index of the returned users.
    * @param limit The maximum number of user objects to return per page.
    * Note, this may be restricted by fixed system limits.
    * @param expand A multi-value parameter indicating which properties of the user to expand.
    * 
    * - `operations` returns the operations for the user, which are used
    * when setting permissions.
    * - `personalSpace` returns the personal space of the user.
    * @param sitePermissionTypeFilter Filters users by permission type. Use `none` to default to licensed users, `externalCollaborator`
    * for external/guest users, and `all` to include all permission types.
    */
    @RequestLine("GET /rest/api/search/user?cql={cql}&start={start}&limit={limit}&expand={expand}&sitePermissionTypeFilter={sitePermissionTypeFilter}")
    @Headers({
        "Accept: application/json"
    })
    SearchPageResponseSearchResult GetSearchUserV1(
            @NotNull @Param("cql") String cql,
            @Nullable @Param("start") Integer start,
            @Nullable @Param("limit") Integer limit,
            @Nullable @Param("expand") List<String> expand,
            @Nullable @Param("sitePermissionTypeFilter") String sitePermissionTypeFilter
    );

}
