// WARNING: This file was generated by PrimeCodeGen. DO NOT EDIT.

package io.github.primelib.confluence4j.rest.v1.operations;

import java.util.Objects;
import java.util.function.Consumer;
import javax.annotation.processing.Generated;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jspecify.annotations.NonNull;

/**
 * DeleteContentByIDVersionByVersionNumberV1
 * <p>
 * Delete a historical version. This does not delete the changes made to the
 * content in that version, rather the changes for the deleted version are
 * rolled up into the next version. Note, you cannot delete the current version.
 * 
 * **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
 * Permission to update the content.
 *
 */
@Getter
@Setter
@EqualsAndHashCode
@ToString
@Accessors(fluent = true, chain = true)
@Generated(value = "io.github.primelib.primecodegen")
public class DeleteContentByIDVersionByVersionNumberV1OperationSpec {
    /**
     * allows to disable validation of the spec, use with care!
     */
    @ApiStatus.Experimental
    public static Boolean VALIDATION_ENABLED = true;

    /**
     * The ID of the content that the version will be deleted from.
     *
     */
    @NonNull
    private String id;

    /**
     * The number of the version to be deleted. The version number starts
     * from 1 up to current version.
     *
     */
    @NonNull
    private Integer versionNumber;

    /**
     * Constructs a validated instance of {@link DeleteContentByIDVersionByVersionNumberV1OperationSpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public DeleteContentByIDVersionByVersionNumberV1OperationSpec(Consumer<DeleteContentByIDVersionByVersionNumberV1OperationSpec> spec) {
        spec.accept(this);
        if (VALIDATION_ENABLED)
            validate();
    }

    /**
     * Validates the Spec, will throw a exception if required parameters are missing
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(id, "id is a required parameter!");
        Objects.requireNonNull(versionNumber, "versionNumber is a required parameter!");
    }
}
